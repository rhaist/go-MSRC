/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LayoutKind the model 'LayoutKind'
type LayoutKind string

// List of LayoutKind
const (
	SEQUENTIAL LayoutKind = "Sequential"
	EXPLICIT   LayoutKind = "Explicit"
	AUTO       LayoutKind = "Auto"
)

// All allowed values of LayoutKind enum
var AllowedLayoutKindEnumValues = []LayoutKind{
	"Sequential",
	"Explicit",
	"Auto",
}

func (v *LayoutKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LayoutKind(value)
	for _, existing := range AllowedLayoutKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LayoutKind", value)
}

// NewLayoutKindFromValue returns a pointer to a valid LayoutKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLayoutKindFromValue(v string) (*LayoutKind, error) {
	ev := LayoutKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LayoutKind: valid values are %v", v, AllowedLayoutKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LayoutKind) IsValid() bool {
	for _, existing := range AllowedLayoutKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LayoutKind value
func (v LayoutKind) Ptr() *LayoutKind {
	return &v
}

type NullableLayoutKind struct {
	value *LayoutKind
	isSet bool
}

func (v NullableLayoutKind) Get() *LayoutKind {
	return v.value
}

func (v *NullableLayoutKind) Set(val *LayoutKind) {
	v.value = val
	v.isSet = true
}

func (v NullableLayoutKind) IsSet() bool {
	return v.isSet
}

func (v *NullableLayoutKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayoutKind(val *LayoutKind) *NullableLayoutKind {
	return &NullableLayoutKind{value: val, isSet: true}
}

func (v NullableLayoutKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayoutKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
