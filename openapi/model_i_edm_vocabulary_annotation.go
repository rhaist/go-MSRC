/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IEdmVocabularyAnnotation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IEdmVocabularyAnnotation{}

// IEdmVocabularyAnnotation struct for IEdmVocabularyAnnotation
type IEdmVocabularyAnnotation struct {
	Qualifier NullableString         `json:"qualifier,omitempty"`
	Term      *IEdmTerm              `json:"term,omitempty"`
	Target    map[string]interface{} `json:"target,omitempty"`
	Value     *IEdmExpression        `json:"value,omitempty"`
}

// NewIEdmVocabularyAnnotation instantiates a new IEdmVocabularyAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIEdmVocabularyAnnotation() *IEdmVocabularyAnnotation {
	this := IEdmVocabularyAnnotation{}
	return &this
}

// NewIEdmVocabularyAnnotationWithDefaults instantiates a new IEdmVocabularyAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIEdmVocabularyAnnotationWithDefaults() *IEdmVocabularyAnnotation {
	this := IEdmVocabularyAnnotation{}
	return &this
}

// GetQualifier returns the Qualifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IEdmVocabularyAnnotation) GetQualifier() string {
	if o == nil || IsNil(o.Qualifier.Get()) {
		var ret string
		return ret
	}
	return *o.Qualifier.Get()
}

// GetQualifierOk returns a tuple with the Qualifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IEdmVocabularyAnnotation) GetQualifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Qualifier.Get(), o.Qualifier.IsSet()
}

// HasQualifier returns a boolean if a field has been set.
func (o *IEdmVocabularyAnnotation) HasQualifier() bool {
	if o != nil && o.Qualifier.IsSet() {
		return true
	}

	return false
}

// SetQualifier gets a reference to the given NullableString and assigns it to the Qualifier field.
func (o *IEdmVocabularyAnnotation) SetQualifier(v string) {
	o.Qualifier.Set(&v)
}

// SetQualifierNil sets the value for Qualifier to be an explicit nil
func (o *IEdmVocabularyAnnotation) SetQualifierNil() {
	o.Qualifier.Set(nil)
}

// UnsetQualifier ensures that no value is present for Qualifier, not even an explicit nil
func (o *IEdmVocabularyAnnotation) UnsetQualifier() {
	o.Qualifier.Unset()
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *IEdmVocabularyAnnotation) GetTerm() IEdmTerm {
	if o == nil || IsNil(o.Term) {
		var ret IEdmTerm
		return ret
	}
	return *o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEdmVocabularyAnnotation) GetTermOk() (*IEdmTerm, bool) {
	if o == nil || IsNil(o.Term) {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *IEdmVocabularyAnnotation) HasTerm() bool {
	if o != nil && !IsNil(o.Term) {
		return true
	}

	return false
}

// SetTerm gets a reference to the given IEdmTerm and assigns it to the Term field.
func (o *IEdmVocabularyAnnotation) SetTerm(v IEdmTerm) {
	o.Term = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *IEdmVocabularyAnnotation) GetTarget() map[string]interface{} {
	if o == nil || IsNil(o.Target) {
		var ret map[string]interface{}
		return ret
	}
	return o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEdmVocabularyAnnotation) GetTargetOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Target) {
		return map[string]interface{}{}, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *IEdmVocabularyAnnotation) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given map[string]interface{} and assigns it to the Target field.
func (o *IEdmVocabularyAnnotation) SetTarget(v map[string]interface{}) {
	o.Target = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IEdmVocabularyAnnotation) GetValue() IEdmExpression {
	if o == nil || IsNil(o.Value) {
		var ret IEdmExpression
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEdmVocabularyAnnotation) GetValueOk() (*IEdmExpression, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IEdmVocabularyAnnotation) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given IEdmExpression and assigns it to the Value field.
func (o *IEdmVocabularyAnnotation) SetValue(v IEdmExpression) {
	o.Value = &v
}

func (o IEdmVocabularyAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IEdmVocabularyAnnotation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Qualifier.IsSet() {
		toSerialize["qualifier"] = o.Qualifier.Get()
	}
	if !IsNil(o.Term) {
		toSerialize["term"] = o.Term
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableIEdmVocabularyAnnotation struct {
	value *IEdmVocabularyAnnotation
	isSet bool
}

func (v NullableIEdmVocabularyAnnotation) Get() *IEdmVocabularyAnnotation {
	return v.value
}

func (v *NullableIEdmVocabularyAnnotation) Set(val *IEdmVocabularyAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableIEdmVocabularyAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableIEdmVocabularyAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIEdmVocabularyAnnotation(val *IEdmVocabularyAnnotation) *NullableIEdmVocabularyAnnotation {
	return &NullableIEdmVocabularyAnnotation{value: val, isSet: true}
}

func (v NullableIEdmVocabularyAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIEdmVocabularyAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
