/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HttpContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpContext{}

// HttpContext struct for HttpContext
type HttpContext struct {
	Features        []TypeObjectKeyValuePair `json:"features,omitempty"`
	Request         *HttpRequest             `json:"request,omitempty"`
	Response        *HttpResponse            `json:"response,omitempty"`
	Connection      *ConnectionInfo          `json:"connection,omitempty"`
	WebSockets      *WebSocketManager        `json:"webSockets,omitempty"`
	User            *ClaimsPrincipal         `json:"user,omitempty"`
	Items           map[string]interface{}   `json:"items,omitempty"`
	RequestServices map[string]interface{}   `json:"requestServices,omitempty"`
	RequestAborted  *CancellationToken       `json:"requestAborted,omitempty"`
	TraceIdentifier NullableString           `json:"traceIdentifier,omitempty"`
	Session         *ISession                `json:"session,omitempty"`
}

// NewHttpContext instantiates a new HttpContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpContext() *HttpContext {
	this := HttpContext{}
	return &this
}

// NewHttpContextWithDefaults instantiates a new HttpContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpContextWithDefaults() *HttpContext {
	this := HttpContext{}
	return &this
}

// GetFeatures returns the Features field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HttpContext) GetFeatures() []TypeObjectKeyValuePair {
	if o == nil {
		var ret []TypeObjectKeyValuePair
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HttpContext) GetFeaturesOk() ([]TypeObjectKeyValuePair, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *HttpContext) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []TypeObjectKeyValuePair and assigns it to the Features field.
func (o *HttpContext) SetFeatures(v []TypeObjectKeyValuePair) {
	o.Features = v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *HttpContext) GetRequest() HttpRequest {
	if o == nil || IsNil(o.Request) {
		var ret HttpRequest
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpContext) GetRequestOk() (*HttpRequest, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *HttpContext) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given HttpRequest and assigns it to the Request field.
func (o *HttpContext) SetRequest(v HttpRequest) {
	o.Request = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *HttpContext) GetResponse() HttpResponse {
	if o == nil || IsNil(o.Response) {
		var ret HttpResponse
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpContext) GetResponseOk() (*HttpResponse, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *HttpContext) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given HttpResponse and assigns it to the Response field.
func (o *HttpContext) SetResponse(v HttpResponse) {
	o.Response = &v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *HttpContext) GetConnection() ConnectionInfo {
	if o == nil || IsNil(o.Connection) {
		var ret ConnectionInfo
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpContext) GetConnectionOk() (*ConnectionInfo, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *HttpContext) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given ConnectionInfo and assigns it to the Connection field.
func (o *HttpContext) SetConnection(v ConnectionInfo) {
	o.Connection = &v
}

// GetWebSockets returns the WebSockets field value if set, zero value otherwise.
func (o *HttpContext) GetWebSockets() WebSocketManager {
	if o == nil || IsNil(o.WebSockets) {
		var ret WebSocketManager
		return ret
	}
	return *o.WebSockets
}

// GetWebSocketsOk returns a tuple with the WebSockets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpContext) GetWebSocketsOk() (*WebSocketManager, bool) {
	if o == nil || IsNil(o.WebSockets) {
		return nil, false
	}
	return o.WebSockets, true
}

// HasWebSockets returns a boolean if a field has been set.
func (o *HttpContext) HasWebSockets() bool {
	if o != nil && !IsNil(o.WebSockets) {
		return true
	}

	return false
}

// SetWebSockets gets a reference to the given WebSocketManager and assigns it to the WebSockets field.
func (o *HttpContext) SetWebSockets(v WebSocketManager) {
	o.WebSockets = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *HttpContext) GetUser() ClaimsPrincipal {
	if o == nil || IsNil(o.User) {
		var ret ClaimsPrincipal
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpContext) GetUserOk() (*ClaimsPrincipal, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *HttpContext) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given ClaimsPrincipal and assigns it to the User field.
func (o *HttpContext) SetUser(v ClaimsPrincipal) {
	o.User = &v
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HttpContext) GetItems() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HttpContext) GetItemsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Items) {
		return map[string]interface{}{}, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *HttpContext) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given map[string]interface{} and assigns it to the Items field.
func (o *HttpContext) SetItems(v map[string]interface{}) {
	o.Items = v
}

// GetRequestServices returns the RequestServices field value if set, zero value otherwise.
func (o *HttpContext) GetRequestServices() map[string]interface{} {
	if o == nil || IsNil(o.RequestServices) {
		var ret map[string]interface{}
		return ret
	}
	return o.RequestServices
}

// GetRequestServicesOk returns a tuple with the RequestServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpContext) GetRequestServicesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RequestServices) {
		return map[string]interface{}{}, false
	}
	return o.RequestServices, true
}

// HasRequestServices returns a boolean if a field has been set.
func (o *HttpContext) HasRequestServices() bool {
	if o != nil && !IsNil(o.RequestServices) {
		return true
	}

	return false
}

// SetRequestServices gets a reference to the given map[string]interface{} and assigns it to the RequestServices field.
func (o *HttpContext) SetRequestServices(v map[string]interface{}) {
	o.RequestServices = v
}

// GetRequestAborted returns the RequestAborted field value if set, zero value otherwise.
func (o *HttpContext) GetRequestAborted() CancellationToken {
	if o == nil || IsNil(o.RequestAborted) {
		var ret CancellationToken
		return ret
	}
	return *o.RequestAborted
}

// GetRequestAbortedOk returns a tuple with the RequestAborted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpContext) GetRequestAbortedOk() (*CancellationToken, bool) {
	if o == nil || IsNil(o.RequestAborted) {
		return nil, false
	}
	return o.RequestAborted, true
}

// HasRequestAborted returns a boolean if a field has been set.
func (o *HttpContext) HasRequestAborted() bool {
	if o != nil && !IsNil(o.RequestAborted) {
		return true
	}

	return false
}

// SetRequestAborted gets a reference to the given CancellationToken and assigns it to the RequestAborted field.
func (o *HttpContext) SetRequestAborted(v CancellationToken) {
	o.RequestAborted = &v
}

// GetTraceIdentifier returns the TraceIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HttpContext) GetTraceIdentifier() string {
	if o == nil || IsNil(o.TraceIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.TraceIdentifier.Get()
}

// GetTraceIdentifierOk returns a tuple with the TraceIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HttpContext) GetTraceIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TraceIdentifier.Get(), o.TraceIdentifier.IsSet()
}

// HasTraceIdentifier returns a boolean if a field has been set.
func (o *HttpContext) HasTraceIdentifier() bool {
	if o != nil && o.TraceIdentifier.IsSet() {
		return true
	}

	return false
}

// SetTraceIdentifier gets a reference to the given NullableString and assigns it to the TraceIdentifier field.
func (o *HttpContext) SetTraceIdentifier(v string) {
	o.TraceIdentifier.Set(&v)
}

// SetTraceIdentifierNil sets the value for TraceIdentifier to be an explicit nil
func (o *HttpContext) SetTraceIdentifierNil() {
	o.TraceIdentifier.Set(nil)
}

// UnsetTraceIdentifier ensures that no value is present for TraceIdentifier, not even an explicit nil
func (o *HttpContext) UnsetTraceIdentifier() {
	o.TraceIdentifier.Unset()
}

// GetSession returns the Session field value if set, zero value otherwise.
func (o *HttpContext) GetSession() ISession {
	if o == nil || IsNil(o.Session) {
		var ret ISession
		return ret
	}
	return *o.Session
}

// GetSessionOk returns a tuple with the Session field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpContext) GetSessionOk() (*ISession, bool) {
	if o == nil || IsNil(o.Session) {
		return nil, false
	}
	return o.Session, true
}

// HasSession returns a boolean if a field has been set.
func (o *HttpContext) HasSession() bool {
	if o != nil && !IsNil(o.Session) {
		return true
	}

	return false
}

// SetSession gets a reference to the given ISession and assigns it to the Session field.
func (o *HttpContext) SetSession(v ISession) {
	o.Session = &v
}

func (o HttpContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Features != nil {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !IsNil(o.WebSockets) {
		toSerialize["webSockets"] = o.WebSockets
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.RequestServices) {
		toSerialize["requestServices"] = o.RequestServices
	}
	if !IsNil(o.RequestAborted) {
		toSerialize["requestAborted"] = o.RequestAborted
	}
	if o.TraceIdentifier.IsSet() {
		toSerialize["traceIdentifier"] = o.TraceIdentifier.Get()
	}
	if !IsNil(o.Session) {
		toSerialize["session"] = o.Session
	}
	return toSerialize, nil
}

type NullableHttpContext struct {
	value *HttpContext
	isSet bool
}

func (v NullableHttpContext) Get() *HttpContext {
	return v.value
}

func (v *NullableHttpContext) Set(val *HttpContext) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpContext) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpContext(val *HttpContext) *NullableHttpContext {
	return &NullableHttpContext{value: val, isSet: true}
}

func (v NullableHttpContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
