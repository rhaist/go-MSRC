/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PathString type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PathString{}

// PathString struct for PathString
type PathString struct {
	Value    NullableString `json:"value,omitempty"`
	HasValue *bool          `json:"hasValue,omitempty"`
}

// NewPathString instantiates a new PathString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPathString() *PathString {
	this := PathString{}
	return &this
}

// NewPathStringWithDefaults instantiates a new PathString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPathStringWithDefaults() *PathString {
	this := PathString{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PathString) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PathString) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *PathString) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *PathString) SetValue(v string) {
	o.Value.Set(&v)
}

// SetValueNil sets the value for Value to be an explicit nil
func (o *PathString) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *PathString) UnsetValue() {
	o.Value.Unset()
}

// GetHasValue returns the HasValue field value if set, zero value otherwise.
func (o *PathString) GetHasValue() bool {
	if o == nil || IsNil(o.HasValue) {
		var ret bool
		return ret
	}
	return *o.HasValue
}

// GetHasValueOk returns a tuple with the HasValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathString) GetHasValueOk() (*bool, bool) {
	if o == nil || IsNil(o.HasValue) {
		return nil, false
	}
	return o.HasValue, true
}

// HasHasValue returns a boolean if a field has been set.
func (o *PathString) HasHasValue() bool {
	if o != nil && !IsNil(o.HasValue) {
		return true
	}

	return false
}

// SetHasValue gets a reference to the given bool and assigns it to the HasValue field.
func (o *PathString) SetHasValue(v bool) {
	o.HasValue = &v
}

func (o PathString) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PathString) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if !IsNil(o.HasValue) {
		toSerialize["hasValue"] = o.HasValue
	}
	return toSerialize, nil
}

type NullablePathString struct {
	value *PathString
	isSet bool
}

func (v NullablePathString) Get() *PathString {
	return v.value
}

func (v *NullablePathString) Set(val *PathString) {
	v.value = val
	v.isSet = true
}

func (v NullablePathString) IsSet() bool {
	return v.isSet
}

func (v *NullablePathString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePathString(val *PathString) *NullablePathString {
	return &NullablePathString{value: val, isSet: true}
}

func (v NullablePathString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePathString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
