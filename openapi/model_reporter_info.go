/*
 * MSRC Public API
 *
 * This RESTful API can be used to engage the Microsoft Security Response Center (MSRC) in the following ways:    - Get security update summaries and details using the [Common Vulnerability Reporting Framework](https://www.icasi.org/cvrf) (CVRF).    - Report suspected cyberattacks or abuse originating from Microsoft Online Services.    - Notify Microsoft of any planned penetration tests against your Azure assets.    **Sample client code** is available on the Microsoft Security [Updates](https://github.com/microsoft/MSRC-Microsoft-Security-Updates-API) and [Engage](https://github.com/Microsoft/MSRC-Microsoft-Engage-API)   Github repositories.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReporterInfo information about the reporter
type ReporterInfo struct {
	// reporter email address, may be used for further correspondence
	ReporterEmail string `json:"reporterEmail"`
	// reporter name
	ReporterName string `json:"reporterName"`
	// reporter phone number
	ReporterPhone *string `json:"reporterPhone,omitempty"`
	// reporter organization
	ReporterOrg *string `json:"reporterOrg,omitempty"`
	// allow response organization to share reporter email with an external incident resolver as appropriate?
	DiscloseEmail string `json:"discloseEmail"`
	// any other relevant information about the reporter or reporter organization
	ReporterNotes string `json:"reporterNotes"`
}

// NewReporterInfo instantiates a new ReporterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReporterInfo(reporterEmail string, reporterName string, discloseEmail string, reporterNotes string) *ReporterInfo {
	this := ReporterInfo{}
	this.ReporterEmail = reporterEmail
	this.ReporterName = reporterName
	this.DiscloseEmail = discloseEmail
	this.ReporterNotes = reporterNotes
	return &this
}

// NewReporterInfoWithDefaults instantiates a new ReporterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReporterInfoWithDefaults() *ReporterInfo {
	this := ReporterInfo{}
	return &this
}

// GetReporterEmail returns the ReporterEmail field value
func (o *ReporterInfo) GetReporterEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReporterEmail
}

// GetReporterEmailOk returns a tuple with the ReporterEmail field value
// and a boolean to check if the value has been set.
func (o *ReporterInfo) GetReporterEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReporterEmail, true
}

// SetReporterEmail sets field value
func (o *ReporterInfo) SetReporterEmail(v string) {
	o.ReporterEmail = v
}

// GetReporterName returns the ReporterName field value
func (o *ReporterInfo) GetReporterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReporterName
}

// GetReporterNameOk returns a tuple with the ReporterName field value
// and a boolean to check if the value has been set.
func (o *ReporterInfo) GetReporterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReporterName, true
}

// SetReporterName sets field value
func (o *ReporterInfo) SetReporterName(v string) {
	o.ReporterName = v
}

// GetReporterPhone returns the ReporterPhone field value if set, zero value otherwise.
func (o *ReporterInfo) GetReporterPhone() string {
	if o == nil || o.ReporterPhone == nil {
		var ret string
		return ret
	}
	return *o.ReporterPhone
}

// GetReporterPhoneOk returns a tuple with the ReporterPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReporterInfo) GetReporterPhoneOk() (*string, bool) {
	if o == nil || o.ReporterPhone == nil {
		return nil, false
	}
	return o.ReporterPhone, true
}

// HasReporterPhone returns a boolean if a field has been set.
func (o *ReporterInfo) HasReporterPhone() bool {
	if o != nil && o.ReporterPhone != nil {
		return true
	}

	return false
}

// SetReporterPhone gets a reference to the given string and assigns it to the ReporterPhone field.
func (o *ReporterInfo) SetReporterPhone(v string) {
	o.ReporterPhone = &v
}

// GetReporterOrg returns the ReporterOrg field value if set, zero value otherwise.
func (o *ReporterInfo) GetReporterOrg() string {
	if o == nil || o.ReporterOrg == nil {
		var ret string
		return ret
	}
	return *o.ReporterOrg
}

// GetReporterOrgOk returns a tuple with the ReporterOrg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReporterInfo) GetReporterOrgOk() (*string, bool) {
	if o == nil || o.ReporterOrg == nil {
		return nil, false
	}
	return o.ReporterOrg, true
}

// HasReporterOrg returns a boolean if a field has been set.
func (o *ReporterInfo) HasReporterOrg() bool {
	if o != nil && o.ReporterOrg != nil {
		return true
	}

	return false
}

// SetReporterOrg gets a reference to the given string and assigns it to the ReporterOrg field.
func (o *ReporterInfo) SetReporterOrg(v string) {
	o.ReporterOrg = &v
}

// GetDiscloseEmail returns the DiscloseEmail field value
func (o *ReporterInfo) GetDiscloseEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiscloseEmail
}

// GetDiscloseEmailOk returns a tuple with the DiscloseEmail field value
// and a boolean to check if the value has been set.
func (o *ReporterInfo) GetDiscloseEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscloseEmail, true
}

// SetDiscloseEmail sets field value
func (o *ReporterInfo) SetDiscloseEmail(v string) {
	o.DiscloseEmail = v
}

// GetReporterNotes returns the ReporterNotes field value
func (o *ReporterInfo) GetReporterNotes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReporterNotes
}

// GetReporterNotesOk returns a tuple with the ReporterNotes field value
// and a boolean to check if the value has been set.
func (o *ReporterInfo) GetReporterNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReporterNotes, true
}

// SetReporterNotes sets field value
func (o *ReporterInfo) SetReporterNotes(v string) {
	o.ReporterNotes = v
}

func (o ReporterInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reporterEmail"] = o.ReporterEmail
	}
	if true {
		toSerialize["reporterName"] = o.ReporterName
	}
	if o.ReporterPhone != nil {
		toSerialize["reporterPhone"] = o.ReporterPhone
	}
	if o.ReporterOrg != nil {
		toSerialize["reporterOrg"] = o.ReporterOrg
	}
	if true {
		toSerialize["discloseEmail"] = o.DiscloseEmail
	}
	if true {
		toSerialize["reporterNotes"] = o.ReporterNotes
	}
	return json.Marshal(toSerialize)
}

type NullableReporterInfo struct {
	value *ReporterInfo
	isSet bool
}

func (v NullableReporterInfo) Get() *ReporterInfo {
	return v.value
}

func (v *NullableReporterInfo) Set(val *ReporterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReporterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReporterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReporterInfo(val *ReporterInfo) *NullableReporterInfo {
	return &NullableReporterInfo{value: val, isSet: true}
}

func (v NullableReporterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReporterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
