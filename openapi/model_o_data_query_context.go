/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ODataQueryContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ODataQueryContext{}

// ODataQueryContext struct for ODataQueryContext
type ODataQueryContext struct {
	DefaultQueryConfigurations *DefaultQueryConfigurations `json:"defaultQueryConfigurations,omitempty"`
	Model                      *IEdmModel                  `json:"model,omitempty"`
	ElementType                *IEdmType                   `json:"elementType,omitempty"`
	NavigationSource           *IEdmNavigationSource       `json:"navigationSource,omitempty"`
	ElementClrType             *Type                       `json:"elementClrType,omitempty"`
	Path                       []ODataPathSegment          `json:"path,omitempty"`
	RequestContainer           map[string]interface{}      `json:"requestContainer,omitempty"`
}

// NewODataQueryContext instantiates a new ODataQueryContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewODataQueryContext() *ODataQueryContext {
	this := ODataQueryContext{}
	return &this
}

// NewODataQueryContextWithDefaults instantiates a new ODataQueryContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewODataQueryContextWithDefaults() *ODataQueryContext {
	this := ODataQueryContext{}
	return &this
}

// GetDefaultQueryConfigurations returns the DefaultQueryConfigurations field value if set, zero value otherwise.
func (o *ODataQueryContext) GetDefaultQueryConfigurations() DefaultQueryConfigurations {
	if o == nil || IsNil(o.DefaultQueryConfigurations) {
		var ret DefaultQueryConfigurations
		return ret
	}
	return *o.DefaultQueryConfigurations
}

// GetDefaultQueryConfigurationsOk returns a tuple with the DefaultQueryConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ODataQueryContext) GetDefaultQueryConfigurationsOk() (*DefaultQueryConfigurations, bool) {
	if o == nil || IsNil(o.DefaultQueryConfigurations) {
		return nil, false
	}
	return o.DefaultQueryConfigurations, true
}

// HasDefaultQueryConfigurations returns a boolean if a field has been set.
func (o *ODataQueryContext) HasDefaultQueryConfigurations() bool {
	if o != nil && !IsNil(o.DefaultQueryConfigurations) {
		return true
	}

	return false
}

// SetDefaultQueryConfigurations gets a reference to the given DefaultQueryConfigurations and assigns it to the DefaultQueryConfigurations field.
func (o *ODataQueryContext) SetDefaultQueryConfigurations(v DefaultQueryConfigurations) {
	o.DefaultQueryConfigurations = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ODataQueryContext) GetModel() IEdmModel {
	if o == nil || IsNil(o.Model) {
		var ret IEdmModel
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ODataQueryContext) GetModelOk() (*IEdmModel, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ODataQueryContext) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given IEdmModel and assigns it to the Model field.
func (o *ODataQueryContext) SetModel(v IEdmModel) {
	o.Model = &v
}

// GetElementType returns the ElementType field value if set, zero value otherwise.
func (o *ODataQueryContext) GetElementType() IEdmType {
	if o == nil || IsNil(o.ElementType) {
		var ret IEdmType
		return ret
	}
	return *o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ODataQueryContext) GetElementTypeOk() (*IEdmType, bool) {
	if o == nil || IsNil(o.ElementType) {
		return nil, false
	}
	return o.ElementType, true
}

// HasElementType returns a boolean if a field has been set.
func (o *ODataQueryContext) HasElementType() bool {
	if o != nil && !IsNil(o.ElementType) {
		return true
	}

	return false
}

// SetElementType gets a reference to the given IEdmType and assigns it to the ElementType field.
func (o *ODataQueryContext) SetElementType(v IEdmType) {
	o.ElementType = &v
}

// GetNavigationSource returns the NavigationSource field value if set, zero value otherwise.
func (o *ODataQueryContext) GetNavigationSource() IEdmNavigationSource {
	if o == nil || IsNil(o.NavigationSource) {
		var ret IEdmNavigationSource
		return ret
	}
	return *o.NavigationSource
}

// GetNavigationSourceOk returns a tuple with the NavigationSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ODataQueryContext) GetNavigationSourceOk() (*IEdmNavigationSource, bool) {
	if o == nil || IsNil(o.NavigationSource) {
		return nil, false
	}
	return o.NavigationSource, true
}

// HasNavigationSource returns a boolean if a field has been set.
func (o *ODataQueryContext) HasNavigationSource() bool {
	if o != nil && !IsNil(o.NavigationSource) {
		return true
	}

	return false
}

// SetNavigationSource gets a reference to the given IEdmNavigationSource and assigns it to the NavigationSource field.
func (o *ODataQueryContext) SetNavigationSource(v IEdmNavigationSource) {
	o.NavigationSource = &v
}

// GetElementClrType returns the ElementClrType field value if set, zero value otherwise.
func (o *ODataQueryContext) GetElementClrType() Type {
	if o == nil || IsNil(o.ElementClrType) {
		var ret Type
		return ret
	}
	return *o.ElementClrType
}

// GetElementClrTypeOk returns a tuple with the ElementClrType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ODataQueryContext) GetElementClrTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.ElementClrType) {
		return nil, false
	}
	return o.ElementClrType, true
}

// HasElementClrType returns a boolean if a field has been set.
func (o *ODataQueryContext) HasElementClrType() bool {
	if o != nil && !IsNil(o.ElementClrType) {
		return true
	}

	return false
}

// SetElementClrType gets a reference to the given Type and assigns it to the ElementClrType field.
func (o *ODataQueryContext) SetElementClrType(v Type) {
	o.ElementClrType = &v
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ODataQueryContext) GetPath() []ODataPathSegment {
	if o == nil {
		var ret []ODataPathSegment
		return ret
	}
	return o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ODataQueryContext) GetPathOk() ([]ODataPathSegment, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ODataQueryContext) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given []ODataPathSegment and assigns it to the Path field.
func (o *ODataQueryContext) SetPath(v []ODataPathSegment) {
	o.Path = v
}

// GetRequestContainer returns the RequestContainer field value if set, zero value otherwise.
func (o *ODataQueryContext) GetRequestContainer() map[string]interface{} {
	if o == nil || IsNil(o.RequestContainer) {
		var ret map[string]interface{}
		return ret
	}
	return o.RequestContainer
}

// GetRequestContainerOk returns a tuple with the RequestContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ODataQueryContext) GetRequestContainerOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RequestContainer) {
		return map[string]interface{}{}, false
	}
	return o.RequestContainer, true
}

// HasRequestContainer returns a boolean if a field has been set.
func (o *ODataQueryContext) HasRequestContainer() bool {
	if o != nil && !IsNil(o.RequestContainer) {
		return true
	}

	return false
}

// SetRequestContainer gets a reference to the given map[string]interface{} and assigns it to the RequestContainer field.
func (o *ODataQueryContext) SetRequestContainer(v map[string]interface{}) {
	o.RequestContainer = v
}

func (o ODataQueryContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ODataQueryContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultQueryConfigurations) {
		toSerialize["defaultQueryConfigurations"] = o.DefaultQueryConfigurations
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.ElementType) {
		toSerialize["elementType"] = o.ElementType
	}
	if !IsNil(o.NavigationSource) {
		toSerialize["navigationSource"] = o.NavigationSource
	}
	if !IsNil(o.ElementClrType) {
		toSerialize["elementClrType"] = o.ElementClrType
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.RequestContainer) {
		toSerialize["requestContainer"] = o.RequestContainer
	}
	return toSerialize, nil
}

type NullableODataQueryContext struct {
	value *ODataQueryContext
	isSet bool
}

func (v NullableODataQueryContext) Get() *ODataQueryContext {
	return v.value
}

func (v *NullableODataQueryContext) Set(val *ODataQueryContext) {
	v.value = val
	v.isSet = true
}

func (v NullableODataQueryContext) IsSet() bool {
	return v.isSet
}

func (v *NullableODataQueryContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableODataQueryContext(val *ODataQueryContext) *NullableODataQueryContext {
	return &NullableODataQueryContext{value: val, isSet: true}
}

func (v NullableODataQueryContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableODataQueryContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
