/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IPAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPAddress{}

// IPAddress struct for IPAddress
type IPAddress struct {
	AddressFamily      *AddressFamily `json:"addressFamily,omitempty"`
	ScopeId            *int64         `json:"scopeId,omitempty"`
	IsIPv6Multicast    *bool          `json:"isIPv6Multicast,omitempty"`
	IsIPv6LinkLocal    *bool          `json:"isIPv6LinkLocal,omitempty"`
	IsIPv6SiteLocal    *bool          `json:"isIPv6SiteLocal,omitempty"`
	IsIPv6Teredo       *bool          `json:"isIPv6Teredo,omitempty"`
	IsIPv6UniqueLocal  *bool          `json:"isIPv6UniqueLocal,omitempty"`
	IsIPv4MappedToIPv6 *bool          `json:"isIPv4MappedToIPv6,omitempty"`
	// Deprecated
	Address *int64 `json:"address,omitempty"`
}

// NewIPAddress instantiates a new IPAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPAddress() *IPAddress {
	this := IPAddress{}
	return &this
}

// NewIPAddressWithDefaults instantiates a new IPAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPAddressWithDefaults() *IPAddress {
	this := IPAddress{}
	return &this
}

// GetAddressFamily returns the AddressFamily field value if set, zero value otherwise.
func (o *IPAddress) GetAddressFamily() AddressFamily {
	if o == nil || IsNil(o.AddressFamily) {
		var ret AddressFamily
		return ret
	}
	return *o.AddressFamily
}

// GetAddressFamilyOk returns a tuple with the AddressFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetAddressFamilyOk() (*AddressFamily, bool) {
	if o == nil || IsNil(o.AddressFamily) {
		return nil, false
	}
	return o.AddressFamily, true
}

// HasAddressFamily returns a boolean if a field has been set.
func (o *IPAddress) HasAddressFamily() bool {
	if o != nil && !IsNil(o.AddressFamily) {
		return true
	}

	return false
}

// SetAddressFamily gets a reference to the given AddressFamily and assigns it to the AddressFamily field.
func (o *IPAddress) SetAddressFamily(v AddressFamily) {
	o.AddressFamily = &v
}

// GetScopeId returns the ScopeId field value if set, zero value otherwise.
func (o *IPAddress) GetScopeId() int64 {
	if o == nil || IsNil(o.ScopeId) {
		var ret int64
		return ret
	}
	return *o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetScopeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ScopeId) {
		return nil, false
	}
	return o.ScopeId, true
}

// HasScopeId returns a boolean if a field has been set.
func (o *IPAddress) HasScopeId() bool {
	if o != nil && !IsNil(o.ScopeId) {
		return true
	}

	return false
}

// SetScopeId gets a reference to the given int64 and assigns it to the ScopeId field.
func (o *IPAddress) SetScopeId(v int64) {
	o.ScopeId = &v
}

// GetIsIPv6Multicast returns the IsIPv6Multicast field value if set, zero value otherwise.
func (o *IPAddress) GetIsIPv6Multicast() bool {
	if o == nil || IsNil(o.IsIPv6Multicast) {
		var ret bool
		return ret
	}
	return *o.IsIPv6Multicast
}

// GetIsIPv6MulticastOk returns a tuple with the IsIPv6Multicast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetIsIPv6MulticastOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIPv6Multicast) {
		return nil, false
	}
	return o.IsIPv6Multicast, true
}

// HasIsIPv6Multicast returns a boolean if a field has been set.
func (o *IPAddress) HasIsIPv6Multicast() bool {
	if o != nil && !IsNil(o.IsIPv6Multicast) {
		return true
	}

	return false
}

// SetIsIPv6Multicast gets a reference to the given bool and assigns it to the IsIPv6Multicast field.
func (o *IPAddress) SetIsIPv6Multicast(v bool) {
	o.IsIPv6Multicast = &v
}

// GetIsIPv6LinkLocal returns the IsIPv6LinkLocal field value if set, zero value otherwise.
func (o *IPAddress) GetIsIPv6LinkLocal() bool {
	if o == nil || IsNil(o.IsIPv6LinkLocal) {
		var ret bool
		return ret
	}
	return *o.IsIPv6LinkLocal
}

// GetIsIPv6LinkLocalOk returns a tuple with the IsIPv6LinkLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetIsIPv6LinkLocalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIPv6LinkLocal) {
		return nil, false
	}
	return o.IsIPv6LinkLocal, true
}

// HasIsIPv6LinkLocal returns a boolean if a field has been set.
func (o *IPAddress) HasIsIPv6LinkLocal() bool {
	if o != nil && !IsNil(o.IsIPv6LinkLocal) {
		return true
	}

	return false
}

// SetIsIPv6LinkLocal gets a reference to the given bool and assigns it to the IsIPv6LinkLocal field.
func (o *IPAddress) SetIsIPv6LinkLocal(v bool) {
	o.IsIPv6LinkLocal = &v
}

// GetIsIPv6SiteLocal returns the IsIPv6SiteLocal field value if set, zero value otherwise.
func (o *IPAddress) GetIsIPv6SiteLocal() bool {
	if o == nil || IsNil(o.IsIPv6SiteLocal) {
		var ret bool
		return ret
	}
	return *o.IsIPv6SiteLocal
}

// GetIsIPv6SiteLocalOk returns a tuple with the IsIPv6SiteLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetIsIPv6SiteLocalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIPv6SiteLocal) {
		return nil, false
	}
	return o.IsIPv6SiteLocal, true
}

// HasIsIPv6SiteLocal returns a boolean if a field has been set.
func (o *IPAddress) HasIsIPv6SiteLocal() bool {
	if o != nil && !IsNil(o.IsIPv6SiteLocal) {
		return true
	}

	return false
}

// SetIsIPv6SiteLocal gets a reference to the given bool and assigns it to the IsIPv6SiteLocal field.
func (o *IPAddress) SetIsIPv6SiteLocal(v bool) {
	o.IsIPv6SiteLocal = &v
}

// GetIsIPv6Teredo returns the IsIPv6Teredo field value if set, zero value otherwise.
func (o *IPAddress) GetIsIPv6Teredo() bool {
	if o == nil || IsNil(o.IsIPv6Teredo) {
		var ret bool
		return ret
	}
	return *o.IsIPv6Teredo
}

// GetIsIPv6TeredoOk returns a tuple with the IsIPv6Teredo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetIsIPv6TeredoOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIPv6Teredo) {
		return nil, false
	}
	return o.IsIPv6Teredo, true
}

// HasIsIPv6Teredo returns a boolean if a field has been set.
func (o *IPAddress) HasIsIPv6Teredo() bool {
	if o != nil && !IsNil(o.IsIPv6Teredo) {
		return true
	}

	return false
}

// SetIsIPv6Teredo gets a reference to the given bool and assigns it to the IsIPv6Teredo field.
func (o *IPAddress) SetIsIPv6Teredo(v bool) {
	o.IsIPv6Teredo = &v
}

// GetIsIPv6UniqueLocal returns the IsIPv6UniqueLocal field value if set, zero value otherwise.
func (o *IPAddress) GetIsIPv6UniqueLocal() bool {
	if o == nil || IsNil(o.IsIPv6UniqueLocal) {
		var ret bool
		return ret
	}
	return *o.IsIPv6UniqueLocal
}

// GetIsIPv6UniqueLocalOk returns a tuple with the IsIPv6UniqueLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetIsIPv6UniqueLocalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIPv6UniqueLocal) {
		return nil, false
	}
	return o.IsIPv6UniqueLocal, true
}

// HasIsIPv6UniqueLocal returns a boolean if a field has been set.
func (o *IPAddress) HasIsIPv6UniqueLocal() bool {
	if o != nil && !IsNil(o.IsIPv6UniqueLocal) {
		return true
	}

	return false
}

// SetIsIPv6UniqueLocal gets a reference to the given bool and assigns it to the IsIPv6UniqueLocal field.
func (o *IPAddress) SetIsIPv6UniqueLocal(v bool) {
	o.IsIPv6UniqueLocal = &v
}

// GetIsIPv4MappedToIPv6 returns the IsIPv4MappedToIPv6 field value if set, zero value otherwise.
func (o *IPAddress) GetIsIPv4MappedToIPv6() bool {
	if o == nil || IsNil(o.IsIPv4MappedToIPv6) {
		var ret bool
		return ret
	}
	return *o.IsIPv4MappedToIPv6
}

// GetIsIPv4MappedToIPv6Ok returns a tuple with the IsIPv4MappedToIPv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPAddress) GetIsIPv4MappedToIPv6Ok() (*bool, bool) {
	if o == nil || IsNil(o.IsIPv4MappedToIPv6) {
		return nil, false
	}
	return o.IsIPv4MappedToIPv6, true
}

// HasIsIPv4MappedToIPv6 returns a boolean if a field has been set.
func (o *IPAddress) HasIsIPv4MappedToIPv6() bool {
	if o != nil && !IsNil(o.IsIPv4MappedToIPv6) {
		return true
	}

	return false
}

// SetIsIPv4MappedToIPv6 gets a reference to the given bool and assigns it to the IsIPv4MappedToIPv6 field.
func (o *IPAddress) SetIsIPv4MappedToIPv6(v bool) {
	o.IsIPv4MappedToIPv6 = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
// Deprecated
func (o *IPAddress) GetAddress() int64 {
	if o == nil || IsNil(o.Address) {
		var ret int64
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *IPAddress) GetAddressOk() (*int64, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *IPAddress) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given int64 and assigns it to the Address field.
// Deprecated
func (o *IPAddress) SetAddress(v int64) {
	o.Address = &v
}

func (o IPAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressFamily) {
		toSerialize["addressFamily"] = o.AddressFamily
	}
	if !IsNil(o.ScopeId) {
		toSerialize["scopeId"] = o.ScopeId
	}
	if !IsNil(o.IsIPv6Multicast) {
		toSerialize["isIPv6Multicast"] = o.IsIPv6Multicast
	}
	if !IsNil(o.IsIPv6LinkLocal) {
		toSerialize["isIPv6LinkLocal"] = o.IsIPv6LinkLocal
	}
	if !IsNil(o.IsIPv6SiteLocal) {
		toSerialize["isIPv6SiteLocal"] = o.IsIPv6SiteLocal
	}
	if !IsNil(o.IsIPv6Teredo) {
		toSerialize["isIPv6Teredo"] = o.IsIPv6Teredo
	}
	if !IsNil(o.IsIPv6UniqueLocal) {
		toSerialize["isIPv6UniqueLocal"] = o.IsIPv6UniqueLocal
	}
	if !IsNil(o.IsIPv4MappedToIPv6) {
		toSerialize["isIPv4MappedToIPv6"] = o.IsIPv4MappedToIPv6
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	return toSerialize, nil
}

type NullableIPAddress struct {
	value *IPAddress
	isSet bool
}

func (v NullableIPAddress) Get() *IPAddress {
	return v.value
}

func (v *NullableIPAddress) Set(val *IPAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableIPAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableIPAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPAddress(val *IPAddress) *NullableIPAddress {
	return &NullableIPAddress{value: val, isSet: true}
}

func (v NullableIPAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
