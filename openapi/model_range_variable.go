/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RangeVariable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangeVariable{}

// RangeVariable struct for RangeVariable
type RangeVariable struct {
	Name          NullableString     `json:"name,omitempty"`
	TypeReference *IEdmTypeReference `json:"typeReference,omitempty"`
	Kind          *int32             `json:"kind,omitempty"`
}

// NewRangeVariable instantiates a new RangeVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeVariable() *RangeVariable {
	this := RangeVariable{}
	return &this
}

// NewRangeVariableWithDefaults instantiates a new RangeVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeVariableWithDefaults() *RangeVariable {
	this := RangeVariable{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RangeVariable) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RangeVariable) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RangeVariable) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RangeVariable) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *RangeVariable) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RangeVariable) UnsetName() {
	o.Name.Unset()
}

// GetTypeReference returns the TypeReference field value if set, zero value otherwise.
func (o *RangeVariable) GetTypeReference() IEdmTypeReference {
	if o == nil || IsNil(o.TypeReference) {
		var ret IEdmTypeReference
		return ret
	}
	return *o.TypeReference
}

// GetTypeReferenceOk returns a tuple with the TypeReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeVariable) GetTypeReferenceOk() (*IEdmTypeReference, bool) {
	if o == nil || IsNil(o.TypeReference) {
		return nil, false
	}
	return o.TypeReference, true
}

// HasTypeReference returns a boolean if a field has been set.
func (o *RangeVariable) HasTypeReference() bool {
	if o != nil && !IsNil(o.TypeReference) {
		return true
	}

	return false
}

// SetTypeReference gets a reference to the given IEdmTypeReference and assigns it to the TypeReference field.
func (o *RangeVariable) SetTypeReference(v IEdmTypeReference) {
	o.TypeReference = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *RangeVariable) GetKind() int32 {
	if o == nil || IsNil(o.Kind) {
		var ret int32
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeVariable) GetKindOk() (*int32, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *RangeVariable) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given int32 and assigns it to the Kind field.
func (o *RangeVariable) SetKind(v int32) {
	o.Kind = &v
}

func (o RangeVariable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangeVariable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.TypeReference) {
		toSerialize["typeReference"] = o.TypeReference
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	return toSerialize, nil
}

type NullableRangeVariable struct {
	value *RangeVariable
	isSet bool
}

func (v NullableRangeVariable) Get() *RangeVariable {
	return v.value
}

func (v *NullableRangeVariable) Set(val *RangeVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeVariable(val *RangeVariable) *NullableRangeVariable {
	return &NullableRangeVariable{value: val, isSet: true}
}

func (v NullableRangeVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
