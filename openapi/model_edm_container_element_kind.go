/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EdmContainerElementKind the model 'EdmContainerElementKind'
type EdmContainerElementKind string

// List of EdmContainerElementKind
const (
	NONE            EdmContainerElementKind = "None"
	ENTITY_SET      EdmContainerElementKind = "EntitySet"
	ACTION_IMPORT   EdmContainerElementKind = "ActionImport"
	FUNCTION_IMPORT EdmContainerElementKind = "FunctionImport"
	SINGLETON       EdmContainerElementKind = "Singleton"
)

// All allowed values of EdmContainerElementKind enum
var AllowedEdmContainerElementKindEnumValues = []EdmContainerElementKind{
	"None",
	"EntitySet",
	"ActionImport",
	"FunctionImport",
	"Singleton",
}

func (v *EdmContainerElementKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EdmContainerElementKind(value)
	for _, existing := range AllowedEdmContainerElementKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EdmContainerElementKind", value)
}

// NewEdmContainerElementKindFromValue returns a pointer to a valid EdmContainerElementKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEdmContainerElementKindFromValue(v string) (*EdmContainerElementKind, error) {
	ev := EdmContainerElementKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EdmContainerElementKind: valid values are %v", v, AllowedEdmContainerElementKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EdmContainerElementKind) IsValid() bool {
	for _, existing := range AllowedEdmContainerElementKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EdmContainerElementKind value
func (v EdmContainerElementKind) Ptr() *EdmContainerElementKind {
	return &v
}

type NullableEdmContainerElementKind struct {
	value *EdmContainerElementKind
	isSet bool
}

func (v NullableEdmContainerElementKind) Get() *EdmContainerElementKind {
	return v.value
}

func (v *NullableEdmContainerElementKind) Set(val *EdmContainerElementKind) {
	v.value = val
	v.isSet = true
}

func (v NullableEdmContainerElementKind) IsSet() bool {
	return v.isSet
}

func (v *NullableEdmContainerElementKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdmContainerElementKind(val *EdmContainerElementKind) *NullableEdmContainerElementKind {
	return &NullableEdmContainerElementKind{value: val, isSet: true}
}

func (v NullableEdmContainerElementKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdmContainerElementKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
