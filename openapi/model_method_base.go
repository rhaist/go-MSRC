/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MethodBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MethodBase{}

// MethodBase struct for MethodBase
type MethodBase struct {
	MemberType                 *MemberTypes          `json:"memberType,omitempty"`
	Name                       NullableString        `json:"name,omitempty"`
	DeclaringType              *Type                 `json:"declaringType,omitempty"`
	ReflectedType              *Type                 `json:"reflectedType,omitempty"`
	Module                     *Module               `json:"module,omitempty"`
	CustomAttributes           []CustomAttributeData `json:"customAttributes,omitempty"`
	IsCollectible              *bool                 `json:"isCollectible,omitempty"`
	MetadataToken              *int32                `json:"metadataToken,omitempty"`
	Attributes                 *MethodAttributes     `json:"attributes,omitempty"`
	MethodImplementationFlags  *MethodImplAttributes `json:"methodImplementationFlags,omitempty"`
	CallingConvention          *CallingConventions   `json:"callingConvention,omitempty"`
	IsAbstract                 *bool                 `json:"isAbstract,omitempty"`
	IsConstructor              *bool                 `json:"isConstructor,omitempty"`
	IsFinal                    *bool                 `json:"isFinal,omitempty"`
	IsHideBySig                *bool                 `json:"isHideBySig,omitempty"`
	IsSpecialName              *bool                 `json:"isSpecialName,omitempty"`
	IsStatic                   *bool                 `json:"isStatic,omitempty"`
	IsVirtual                  *bool                 `json:"isVirtual,omitempty"`
	IsAssembly                 *bool                 `json:"isAssembly,omitempty"`
	IsFamily                   *bool                 `json:"isFamily,omitempty"`
	IsFamilyAndAssembly        *bool                 `json:"isFamilyAndAssembly,omitempty"`
	IsFamilyOrAssembly         *bool                 `json:"isFamilyOrAssembly,omitempty"`
	IsPrivate                  *bool                 `json:"isPrivate,omitempty"`
	IsPublic                   *bool                 `json:"isPublic,omitempty"`
	IsConstructedGenericMethod *bool                 `json:"isConstructedGenericMethod,omitempty"`
	IsGenericMethod            *bool                 `json:"isGenericMethod,omitempty"`
	IsGenericMethodDefinition  *bool                 `json:"isGenericMethodDefinition,omitempty"`
	ContainsGenericParameters  *bool                 `json:"containsGenericParameters,omitempty"`
	MethodHandle               *RuntimeMethodHandle  `json:"methodHandle,omitempty"`
	IsSecurityCritical         *bool                 `json:"isSecurityCritical,omitempty"`
	IsSecuritySafeCritical     *bool                 `json:"isSecuritySafeCritical,omitempty"`
	IsSecurityTransparent      *bool                 `json:"isSecurityTransparent,omitempty"`
}

// NewMethodBase instantiates a new MethodBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMethodBase() *MethodBase {
	this := MethodBase{}
	return &this
}

// NewMethodBaseWithDefaults instantiates a new MethodBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMethodBaseWithDefaults() *MethodBase {
	this := MethodBase{}
	return &this
}

// GetMemberType returns the MemberType field value if set, zero value otherwise.
func (o *MethodBase) GetMemberType() MemberTypes {
	if o == nil || IsNil(o.MemberType) {
		var ret MemberTypes
		return ret
	}
	return *o.MemberType
}

// GetMemberTypeOk returns a tuple with the MemberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetMemberTypeOk() (*MemberTypes, bool) {
	if o == nil || IsNil(o.MemberType) {
		return nil, false
	}
	return o.MemberType, true
}

// HasMemberType returns a boolean if a field has been set.
func (o *MethodBase) HasMemberType() bool {
	if o != nil && !IsNil(o.MemberType) {
		return true
	}

	return false
}

// SetMemberType gets a reference to the given MemberTypes and assigns it to the MemberType field.
func (o *MethodBase) SetMemberType(v MemberTypes) {
	o.MemberType = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MethodBase) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MethodBase) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MethodBase) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MethodBase) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *MethodBase) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MethodBase) UnsetName() {
	o.Name.Unset()
}

// GetDeclaringType returns the DeclaringType field value if set, zero value otherwise.
func (o *MethodBase) GetDeclaringType() Type {
	if o == nil || IsNil(o.DeclaringType) {
		var ret Type
		return ret
	}
	return *o.DeclaringType
}

// GetDeclaringTypeOk returns a tuple with the DeclaringType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetDeclaringTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.DeclaringType) {
		return nil, false
	}
	return o.DeclaringType, true
}

// HasDeclaringType returns a boolean if a field has been set.
func (o *MethodBase) HasDeclaringType() bool {
	if o != nil && !IsNil(o.DeclaringType) {
		return true
	}

	return false
}

// SetDeclaringType gets a reference to the given Type and assigns it to the DeclaringType field.
func (o *MethodBase) SetDeclaringType(v Type) {
	o.DeclaringType = &v
}

// GetReflectedType returns the ReflectedType field value if set, zero value otherwise.
func (o *MethodBase) GetReflectedType() Type {
	if o == nil || IsNil(o.ReflectedType) {
		var ret Type
		return ret
	}
	return *o.ReflectedType
}

// GetReflectedTypeOk returns a tuple with the ReflectedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetReflectedTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.ReflectedType) {
		return nil, false
	}
	return o.ReflectedType, true
}

// HasReflectedType returns a boolean if a field has been set.
func (o *MethodBase) HasReflectedType() bool {
	if o != nil && !IsNil(o.ReflectedType) {
		return true
	}

	return false
}

// SetReflectedType gets a reference to the given Type and assigns it to the ReflectedType field.
func (o *MethodBase) SetReflectedType(v Type) {
	o.ReflectedType = &v
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *MethodBase) GetModule() Module {
	if o == nil || IsNil(o.Module) {
		var ret Module
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetModuleOk() (*Module, bool) {
	if o == nil || IsNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *MethodBase) HasModule() bool {
	if o != nil && !IsNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given Module and assigns it to the Module field.
func (o *MethodBase) SetModule(v Module) {
	o.Module = &v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MethodBase) GetCustomAttributes() []CustomAttributeData {
	if o == nil {
		var ret []CustomAttributeData
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MethodBase) GetCustomAttributesOk() ([]CustomAttributeData, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *MethodBase) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []CustomAttributeData and assigns it to the CustomAttributes field.
func (o *MethodBase) SetCustomAttributes(v []CustomAttributeData) {
	o.CustomAttributes = v
}

// GetIsCollectible returns the IsCollectible field value if set, zero value otherwise.
func (o *MethodBase) GetIsCollectible() bool {
	if o == nil || IsNil(o.IsCollectible) {
		var ret bool
		return ret
	}
	return *o.IsCollectible
}

// GetIsCollectibleOk returns a tuple with the IsCollectible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsCollectibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCollectible) {
		return nil, false
	}
	return o.IsCollectible, true
}

// HasIsCollectible returns a boolean if a field has been set.
func (o *MethodBase) HasIsCollectible() bool {
	if o != nil && !IsNil(o.IsCollectible) {
		return true
	}

	return false
}

// SetIsCollectible gets a reference to the given bool and assigns it to the IsCollectible field.
func (o *MethodBase) SetIsCollectible(v bool) {
	o.IsCollectible = &v
}

// GetMetadataToken returns the MetadataToken field value if set, zero value otherwise.
func (o *MethodBase) GetMetadataToken() int32 {
	if o == nil || IsNil(o.MetadataToken) {
		var ret int32
		return ret
	}
	return *o.MetadataToken
}

// GetMetadataTokenOk returns a tuple with the MetadataToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetMetadataTokenOk() (*int32, bool) {
	if o == nil || IsNil(o.MetadataToken) {
		return nil, false
	}
	return o.MetadataToken, true
}

// HasMetadataToken returns a boolean if a field has been set.
func (o *MethodBase) HasMetadataToken() bool {
	if o != nil && !IsNil(o.MetadataToken) {
		return true
	}

	return false
}

// SetMetadataToken gets a reference to the given int32 and assigns it to the MetadataToken field.
func (o *MethodBase) SetMetadataToken(v int32) {
	o.MetadataToken = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *MethodBase) GetAttributes() MethodAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret MethodAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetAttributesOk() (*MethodAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *MethodBase) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given MethodAttributes and assigns it to the Attributes field.
func (o *MethodBase) SetAttributes(v MethodAttributes) {
	o.Attributes = &v
}

// GetMethodImplementationFlags returns the MethodImplementationFlags field value if set, zero value otherwise.
func (o *MethodBase) GetMethodImplementationFlags() MethodImplAttributes {
	if o == nil || IsNil(o.MethodImplementationFlags) {
		var ret MethodImplAttributes
		return ret
	}
	return *o.MethodImplementationFlags
}

// GetMethodImplementationFlagsOk returns a tuple with the MethodImplementationFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetMethodImplementationFlagsOk() (*MethodImplAttributes, bool) {
	if o == nil || IsNil(o.MethodImplementationFlags) {
		return nil, false
	}
	return o.MethodImplementationFlags, true
}

// HasMethodImplementationFlags returns a boolean if a field has been set.
func (o *MethodBase) HasMethodImplementationFlags() bool {
	if o != nil && !IsNil(o.MethodImplementationFlags) {
		return true
	}

	return false
}

// SetMethodImplementationFlags gets a reference to the given MethodImplAttributes and assigns it to the MethodImplementationFlags field.
func (o *MethodBase) SetMethodImplementationFlags(v MethodImplAttributes) {
	o.MethodImplementationFlags = &v
}

// GetCallingConvention returns the CallingConvention field value if set, zero value otherwise.
func (o *MethodBase) GetCallingConvention() CallingConventions {
	if o == nil || IsNil(o.CallingConvention) {
		var ret CallingConventions
		return ret
	}
	return *o.CallingConvention
}

// GetCallingConventionOk returns a tuple with the CallingConvention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetCallingConventionOk() (*CallingConventions, bool) {
	if o == nil || IsNil(o.CallingConvention) {
		return nil, false
	}
	return o.CallingConvention, true
}

// HasCallingConvention returns a boolean if a field has been set.
func (o *MethodBase) HasCallingConvention() bool {
	if o != nil && !IsNil(o.CallingConvention) {
		return true
	}

	return false
}

// SetCallingConvention gets a reference to the given CallingConventions and assigns it to the CallingConvention field.
func (o *MethodBase) SetCallingConvention(v CallingConventions) {
	o.CallingConvention = &v
}

// GetIsAbstract returns the IsAbstract field value if set, zero value otherwise.
func (o *MethodBase) GetIsAbstract() bool {
	if o == nil || IsNil(o.IsAbstract) {
		var ret bool
		return ret
	}
	return *o.IsAbstract
}

// GetIsAbstractOk returns a tuple with the IsAbstract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsAbstractOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAbstract) {
		return nil, false
	}
	return o.IsAbstract, true
}

// HasIsAbstract returns a boolean if a field has been set.
func (o *MethodBase) HasIsAbstract() bool {
	if o != nil && !IsNil(o.IsAbstract) {
		return true
	}

	return false
}

// SetIsAbstract gets a reference to the given bool and assigns it to the IsAbstract field.
func (o *MethodBase) SetIsAbstract(v bool) {
	o.IsAbstract = &v
}

// GetIsConstructor returns the IsConstructor field value if set, zero value otherwise.
func (o *MethodBase) GetIsConstructor() bool {
	if o == nil || IsNil(o.IsConstructor) {
		var ret bool
		return ret
	}
	return *o.IsConstructor
}

// GetIsConstructorOk returns a tuple with the IsConstructor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsConstructorOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConstructor) {
		return nil, false
	}
	return o.IsConstructor, true
}

// HasIsConstructor returns a boolean if a field has been set.
func (o *MethodBase) HasIsConstructor() bool {
	if o != nil && !IsNil(o.IsConstructor) {
		return true
	}

	return false
}

// SetIsConstructor gets a reference to the given bool and assigns it to the IsConstructor field.
func (o *MethodBase) SetIsConstructor(v bool) {
	o.IsConstructor = &v
}

// GetIsFinal returns the IsFinal field value if set, zero value otherwise.
func (o *MethodBase) GetIsFinal() bool {
	if o == nil || IsNil(o.IsFinal) {
		var ret bool
		return ret
	}
	return *o.IsFinal
}

// GetIsFinalOk returns a tuple with the IsFinal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsFinalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFinal) {
		return nil, false
	}
	return o.IsFinal, true
}

// HasIsFinal returns a boolean if a field has been set.
func (o *MethodBase) HasIsFinal() bool {
	if o != nil && !IsNil(o.IsFinal) {
		return true
	}

	return false
}

// SetIsFinal gets a reference to the given bool and assigns it to the IsFinal field.
func (o *MethodBase) SetIsFinal(v bool) {
	o.IsFinal = &v
}

// GetIsHideBySig returns the IsHideBySig field value if set, zero value otherwise.
func (o *MethodBase) GetIsHideBySig() bool {
	if o == nil || IsNil(o.IsHideBySig) {
		var ret bool
		return ret
	}
	return *o.IsHideBySig
}

// GetIsHideBySigOk returns a tuple with the IsHideBySig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsHideBySigOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHideBySig) {
		return nil, false
	}
	return o.IsHideBySig, true
}

// HasIsHideBySig returns a boolean if a field has been set.
func (o *MethodBase) HasIsHideBySig() bool {
	if o != nil && !IsNil(o.IsHideBySig) {
		return true
	}

	return false
}

// SetIsHideBySig gets a reference to the given bool and assigns it to the IsHideBySig field.
func (o *MethodBase) SetIsHideBySig(v bool) {
	o.IsHideBySig = &v
}

// GetIsSpecialName returns the IsSpecialName field value if set, zero value otherwise.
func (o *MethodBase) GetIsSpecialName() bool {
	if o == nil || IsNil(o.IsSpecialName) {
		var ret bool
		return ret
	}
	return *o.IsSpecialName
}

// GetIsSpecialNameOk returns a tuple with the IsSpecialName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsSpecialNameOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSpecialName) {
		return nil, false
	}
	return o.IsSpecialName, true
}

// HasIsSpecialName returns a boolean if a field has been set.
func (o *MethodBase) HasIsSpecialName() bool {
	if o != nil && !IsNil(o.IsSpecialName) {
		return true
	}

	return false
}

// SetIsSpecialName gets a reference to the given bool and assigns it to the IsSpecialName field.
func (o *MethodBase) SetIsSpecialName(v bool) {
	o.IsSpecialName = &v
}

// GetIsStatic returns the IsStatic field value if set, zero value otherwise.
func (o *MethodBase) GetIsStatic() bool {
	if o == nil || IsNil(o.IsStatic) {
		var ret bool
		return ret
	}
	return *o.IsStatic
}

// GetIsStaticOk returns a tuple with the IsStatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStatic) {
		return nil, false
	}
	return o.IsStatic, true
}

// HasIsStatic returns a boolean if a field has been set.
func (o *MethodBase) HasIsStatic() bool {
	if o != nil && !IsNil(o.IsStatic) {
		return true
	}

	return false
}

// SetIsStatic gets a reference to the given bool and assigns it to the IsStatic field.
func (o *MethodBase) SetIsStatic(v bool) {
	o.IsStatic = &v
}

// GetIsVirtual returns the IsVirtual field value if set, zero value otherwise.
func (o *MethodBase) GetIsVirtual() bool {
	if o == nil || IsNil(o.IsVirtual) {
		var ret bool
		return ret
	}
	return *o.IsVirtual
}

// GetIsVirtualOk returns a tuple with the IsVirtual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsVirtualOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVirtual) {
		return nil, false
	}
	return o.IsVirtual, true
}

// HasIsVirtual returns a boolean if a field has been set.
func (o *MethodBase) HasIsVirtual() bool {
	if o != nil && !IsNil(o.IsVirtual) {
		return true
	}

	return false
}

// SetIsVirtual gets a reference to the given bool and assigns it to the IsVirtual field.
func (o *MethodBase) SetIsVirtual(v bool) {
	o.IsVirtual = &v
}

// GetIsAssembly returns the IsAssembly field value if set, zero value otherwise.
func (o *MethodBase) GetIsAssembly() bool {
	if o == nil || IsNil(o.IsAssembly) {
		var ret bool
		return ret
	}
	return *o.IsAssembly
}

// GetIsAssemblyOk returns a tuple with the IsAssembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsAssemblyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAssembly) {
		return nil, false
	}
	return o.IsAssembly, true
}

// HasIsAssembly returns a boolean if a field has been set.
func (o *MethodBase) HasIsAssembly() bool {
	if o != nil && !IsNil(o.IsAssembly) {
		return true
	}

	return false
}

// SetIsAssembly gets a reference to the given bool and assigns it to the IsAssembly field.
func (o *MethodBase) SetIsAssembly(v bool) {
	o.IsAssembly = &v
}

// GetIsFamily returns the IsFamily field value if set, zero value otherwise.
func (o *MethodBase) GetIsFamily() bool {
	if o == nil || IsNil(o.IsFamily) {
		var ret bool
		return ret
	}
	return *o.IsFamily
}

// GetIsFamilyOk returns a tuple with the IsFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsFamilyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFamily) {
		return nil, false
	}
	return o.IsFamily, true
}

// HasIsFamily returns a boolean if a field has been set.
func (o *MethodBase) HasIsFamily() bool {
	if o != nil && !IsNil(o.IsFamily) {
		return true
	}

	return false
}

// SetIsFamily gets a reference to the given bool and assigns it to the IsFamily field.
func (o *MethodBase) SetIsFamily(v bool) {
	o.IsFamily = &v
}

// GetIsFamilyAndAssembly returns the IsFamilyAndAssembly field value if set, zero value otherwise.
func (o *MethodBase) GetIsFamilyAndAssembly() bool {
	if o == nil || IsNil(o.IsFamilyAndAssembly) {
		var ret bool
		return ret
	}
	return *o.IsFamilyAndAssembly
}

// GetIsFamilyAndAssemblyOk returns a tuple with the IsFamilyAndAssembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsFamilyAndAssemblyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFamilyAndAssembly) {
		return nil, false
	}
	return o.IsFamilyAndAssembly, true
}

// HasIsFamilyAndAssembly returns a boolean if a field has been set.
func (o *MethodBase) HasIsFamilyAndAssembly() bool {
	if o != nil && !IsNil(o.IsFamilyAndAssembly) {
		return true
	}

	return false
}

// SetIsFamilyAndAssembly gets a reference to the given bool and assigns it to the IsFamilyAndAssembly field.
func (o *MethodBase) SetIsFamilyAndAssembly(v bool) {
	o.IsFamilyAndAssembly = &v
}

// GetIsFamilyOrAssembly returns the IsFamilyOrAssembly field value if set, zero value otherwise.
func (o *MethodBase) GetIsFamilyOrAssembly() bool {
	if o == nil || IsNil(o.IsFamilyOrAssembly) {
		var ret bool
		return ret
	}
	return *o.IsFamilyOrAssembly
}

// GetIsFamilyOrAssemblyOk returns a tuple with the IsFamilyOrAssembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsFamilyOrAssemblyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFamilyOrAssembly) {
		return nil, false
	}
	return o.IsFamilyOrAssembly, true
}

// HasIsFamilyOrAssembly returns a boolean if a field has been set.
func (o *MethodBase) HasIsFamilyOrAssembly() bool {
	if o != nil && !IsNil(o.IsFamilyOrAssembly) {
		return true
	}

	return false
}

// SetIsFamilyOrAssembly gets a reference to the given bool and assigns it to the IsFamilyOrAssembly field.
func (o *MethodBase) SetIsFamilyOrAssembly(v bool) {
	o.IsFamilyOrAssembly = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *MethodBase) GetIsPrivate() bool {
	if o == nil || IsNil(o.IsPrivate) {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivate) {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *MethodBase) HasIsPrivate() bool {
	if o != nil && !IsNil(o.IsPrivate) {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *MethodBase) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *MethodBase) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *MethodBase) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *MethodBase) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetIsConstructedGenericMethod returns the IsConstructedGenericMethod field value if set, zero value otherwise.
func (o *MethodBase) GetIsConstructedGenericMethod() bool {
	if o == nil || IsNil(o.IsConstructedGenericMethod) {
		var ret bool
		return ret
	}
	return *o.IsConstructedGenericMethod
}

// GetIsConstructedGenericMethodOk returns a tuple with the IsConstructedGenericMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsConstructedGenericMethodOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConstructedGenericMethod) {
		return nil, false
	}
	return o.IsConstructedGenericMethod, true
}

// HasIsConstructedGenericMethod returns a boolean if a field has been set.
func (o *MethodBase) HasIsConstructedGenericMethod() bool {
	if o != nil && !IsNil(o.IsConstructedGenericMethod) {
		return true
	}

	return false
}

// SetIsConstructedGenericMethod gets a reference to the given bool and assigns it to the IsConstructedGenericMethod field.
func (o *MethodBase) SetIsConstructedGenericMethod(v bool) {
	o.IsConstructedGenericMethod = &v
}

// GetIsGenericMethod returns the IsGenericMethod field value if set, zero value otherwise.
func (o *MethodBase) GetIsGenericMethod() bool {
	if o == nil || IsNil(o.IsGenericMethod) {
		var ret bool
		return ret
	}
	return *o.IsGenericMethod
}

// GetIsGenericMethodOk returns a tuple with the IsGenericMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsGenericMethodOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGenericMethod) {
		return nil, false
	}
	return o.IsGenericMethod, true
}

// HasIsGenericMethod returns a boolean if a field has been set.
func (o *MethodBase) HasIsGenericMethod() bool {
	if o != nil && !IsNil(o.IsGenericMethod) {
		return true
	}

	return false
}

// SetIsGenericMethod gets a reference to the given bool and assigns it to the IsGenericMethod field.
func (o *MethodBase) SetIsGenericMethod(v bool) {
	o.IsGenericMethod = &v
}

// GetIsGenericMethodDefinition returns the IsGenericMethodDefinition field value if set, zero value otherwise.
func (o *MethodBase) GetIsGenericMethodDefinition() bool {
	if o == nil || IsNil(o.IsGenericMethodDefinition) {
		var ret bool
		return ret
	}
	return *o.IsGenericMethodDefinition
}

// GetIsGenericMethodDefinitionOk returns a tuple with the IsGenericMethodDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsGenericMethodDefinitionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGenericMethodDefinition) {
		return nil, false
	}
	return o.IsGenericMethodDefinition, true
}

// HasIsGenericMethodDefinition returns a boolean if a field has been set.
func (o *MethodBase) HasIsGenericMethodDefinition() bool {
	if o != nil && !IsNil(o.IsGenericMethodDefinition) {
		return true
	}

	return false
}

// SetIsGenericMethodDefinition gets a reference to the given bool and assigns it to the IsGenericMethodDefinition field.
func (o *MethodBase) SetIsGenericMethodDefinition(v bool) {
	o.IsGenericMethodDefinition = &v
}

// GetContainsGenericParameters returns the ContainsGenericParameters field value if set, zero value otherwise.
func (o *MethodBase) GetContainsGenericParameters() bool {
	if o == nil || IsNil(o.ContainsGenericParameters) {
		var ret bool
		return ret
	}
	return *o.ContainsGenericParameters
}

// GetContainsGenericParametersOk returns a tuple with the ContainsGenericParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetContainsGenericParametersOk() (*bool, bool) {
	if o == nil || IsNil(o.ContainsGenericParameters) {
		return nil, false
	}
	return o.ContainsGenericParameters, true
}

// HasContainsGenericParameters returns a boolean if a field has been set.
func (o *MethodBase) HasContainsGenericParameters() bool {
	if o != nil && !IsNil(o.ContainsGenericParameters) {
		return true
	}

	return false
}

// SetContainsGenericParameters gets a reference to the given bool and assigns it to the ContainsGenericParameters field.
func (o *MethodBase) SetContainsGenericParameters(v bool) {
	o.ContainsGenericParameters = &v
}

// GetMethodHandle returns the MethodHandle field value if set, zero value otherwise.
func (o *MethodBase) GetMethodHandle() RuntimeMethodHandle {
	if o == nil || IsNil(o.MethodHandle) {
		var ret RuntimeMethodHandle
		return ret
	}
	return *o.MethodHandle
}

// GetMethodHandleOk returns a tuple with the MethodHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetMethodHandleOk() (*RuntimeMethodHandle, bool) {
	if o == nil || IsNil(o.MethodHandle) {
		return nil, false
	}
	return o.MethodHandle, true
}

// HasMethodHandle returns a boolean if a field has been set.
func (o *MethodBase) HasMethodHandle() bool {
	if o != nil && !IsNil(o.MethodHandle) {
		return true
	}

	return false
}

// SetMethodHandle gets a reference to the given RuntimeMethodHandle and assigns it to the MethodHandle field.
func (o *MethodBase) SetMethodHandle(v RuntimeMethodHandle) {
	o.MethodHandle = &v
}

// GetIsSecurityCritical returns the IsSecurityCritical field value if set, zero value otherwise.
func (o *MethodBase) GetIsSecurityCritical() bool {
	if o == nil || IsNil(o.IsSecurityCritical) {
		var ret bool
		return ret
	}
	return *o.IsSecurityCritical
}

// GetIsSecurityCriticalOk returns a tuple with the IsSecurityCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsSecurityCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecurityCritical) {
		return nil, false
	}
	return o.IsSecurityCritical, true
}

// HasIsSecurityCritical returns a boolean if a field has been set.
func (o *MethodBase) HasIsSecurityCritical() bool {
	if o != nil && !IsNil(o.IsSecurityCritical) {
		return true
	}

	return false
}

// SetIsSecurityCritical gets a reference to the given bool and assigns it to the IsSecurityCritical field.
func (o *MethodBase) SetIsSecurityCritical(v bool) {
	o.IsSecurityCritical = &v
}

// GetIsSecuritySafeCritical returns the IsSecuritySafeCritical field value if set, zero value otherwise.
func (o *MethodBase) GetIsSecuritySafeCritical() bool {
	if o == nil || IsNil(o.IsSecuritySafeCritical) {
		var ret bool
		return ret
	}
	return *o.IsSecuritySafeCritical
}

// GetIsSecuritySafeCriticalOk returns a tuple with the IsSecuritySafeCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsSecuritySafeCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecuritySafeCritical) {
		return nil, false
	}
	return o.IsSecuritySafeCritical, true
}

// HasIsSecuritySafeCritical returns a boolean if a field has been set.
func (o *MethodBase) HasIsSecuritySafeCritical() bool {
	if o != nil && !IsNil(o.IsSecuritySafeCritical) {
		return true
	}

	return false
}

// SetIsSecuritySafeCritical gets a reference to the given bool and assigns it to the IsSecuritySafeCritical field.
func (o *MethodBase) SetIsSecuritySafeCritical(v bool) {
	o.IsSecuritySafeCritical = &v
}

// GetIsSecurityTransparent returns the IsSecurityTransparent field value if set, zero value otherwise.
func (o *MethodBase) GetIsSecurityTransparent() bool {
	if o == nil || IsNil(o.IsSecurityTransparent) {
		var ret bool
		return ret
	}
	return *o.IsSecurityTransparent
}

// GetIsSecurityTransparentOk returns a tuple with the IsSecurityTransparent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodBase) GetIsSecurityTransparentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecurityTransparent) {
		return nil, false
	}
	return o.IsSecurityTransparent, true
}

// HasIsSecurityTransparent returns a boolean if a field has been set.
func (o *MethodBase) HasIsSecurityTransparent() bool {
	if o != nil && !IsNil(o.IsSecurityTransparent) {
		return true
	}

	return false
}

// SetIsSecurityTransparent gets a reference to the given bool and assigns it to the IsSecurityTransparent field.
func (o *MethodBase) SetIsSecurityTransparent(v bool) {
	o.IsSecurityTransparent = &v
}

func (o MethodBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MethodBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MemberType) {
		toSerialize["memberType"] = o.MemberType
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.DeclaringType) {
		toSerialize["declaringType"] = o.DeclaringType
	}
	if !IsNil(o.ReflectedType) {
		toSerialize["reflectedType"] = o.ReflectedType
	}
	if !IsNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	if o.CustomAttributes != nil {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	if !IsNil(o.IsCollectible) {
		toSerialize["isCollectible"] = o.IsCollectible
	}
	if !IsNil(o.MetadataToken) {
		toSerialize["metadataToken"] = o.MetadataToken
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.MethodImplementationFlags) {
		toSerialize["methodImplementationFlags"] = o.MethodImplementationFlags
	}
	if !IsNil(o.CallingConvention) {
		toSerialize["callingConvention"] = o.CallingConvention
	}
	if !IsNil(o.IsAbstract) {
		toSerialize["isAbstract"] = o.IsAbstract
	}
	if !IsNil(o.IsConstructor) {
		toSerialize["isConstructor"] = o.IsConstructor
	}
	if !IsNil(o.IsFinal) {
		toSerialize["isFinal"] = o.IsFinal
	}
	if !IsNil(o.IsHideBySig) {
		toSerialize["isHideBySig"] = o.IsHideBySig
	}
	if !IsNil(o.IsSpecialName) {
		toSerialize["isSpecialName"] = o.IsSpecialName
	}
	if !IsNil(o.IsStatic) {
		toSerialize["isStatic"] = o.IsStatic
	}
	if !IsNil(o.IsVirtual) {
		toSerialize["isVirtual"] = o.IsVirtual
	}
	if !IsNil(o.IsAssembly) {
		toSerialize["isAssembly"] = o.IsAssembly
	}
	if !IsNil(o.IsFamily) {
		toSerialize["isFamily"] = o.IsFamily
	}
	if !IsNil(o.IsFamilyAndAssembly) {
		toSerialize["isFamilyAndAssembly"] = o.IsFamilyAndAssembly
	}
	if !IsNil(o.IsFamilyOrAssembly) {
		toSerialize["isFamilyOrAssembly"] = o.IsFamilyOrAssembly
	}
	if !IsNil(o.IsPrivate) {
		toSerialize["isPrivate"] = o.IsPrivate
	}
	if !IsNil(o.IsPublic) {
		toSerialize["isPublic"] = o.IsPublic
	}
	if !IsNil(o.IsConstructedGenericMethod) {
		toSerialize["isConstructedGenericMethod"] = o.IsConstructedGenericMethod
	}
	if !IsNil(o.IsGenericMethod) {
		toSerialize["isGenericMethod"] = o.IsGenericMethod
	}
	if !IsNil(o.IsGenericMethodDefinition) {
		toSerialize["isGenericMethodDefinition"] = o.IsGenericMethodDefinition
	}
	if !IsNil(o.ContainsGenericParameters) {
		toSerialize["containsGenericParameters"] = o.ContainsGenericParameters
	}
	if !IsNil(o.MethodHandle) {
		toSerialize["methodHandle"] = o.MethodHandle
	}
	if !IsNil(o.IsSecurityCritical) {
		toSerialize["isSecurityCritical"] = o.IsSecurityCritical
	}
	if !IsNil(o.IsSecuritySafeCritical) {
		toSerialize["isSecuritySafeCritical"] = o.IsSecuritySafeCritical
	}
	if !IsNil(o.IsSecurityTransparent) {
		toSerialize["isSecurityTransparent"] = o.IsSecurityTransparent
	}
	return toSerialize, nil
}

type NullableMethodBase struct {
	value *MethodBase
	isSet bool
}

func (v NullableMethodBase) Get() *MethodBase {
	return v.value
}

func (v *NullableMethodBase) Set(val *MethodBase) {
	v.value = val
	v.isSet = true
}

func (v NullableMethodBase) IsSet() bool {
	return v.isSet
}

func (v *NullableMethodBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMethodBase(val *MethodBase) *NullableMethodBase {
	return &NullableMethodBase{value: val, isSet: true}
}

func (v NullableMethodBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMethodBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
