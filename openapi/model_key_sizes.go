/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KeySizes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeySizes{}

// KeySizes struct for KeySizes
type KeySizes struct {
	MinSize  *int32 `json:"minSize,omitempty"`
	MaxSize  *int32 `json:"maxSize,omitempty"`
	SkipSize *int32 `json:"skipSize,omitempty"`
}

// NewKeySizes instantiates a new KeySizes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeySizes() *KeySizes {
	this := KeySizes{}
	return &this
}

// NewKeySizesWithDefaults instantiates a new KeySizes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeySizesWithDefaults() *KeySizes {
	this := KeySizes{}
	return &this
}

// GetMinSize returns the MinSize field value if set, zero value otherwise.
func (o *KeySizes) GetMinSize() int32 {
	if o == nil || IsNil(o.MinSize) {
		var ret int32
		return ret
	}
	return *o.MinSize
}

// GetMinSizeOk returns a tuple with the MinSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySizes) GetMinSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.MinSize) {
		return nil, false
	}
	return o.MinSize, true
}

// HasMinSize returns a boolean if a field has been set.
func (o *KeySizes) HasMinSize() bool {
	if o != nil && !IsNil(o.MinSize) {
		return true
	}

	return false
}

// SetMinSize gets a reference to the given int32 and assigns it to the MinSize field.
func (o *KeySizes) SetMinSize(v int32) {
	o.MinSize = &v
}

// GetMaxSize returns the MaxSize field value if set, zero value otherwise.
func (o *KeySizes) GetMaxSize() int32 {
	if o == nil || IsNil(o.MaxSize) {
		var ret int32
		return ret
	}
	return *o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySizes) GetMaxSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSize) {
		return nil, false
	}
	return o.MaxSize, true
}

// HasMaxSize returns a boolean if a field has been set.
func (o *KeySizes) HasMaxSize() bool {
	if o != nil && !IsNil(o.MaxSize) {
		return true
	}

	return false
}

// SetMaxSize gets a reference to the given int32 and assigns it to the MaxSize field.
func (o *KeySizes) SetMaxSize(v int32) {
	o.MaxSize = &v
}

// GetSkipSize returns the SkipSize field value if set, zero value otherwise.
func (o *KeySizes) GetSkipSize() int32 {
	if o == nil || IsNil(o.SkipSize) {
		var ret int32
		return ret
	}
	return *o.SkipSize
}

// GetSkipSizeOk returns a tuple with the SkipSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySizes) GetSkipSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.SkipSize) {
		return nil, false
	}
	return o.SkipSize, true
}

// HasSkipSize returns a boolean if a field has been set.
func (o *KeySizes) HasSkipSize() bool {
	if o != nil && !IsNil(o.SkipSize) {
		return true
	}

	return false
}

// SetSkipSize gets a reference to the given int32 and assigns it to the SkipSize field.
func (o *KeySizes) SetSkipSize(v int32) {
	o.SkipSize = &v
}

func (o KeySizes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeySizes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinSize) {
		toSerialize["minSize"] = o.MinSize
	}
	if !IsNil(o.MaxSize) {
		toSerialize["maxSize"] = o.MaxSize
	}
	if !IsNil(o.SkipSize) {
		toSerialize["skipSize"] = o.SkipSize
	}
	return toSerialize, nil
}

type NullableKeySizes struct {
	value *KeySizes
	isSet bool
}

func (v NullableKeySizes) Get() *KeySizes {
	return v.value
}

func (v *NullableKeySizes) Set(val *KeySizes) {
	v.value = val
	v.isSet = true
}

func (v NullableKeySizes) IsSet() bool {
	return v.isSet
}

func (v *NullableKeySizes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeySizes(val *KeySizes) *NullableKeySizes {
	return &NullableKeySizes{value: val, isSet: true}
}

func (v NullableKeySizes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeySizes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
