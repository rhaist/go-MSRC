/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClaimsIdentity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimsIdentity{}

// ClaimsIdentity struct for ClaimsIdentity
type ClaimsIdentity struct {
	AuthenticationType NullableString  `json:"authenticationType,omitempty"`
	IsAuthenticated    *bool           `json:"isAuthenticated,omitempty"`
	Actor              *ClaimsIdentity `json:"actor,omitempty"`
	BootstrapContext   interface{}     `json:"bootstrapContext,omitempty"`
	Claims             []Claim         `json:"claims,omitempty"`
	Label              NullableString  `json:"label,omitempty"`
	Name               NullableString  `json:"name,omitempty"`
	NameClaimType      NullableString  `json:"nameClaimType,omitempty"`
	RoleClaimType      NullableString  `json:"roleClaimType,omitempty"`
}

// NewClaimsIdentity instantiates a new ClaimsIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimsIdentity() *ClaimsIdentity {
	this := ClaimsIdentity{}
	return &this
}

// NewClaimsIdentityWithDefaults instantiates a new ClaimsIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimsIdentityWithDefaults() *ClaimsIdentity {
	this := ClaimsIdentity{}
	return &this
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClaimsIdentity) GetAuthenticationType() string {
	if o == nil || IsNil(o.AuthenticationType.Get()) {
		var ret string
		return ret
	}
	return *o.AuthenticationType.Get()
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClaimsIdentity) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticationType.Get(), o.AuthenticationType.IsSet()
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *ClaimsIdentity) HasAuthenticationType() bool {
	if o != nil && o.AuthenticationType.IsSet() {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given NullableString and assigns it to the AuthenticationType field.
func (o *ClaimsIdentity) SetAuthenticationType(v string) {
	o.AuthenticationType.Set(&v)
}

// SetAuthenticationTypeNil sets the value for AuthenticationType to be an explicit nil
func (o *ClaimsIdentity) SetAuthenticationTypeNil() {
	o.AuthenticationType.Set(nil)
}

// UnsetAuthenticationType ensures that no value is present for AuthenticationType, not even an explicit nil
func (o *ClaimsIdentity) UnsetAuthenticationType() {
	o.AuthenticationType.Unset()
}

// GetIsAuthenticated returns the IsAuthenticated field value if set, zero value otherwise.
func (o *ClaimsIdentity) GetIsAuthenticated() bool {
	if o == nil || IsNil(o.IsAuthenticated) {
		var ret bool
		return ret
	}
	return *o.IsAuthenticated
}

// GetIsAuthenticatedOk returns a tuple with the IsAuthenticated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimsIdentity) GetIsAuthenticatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAuthenticated) {
		return nil, false
	}
	return o.IsAuthenticated, true
}

// HasIsAuthenticated returns a boolean if a field has been set.
func (o *ClaimsIdentity) HasIsAuthenticated() bool {
	if o != nil && !IsNil(o.IsAuthenticated) {
		return true
	}

	return false
}

// SetIsAuthenticated gets a reference to the given bool and assigns it to the IsAuthenticated field.
func (o *ClaimsIdentity) SetIsAuthenticated(v bool) {
	o.IsAuthenticated = &v
}

// GetActor returns the Actor field value if set, zero value otherwise.
func (o *ClaimsIdentity) GetActor() ClaimsIdentity {
	if o == nil || IsNil(o.Actor) {
		var ret ClaimsIdentity
		return ret
	}
	return *o.Actor
}

// GetActorOk returns a tuple with the Actor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimsIdentity) GetActorOk() (*ClaimsIdentity, bool) {
	if o == nil || IsNil(o.Actor) {
		return nil, false
	}
	return o.Actor, true
}

// HasActor returns a boolean if a field has been set.
func (o *ClaimsIdentity) HasActor() bool {
	if o != nil && !IsNil(o.Actor) {
		return true
	}

	return false
}

// SetActor gets a reference to the given ClaimsIdentity and assigns it to the Actor field.
func (o *ClaimsIdentity) SetActor(v ClaimsIdentity) {
	o.Actor = &v
}

// GetBootstrapContext returns the BootstrapContext field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClaimsIdentity) GetBootstrapContext() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BootstrapContext
}

// GetBootstrapContextOk returns a tuple with the BootstrapContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClaimsIdentity) GetBootstrapContextOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BootstrapContext) {
		return nil, false
	}
	return &o.BootstrapContext, true
}

// HasBootstrapContext returns a boolean if a field has been set.
func (o *ClaimsIdentity) HasBootstrapContext() bool {
	if o != nil && !IsNil(o.BootstrapContext) {
		return true
	}

	return false
}

// SetBootstrapContext gets a reference to the given interface{} and assigns it to the BootstrapContext field.
func (o *ClaimsIdentity) SetBootstrapContext(v interface{}) {
	o.BootstrapContext = v
}

// GetClaims returns the Claims field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClaimsIdentity) GetClaims() []Claim {
	if o == nil {
		var ret []Claim
		return ret
	}
	return o.Claims
}

// GetClaimsOk returns a tuple with the Claims field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClaimsIdentity) GetClaimsOk() ([]Claim, bool) {
	if o == nil || IsNil(o.Claims) {
		return nil, false
	}
	return o.Claims, true
}

// HasClaims returns a boolean if a field has been set.
func (o *ClaimsIdentity) HasClaims() bool {
	if o != nil && !IsNil(o.Claims) {
		return true
	}

	return false
}

// SetClaims gets a reference to the given []Claim and assigns it to the Claims field.
func (o *ClaimsIdentity) SetClaims(v []Claim) {
	o.Claims = v
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClaimsIdentity) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClaimsIdentity) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *ClaimsIdentity) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *ClaimsIdentity) SetLabel(v string) {
	o.Label.Set(&v)
}

// SetLabelNil sets the value for Label to be an explicit nil
func (o *ClaimsIdentity) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *ClaimsIdentity) UnsetLabel() {
	o.Label.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClaimsIdentity) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClaimsIdentity) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ClaimsIdentity) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ClaimsIdentity) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *ClaimsIdentity) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ClaimsIdentity) UnsetName() {
	o.Name.Unset()
}

// GetNameClaimType returns the NameClaimType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClaimsIdentity) GetNameClaimType() string {
	if o == nil || IsNil(o.NameClaimType.Get()) {
		var ret string
		return ret
	}
	return *o.NameClaimType.Get()
}

// GetNameClaimTypeOk returns a tuple with the NameClaimType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClaimsIdentity) GetNameClaimTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameClaimType.Get(), o.NameClaimType.IsSet()
}

// HasNameClaimType returns a boolean if a field has been set.
func (o *ClaimsIdentity) HasNameClaimType() bool {
	if o != nil && o.NameClaimType.IsSet() {
		return true
	}

	return false
}

// SetNameClaimType gets a reference to the given NullableString and assigns it to the NameClaimType field.
func (o *ClaimsIdentity) SetNameClaimType(v string) {
	o.NameClaimType.Set(&v)
}

// SetNameClaimTypeNil sets the value for NameClaimType to be an explicit nil
func (o *ClaimsIdentity) SetNameClaimTypeNil() {
	o.NameClaimType.Set(nil)
}

// UnsetNameClaimType ensures that no value is present for NameClaimType, not even an explicit nil
func (o *ClaimsIdentity) UnsetNameClaimType() {
	o.NameClaimType.Unset()
}

// GetRoleClaimType returns the RoleClaimType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClaimsIdentity) GetRoleClaimType() string {
	if o == nil || IsNil(o.RoleClaimType.Get()) {
		var ret string
		return ret
	}
	return *o.RoleClaimType.Get()
}

// GetRoleClaimTypeOk returns a tuple with the RoleClaimType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClaimsIdentity) GetRoleClaimTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoleClaimType.Get(), o.RoleClaimType.IsSet()
}

// HasRoleClaimType returns a boolean if a field has been set.
func (o *ClaimsIdentity) HasRoleClaimType() bool {
	if o != nil && o.RoleClaimType.IsSet() {
		return true
	}

	return false
}

// SetRoleClaimType gets a reference to the given NullableString and assigns it to the RoleClaimType field.
func (o *ClaimsIdentity) SetRoleClaimType(v string) {
	o.RoleClaimType.Set(&v)
}

// SetRoleClaimTypeNil sets the value for RoleClaimType to be an explicit nil
func (o *ClaimsIdentity) SetRoleClaimTypeNil() {
	o.RoleClaimType.Set(nil)
}

// UnsetRoleClaimType ensures that no value is present for RoleClaimType, not even an explicit nil
func (o *ClaimsIdentity) UnsetRoleClaimType() {
	o.RoleClaimType.Unset()
}

func (o ClaimsIdentity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimsIdentity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthenticationType.IsSet() {
		toSerialize["authenticationType"] = o.AuthenticationType.Get()
	}
	if !IsNil(o.IsAuthenticated) {
		toSerialize["isAuthenticated"] = o.IsAuthenticated
	}
	if !IsNil(o.Actor) {
		toSerialize["actor"] = o.Actor
	}
	if o.BootstrapContext != nil {
		toSerialize["bootstrapContext"] = o.BootstrapContext
	}
	if o.Claims != nil {
		toSerialize["claims"] = o.Claims
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NameClaimType.IsSet() {
		toSerialize["nameClaimType"] = o.NameClaimType.Get()
	}
	if o.RoleClaimType.IsSet() {
		toSerialize["roleClaimType"] = o.RoleClaimType.Get()
	}
	return toSerialize, nil
}

type NullableClaimsIdentity struct {
	value *ClaimsIdentity
	isSet bool
}

func (v NullableClaimsIdentity) Get() *ClaimsIdentity {
	return v.value
}

func (v *NullableClaimsIdentity) Set(val *ClaimsIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimsIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimsIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimsIdentity(val *ClaimsIdentity) *NullableClaimsIdentity {
	return &NullableClaimsIdentity{value: val, isSet: true}
}

func (v NullableClaimsIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimsIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
