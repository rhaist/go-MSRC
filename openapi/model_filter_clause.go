/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilterClause type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterClause{}

// FilterClause struct for FilterClause
type FilterClause struct {
	Expression    *SingleValueNode   `json:"expression,omitempty"`
	RangeVariable *RangeVariable     `json:"rangeVariable,omitempty"`
	ItemType      *IEdmTypeReference `json:"itemType,omitempty"`
}

// NewFilterClause instantiates a new FilterClause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterClause() *FilterClause {
	this := FilterClause{}
	return &this
}

// NewFilterClauseWithDefaults instantiates a new FilterClause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterClauseWithDefaults() *FilterClause {
	this := FilterClause{}
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *FilterClause) GetExpression() SingleValueNode {
	if o == nil || IsNil(o.Expression) {
		var ret SingleValueNode
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterClause) GetExpressionOk() (*SingleValueNode, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *FilterClause) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given SingleValueNode and assigns it to the Expression field.
func (o *FilterClause) SetExpression(v SingleValueNode) {
	o.Expression = &v
}

// GetRangeVariable returns the RangeVariable field value if set, zero value otherwise.
func (o *FilterClause) GetRangeVariable() RangeVariable {
	if o == nil || IsNil(o.RangeVariable) {
		var ret RangeVariable
		return ret
	}
	return *o.RangeVariable
}

// GetRangeVariableOk returns a tuple with the RangeVariable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterClause) GetRangeVariableOk() (*RangeVariable, bool) {
	if o == nil || IsNil(o.RangeVariable) {
		return nil, false
	}
	return o.RangeVariable, true
}

// HasRangeVariable returns a boolean if a field has been set.
func (o *FilterClause) HasRangeVariable() bool {
	if o != nil && !IsNil(o.RangeVariable) {
		return true
	}

	return false
}

// SetRangeVariable gets a reference to the given RangeVariable and assigns it to the RangeVariable field.
func (o *FilterClause) SetRangeVariable(v RangeVariable) {
	o.RangeVariable = &v
}

// GetItemType returns the ItemType field value if set, zero value otherwise.
func (o *FilterClause) GetItemType() IEdmTypeReference {
	if o == nil || IsNil(o.ItemType) {
		var ret IEdmTypeReference
		return ret
	}
	return *o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterClause) GetItemTypeOk() (*IEdmTypeReference, bool) {
	if o == nil || IsNil(o.ItemType) {
		return nil, false
	}
	return o.ItemType, true
}

// HasItemType returns a boolean if a field has been set.
func (o *FilterClause) HasItemType() bool {
	if o != nil && !IsNil(o.ItemType) {
		return true
	}

	return false
}

// SetItemType gets a reference to the given IEdmTypeReference and assigns it to the ItemType field.
func (o *FilterClause) SetItemType(v IEdmTypeReference) {
	o.ItemType = &v
}

func (o FilterClause) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterClause) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.RangeVariable) {
		toSerialize["rangeVariable"] = o.RangeVariable
	}
	if !IsNil(o.ItemType) {
		toSerialize["itemType"] = o.ItemType
	}
	return toSerialize, nil
}

type NullableFilterClause struct {
	value *FilterClause
	isSet bool
}

func (v NullableFilterClause) Get() *FilterClause {
	return v.value
}

func (v *NullableFilterClause) Set(val *FilterClause) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterClause) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterClause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterClause(val *FilterClause) *NullableFilterClause {
	return &NullableFilterClause{value: val, isSet: true}
}

func (v NullableFilterClause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterClause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
