/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Stream type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stream{}

// Stream struct for Stream
type Stream struct {
	CanRead      *bool  `json:"canRead,omitempty"`
	CanWrite     *bool  `json:"canWrite,omitempty"`
	CanSeek      *bool  `json:"canSeek,omitempty"`
	CanTimeout   *bool  `json:"canTimeout,omitempty"`
	Length       *int64 `json:"length,omitempty"`
	Position     *int64 `json:"position,omitempty"`
	ReadTimeout  *int32 `json:"readTimeout,omitempty"`
	WriteTimeout *int32 `json:"writeTimeout,omitempty"`
}

// NewStream instantiates a new Stream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStream() *Stream {
	this := Stream{}
	return &this
}

// NewStreamWithDefaults instantiates a new Stream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamWithDefaults() *Stream {
	this := Stream{}
	return &this
}

// GetCanRead returns the CanRead field value if set, zero value otherwise.
func (o *Stream) GetCanRead() bool {
	if o == nil || IsNil(o.CanRead) {
		var ret bool
		return ret
	}
	return *o.CanRead
}

// GetCanReadOk returns a tuple with the CanRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetCanReadOk() (*bool, bool) {
	if o == nil || IsNil(o.CanRead) {
		return nil, false
	}
	return o.CanRead, true
}

// HasCanRead returns a boolean if a field has been set.
func (o *Stream) HasCanRead() bool {
	if o != nil && !IsNil(o.CanRead) {
		return true
	}

	return false
}

// SetCanRead gets a reference to the given bool and assigns it to the CanRead field.
func (o *Stream) SetCanRead(v bool) {
	o.CanRead = &v
}

// GetCanWrite returns the CanWrite field value if set, zero value otherwise.
func (o *Stream) GetCanWrite() bool {
	if o == nil || IsNil(o.CanWrite) {
		var ret bool
		return ret
	}
	return *o.CanWrite
}

// GetCanWriteOk returns a tuple with the CanWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetCanWriteOk() (*bool, bool) {
	if o == nil || IsNil(o.CanWrite) {
		return nil, false
	}
	return o.CanWrite, true
}

// HasCanWrite returns a boolean if a field has been set.
func (o *Stream) HasCanWrite() bool {
	if o != nil && !IsNil(o.CanWrite) {
		return true
	}

	return false
}

// SetCanWrite gets a reference to the given bool and assigns it to the CanWrite field.
func (o *Stream) SetCanWrite(v bool) {
	o.CanWrite = &v
}

// GetCanSeek returns the CanSeek field value if set, zero value otherwise.
func (o *Stream) GetCanSeek() bool {
	if o == nil || IsNil(o.CanSeek) {
		var ret bool
		return ret
	}
	return *o.CanSeek
}

// GetCanSeekOk returns a tuple with the CanSeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetCanSeekOk() (*bool, bool) {
	if o == nil || IsNil(o.CanSeek) {
		return nil, false
	}
	return o.CanSeek, true
}

// HasCanSeek returns a boolean if a field has been set.
func (o *Stream) HasCanSeek() bool {
	if o != nil && !IsNil(o.CanSeek) {
		return true
	}

	return false
}

// SetCanSeek gets a reference to the given bool and assigns it to the CanSeek field.
func (o *Stream) SetCanSeek(v bool) {
	o.CanSeek = &v
}

// GetCanTimeout returns the CanTimeout field value if set, zero value otherwise.
func (o *Stream) GetCanTimeout() bool {
	if o == nil || IsNil(o.CanTimeout) {
		var ret bool
		return ret
	}
	return *o.CanTimeout
}

// GetCanTimeoutOk returns a tuple with the CanTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetCanTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.CanTimeout) {
		return nil, false
	}
	return o.CanTimeout, true
}

// HasCanTimeout returns a boolean if a field has been set.
func (o *Stream) HasCanTimeout() bool {
	if o != nil && !IsNil(o.CanTimeout) {
		return true
	}

	return false
}

// SetCanTimeout gets a reference to the given bool and assigns it to the CanTimeout field.
func (o *Stream) SetCanTimeout(v bool) {
	o.CanTimeout = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *Stream) GetLength() int64 {
	if o == nil || IsNil(o.Length) {
		var ret int64
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *Stream) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int64 and assigns it to the Length field.
func (o *Stream) SetLength(v int64) {
	o.Length = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *Stream) GetPosition() int64 {
	if o == nil || IsNil(o.Position) {
		var ret int64
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetPositionOk() (*int64, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *Stream) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int64 and assigns it to the Position field.
func (o *Stream) SetPosition(v int64) {
	o.Position = &v
}

// GetReadTimeout returns the ReadTimeout field value if set, zero value otherwise.
func (o *Stream) GetReadTimeout() int32 {
	if o == nil || IsNil(o.ReadTimeout) {
		var ret int32
		return ret
	}
	return *o.ReadTimeout
}

// GetReadTimeoutOk returns a tuple with the ReadTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetReadTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.ReadTimeout) {
		return nil, false
	}
	return o.ReadTimeout, true
}

// HasReadTimeout returns a boolean if a field has been set.
func (o *Stream) HasReadTimeout() bool {
	if o != nil && !IsNil(o.ReadTimeout) {
		return true
	}

	return false
}

// SetReadTimeout gets a reference to the given int32 and assigns it to the ReadTimeout field.
func (o *Stream) SetReadTimeout(v int32) {
	o.ReadTimeout = &v
}

// GetWriteTimeout returns the WriteTimeout field value if set, zero value otherwise.
func (o *Stream) GetWriteTimeout() int32 {
	if o == nil || IsNil(o.WriteTimeout) {
		var ret int32
		return ret
	}
	return *o.WriteTimeout
}

// GetWriteTimeoutOk returns a tuple with the WriteTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetWriteTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.WriteTimeout) {
		return nil, false
	}
	return o.WriteTimeout, true
}

// HasWriteTimeout returns a boolean if a field has been set.
func (o *Stream) HasWriteTimeout() bool {
	if o != nil && !IsNil(o.WriteTimeout) {
		return true
	}

	return false
}

// SetWriteTimeout gets a reference to the given int32 and assigns it to the WriteTimeout field.
func (o *Stream) SetWriteTimeout(v int32) {
	o.WriteTimeout = &v
}

func (o Stream) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stream) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanRead) {
		toSerialize["canRead"] = o.CanRead
	}
	if !IsNil(o.CanWrite) {
		toSerialize["canWrite"] = o.CanWrite
	}
	if !IsNil(o.CanSeek) {
		toSerialize["canSeek"] = o.CanSeek
	}
	if !IsNil(o.CanTimeout) {
		toSerialize["canTimeout"] = o.CanTimeout
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.ReadTimeout) {
		toSerialize["readTimeout"] = o.ReadTimeout
	}
	if !IsNil(o.WriteTimeout) {
		toSerialize["writeTimeout"] = o.WriteTimeout
	}
	return toSerialize, nil
}

type NullableStream struct {
	value *Stream
	isSet bool
}

func (v NullableStream) Get() *Stream {
	return v.value
}

func (v *NullableStream) Set(val *Stream) {
	v.value = val
	v.isSet = true
}

func (v NullableStream) IsSet() bool {
	return v.isSet
}

func (v *NullableStream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStream(val *Stream) *NullableStream {
	return &NullableStream{value: val, isSet: true}
}

func (v NullableStream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
