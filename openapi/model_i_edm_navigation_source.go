/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IEdmNavigationSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IEdmNavigationSource{}

// IEdmNavigationSource struct for IEdmNavigationSource
type IEdmNavigationSource struct {
	NavigationPropertyBindings []IEdmNavigationPropertyBinding `json:"navigationPropertyBindings,omitempty"`
	Path                       *IEdmPathExpression             `json:"path,omitempty"`
	Type                       *IEdmType                       `json:"type,omitempty"`
	Name                       NullableString                  `json:"name,omitempty"`
}

// NewIEdmNavigationSource instantiates a new IEdmNavigationSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIEdmNavigationSource() *IEdmNavigationSource {
	this := IEdmNavigationSource{}
	return &this
}

// NewIEdmNavigationSourceWithDefaults instantiates a new IEdmNavigationSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIEdmNavigationSourceWithDefaults() *IEdmNavigationSource {
	this := IEdmNavigationSource{}
	return &this
}

// GetNavigationPropertyBindings returns the NavigationPropertyBindings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IEdmNavigationSource) GetNavigationPropertyBindings() []IEdmNavigationPropertyBinding {
	if o == nil {
		var ret []IEdmNavigationPropertyBinding
		return ret
	}
	return o.NavigationPropertyBindings
}

// GetNavigationPropertyBindingsOk returns a tuple with the NavigationPropertyBindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IEdmNavigationSource) GetNavigationPropertyBindingsOk() ([]IEdmNavigationPropertyBinding, bool) {
	if o == nil || IsNil(o.NavigationPropertyBindings) {
		return nil, false
	}
	return o.NavigationPropertyBindings, true
}

// HasNavigationPropertyBindings returns a boolean if a field has been set.
func (o *IEdmNavigationSource) HasNavigationPropertyBindings() bool {
	if o != nil && !IsNil(o.NavigationPropertyBindings) {
		return true
	}

	return false
}

// SetNavigationPropertyBindings gets a reference to the given []IEdmNavigationPropertyBinding and assigns it to the NavigationPropertyBindings field.
func (o *IEdmNavigationSource) SetNavigationPropertyBindings(v []IEdmNavigationPropertyBinding) {
	o.NavigationPropertyBindings = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *IEdmNavigationSource) GetPath() IEdmPathExpression {
	if o == nil || IsNil(o.Path) {
		var ret IEdmPathExpression
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEdmNavigationSource) GetPathOk() (*IEdmPathExpression, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *IEdmNavigationSource) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given IEdmPathExpression and assigns it to the Path field.
func (o *IEdmNavigationSource) SetPath(v IEdmPathExpression) {
	o.Path = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IEdmNavigationSource) GetType() IEdmType {
	if o == nil || IsNil(o.Type) {
		var ret IEdmType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEdmNavigationSource) GetTypeOk() (*IEdmType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IEdmNavigationSource) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given IEdmType and assigns it to the Type field.
func (o *IEdmNavigationSource) SetType(v IEdmType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IEdmNavigationSource) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IEdmNavigationSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *IEdmNavigationSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *IEdmNavigationSource) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *IEdmNavigationSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *IEdmNavigationSource) UnsetName() {
	o.Name.Unset()
}

func (o IEdmNavigationSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IEdmNavigationSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NavigationPropertyBindings != nil {
		toSerialize["navigationPropertyBindings"] = o.NavigationPropertyBindings
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

type NullableIEdmNavigationSource struct {
	value *IEdmNavigationSource
	isSet bool
}

func (v NullableIEdmNavigationSource) Get() *IEdmNavigationSource {
	return v.value
}

func (v *NullableIEdmNavigationSource) Set(val *IEdmNavigationSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIEdmNavigationSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIEdmNavigationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIEdmNavigationSource(val *IEdmNavigationSource) *NullableIEdmNavigationSource {
	return &NullableIEdmNavigationSource{value: val, isSet: true}
}

func (v NullableIEdmNavigationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIEdmNavigationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
