/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EventAttributes the model 'EventAttributes'
type EventAttributes string

// List of EventAttributes
const (
	NONE            EventAttributes = "None"
	SPECIAL_NAME    EventAttributes = "SpecialName"
	RT_SPECIAL_NAME EventAttributes = "RTSpecialName"
)

// All allowed values of EventAttributes enum
var AllowedEventAttributesEnumValues = []EventAttributes{
	"None",
	"SpecialName",
	"RTSpecialName",
}

func (v *EventAttributes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventAttributes(value)
	for _, existing := range AllowedEventAttributesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventAttributes", value)
}

// NewEventAttributesFromValue returns a pointer to a valid EventAttributes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventAttributesFromValue(v string) (*EventAttributes, error) {
	ev := EventAttributes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventAttributes: valid values are %v", v, AllowedEventAttributesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventAttributes) IsValid() bool {
	for _, existing := range AllowedEventAttributesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventAttributes value
func (v EventAttributes) Ptr() *EventAttributes {
	return &v
}

type NullableEventAttributes struct {
	value *EventAttributes
	isSet bool
}

func (v NullableEventAttributes) Get() *EventAttributes {
	return v.value
}

func (v *NullableEventAttributes) Set(val *EventAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableEventAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableEventAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventAttributes(val *EventAttributes) *NullableEventAttributes {
	return &NullableEventAttributes{value: val, isSet: true}
}

func (v NullableEventAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
