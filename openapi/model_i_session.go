/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ISession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ISession{}

// ISession struct for ISession
type ISession struct {
	IsAvailable *bool          `json:"isAvailable,omitempty"`
	Id          NullableString `json:"id,omitempty"`
	Keys        []string       `json:"keys,omitempty"`
}

// NewISession instantiates a new ISession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewISession() *ISession {
	this := ISession{}
	return &this
}

// NewISessionWithDefaults instantiates a new ISession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewISessionWithDefaults() *ISession {
	this := ISession{}
	return &this
}

// GetIsAvailable returns the IsAvailable field value if set, zero value otherwise.
func (o *ISession) GetIsAvailable() bool {
	if o == nil || IsNil(o.IsAvailable) {
		var ret bool
		return ret
	}
	return *o.IsAvailable
}

// GetIsAvailableOk returns a tuple with the IsAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ISession) GetIsAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAvailable) {
		return nil, false
	}
	return o.IsAvailable, true
}

// HasIsAvailable returns a boolean if a field has been set.
func (o *ISession) HasIsAvailable() bool {
	if o != nil && !IsNil(o.IsAvailable) {
		return true
	}

	return false
}

// SetIsAvailable gets a reference to the given bool and assigns it to the IsAvailable field.
func (o *ISession) SetIsAvailable(v bool) {
	o.IsAvailable = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ISession) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ISession) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ISession) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ISession) SetId(v string) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *ISession) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ISession) UnsetId() {
	o.Id.Unset()
}

// GetKeys returns the Keys field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ISession) GetKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ISession) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *ISession) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *ISession) SetKeys(v []string) {
	o.Keys = v
}

func (o ISession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ISession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsAvailable) {
		toSerialize["isAvailable"] = o.IsAvailable
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Keys != nil {
		toSerialize["keys"] = o.Keys
	}
	return toSerialize, nil
}

type NullableISession struct {
	value *ISession
	isSet bool
}

func (v NullableISession) Get() *ISession {
	return v.value
}

func (v *NullableISession) Set(val *ISession) {
	v.value = val
	v.isSet = true
}

func (v NullableISession) IsSet() bool {
	return v.isSet
}

func (v *NullableISession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableISession(val *ISession) *NullableISession {
	return &NullableISession{value: val, isSet: true}
}

func (v NullableISession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableISession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
