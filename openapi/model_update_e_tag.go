/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateETag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateETag{}

// UpdateETag struct for UpdateETag
type UpdateETag struct {
	IsWellFormed  *bool `json:"isWellFormed,omitempty"`
	EntityType    *Type `json:"entityType,omitempty"`
	IsAny         *bool `json:"isAny,omitempty"`
	IsIfNoneMatch *bool `json:"isIfNoneMatch,omitempty"`
}

// NewUpdateETag instantiates a new UpdateETag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateETag() *UpdateETag {
	this := UpdateETag{}
	return &this
}

// NewUpdateETagWithDefaults instantiates a new UpdateETag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateETagWithDefaults() *UpdateETag {
	this := UpdateETag{}
	return &this
}

// GetIsWellFormed returns the IsWellFormed field value if set, zero value otherwise.
func (o *UpdateETag) GetIsWellFormed() bool {
	if o == nil || IsNil(o.IsWellFormed) {
		var ret bool
		return ret
	}
	return *o.IsWellFormed
}

// GetIsWellFormedOk returns a tuple with the IsWellFormed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateETag) GetIsWellFormedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWellFormed) {
		return nil, false
	}
	return o.IsWellFormed, true
}

// HasIsWellFormed returns a boolean if a field has been set.
func (o *UpdateETag) HasIsWellFormed() bool {
	if o != nil && !IsNil(o.IsWellFormed) {
		return true
	}

	return false
}

// SetIsWellFormed gets a reference to the given bool and assigns it to the IsWellFormed field.
func (o *UpdateETag) SetIsWellFormed(v bool) {
	o.IsWellFormed = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *UpdateETag) GetEntityType() Type {
	if o == nil || IsNil(o.EntityType) {
		var ret Type
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateETag) GetEntityTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *UpdateETag) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given Type and assigns it to the EntityType field.
func (o *UpdateETag) SetEntityType(v Type) {
	o.EntityType = &v
}

// GetIsAny returns the IsAny field value if set, zero value otherwise.
func (o *UpdateETag) GetIsAny() bool {
	if o == nil || IsNil(o.IsAny) {
		var ret bool
		return ret
	}
	return *o.IsAny
}

// GetIsAnyOk returns a tuple with the IsAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateETag) GetIsAnyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAny) {
		return nil, false
	}
	return o.IsAny, true
}

// HasIsAny returns a boolean if a field has been set.
func (o *UpdateETag) HasIsAny() bool {
	if o != nil && !IsNil(o.IsAny) {
		return true
	}

	return false
}

// SetIsAny gets a reference to the given bool and assigns it to the IsAny field.
func (o *UpdateETag) SetIsAny(v bool) {
	o.IsAny = &v
}

// GetIsIfNoneMatch returns the IsIfNoneMatch field value if set, zero value otherwise.
func (o *UpdateETag) GetIsIfNoneMatch() bool {
	if o == nil || IsNil(o.IsIfNoneMatch) {
		var ret bool
		return ret
	}
	return *o.IsIfNoneMatch
}

// GetIsIfNoneMatchOk returns a tuple with the IsIfNoneMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateETag) GetIsIfNoneMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIfNoneMatch) {
		return nil, false
	}
	return o.IsIfNoneMatch, true
}

// HasIsIfNoneMatch returns a boolean if a field has been set.
func (o *UpdateETag) HasIsIfNoneMatch() bool {
	if o != nil && !IsNil(o.IsIfNoneMatch) {
		return true
	}

	return false
}

// SetIsIfNoneMatch gets a reference to the given bool and assigns it to the IsIfNoneMatch field.
func (o *UpdateETag) SetIsIfNoneMatch(v bool) {
	o.IsIfNoneMatch = &v
}

func (o UpdateETag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateETag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsWellFormed) {
		toSerialize["isWellFormed"] = o.IsWellFormed
	}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.IsAny) {
		toSerialize["isAny"] = o.IsAny
	}
	if !IsNil(o.IsIfNoneMatch) {
		toSerialize["isIfNoneMatch"] = o.IsIfNoneMatch
	}
	return toSerialize, nil
}

type NullableUpdateETag struct {
	value *UpdateETag
	isSet bool
}

func (v NullableUpdateETag) Get() *UpdateETag {
	return v.value
}

func (v *NullableUpdateETag) Set(val *UpdateETag) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateETag) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateETag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateETag(val *UpdateETag) *NullableUpdateETag {
	return &NullableUpdateETag{value: val, isSet: true}
}

func (v NullableUpdateETag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateETag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
