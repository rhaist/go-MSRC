/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FieldAttributes the model 'FieldAttributes'
type FieldAttributes string

// List of FieldAttributes
const (
	PRIVATE_SCOPE     FieldAttributes = "PrivateScope"
	PRIVATE           FieldAttributes = "Private"
	FAM_AND_ASSEM     FieldAttributes = "FamANDAssem"
	ASSEMBLY          FieldAttributes = "Assembly"
	FAMILY            FieldAttributes = "Family"
	FAM_OR_ASSEM      FieldAttributes = "FamORAssem"
	PUBLIC            FieldAttributes = "Public"
	FIELD_ACCESS_MASK FieldAttributes = "FieldAccessMask"
	STATIC            FieldAttributes = "Static"
	INIT_ONLY         FieldAttributes = "InitOnly"
	LITERAL           FieldAttributes = "Literal"
	NOT_SERIALIZED    FieldAttributes = "NotSerialized"
	HAS_FIELD_RVA     FieldAttributes = "HasFieldRVA"
	SPECIAL_NAME      FieldAttributes = "SpecialName"
	RT_SPECIAL_NAME   FieldAttributes = "RTSpecialName"
	HAS_FIELD_MARSHAL FieldAttributes = "HasFieldMarshal"
	PINVOKE_IMPL      FieldAttributes = "PinvokeImpl"
	HAS_DEFAULT       FieldAttributes = "HasDefault"
	RESERVED_MASK     FieldAttributes = "ReservedMask"
)

// All allowed values of FieldAttributes enum
var AllowedFieldAttributesEnumValues = []FieldAttributes{
	"PrivateScope",
	"Private",
	"FamANDAssem",
	"Assembly",
	"Family",
	"FamORAssem",
	"Public",
	"FieldAccessMask",
	"Static",
	"InitOnly",
	"Literal",
	"NotSerialized",
	"HasFieldRVA",
	"SpecialName",
	"RTSpecialName",
	"HasFieldMarshal",
	"PinvokeImpl",
	"HasDefault",
	"ReservedMask",
}

func (v *FieldAttributes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldAttributes(value)
	for _, existing := range AllowedFieldAttributesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldAttributes", value)
}

// NewFieldAttributesFromValue returns a pointer to a valid FieldAttributes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldAttributesFromValue(v string) (*FieldAttributes, error) {
	ev := FieldAttributes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldAttributes: valid values are %v", v, AllowedFieldAttributesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldAttributes) IsValid() bool {
	for _, existing := range AllowedFieldAttributesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FieldAttributes value
func (v FieldAttributes) Ptr() *FieldAttributes {
	return &v
}

type NullableFieldAttributes struct {
	value *FieldAttributes
	isSet bool
}

func (v NullableFieldAttributes) Get() *FieldAttributes {
	return v.value
}

func (v *NullableFieldAttributes) Set(val *FieldAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldAttributes(val *FieldAttributes) *NullableFieldAttributes {
	return &NullableFieldAttributes{value: val, isSet: true}
}

func (v NullableFieldAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
