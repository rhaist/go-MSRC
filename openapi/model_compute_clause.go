/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ComputeClause type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputeClause{}

// ComputeClause struct for ComputeClause
type ComputeClause struct {
	ComputedItems []ComputeExpression `json:"computedItems,omitempty"`
}

// NewComputeClause instantiates a new ComputeClause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputeClause() *ComputeClause {
	this := ComputeClause{}
	return &this
}

// NewComputeClauseWithDefaults instantiates a new ComputeClause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputeClauseWithDefaults() *ComputeClause {
	this := ComputeClause{}
	return &this
}

// GetComputedItems returns the ComputedItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeClause) GetComputedItems() []ComputeExpression {
	if o == nil {
		var ret []ComputeExpression
		return ret
	}
	return o.ComputedItems
}

// GetComputedItemsOk returns a tuple with the ComputedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeClause) GetComputedItemsOk() ([]ComputeExpression, bool) {
	if o == nil || IsNil(o.ComputedItems) {
		return nil, false
	}
	return o.ComputedItems, true
}

// HasComputedItems returns a boolean if a field has been set.
func (o *ComputeClause) HasComputedItems() bool {
	if o != nil && !IsNil(o.ComputedItems) {
		return true
	}

	return false
}

// SetComputedItems gets a reference to the given []ComputeExpression and assigns it to the ComputedItems field.
func (o *ComputeClause) SetComputedItems(v []ComputeExpression) {
	o.ComputedItems = v
}

func (o ComputeClause) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputeClause) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ComputedItems != nil {
		toSerialize["computedItems"] = o.ComputedItems
	}
	return toSerialize, nil
}

type NullableComputeClause struct {
	value *ComputeClause
	isSet bool
}

func (v NullableComputeClause) Get() *ComputeClause {
	return v.value
}

func (v *NullableComputeClause) Set(val *ComputeClause) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeClause) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeClause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeClause(val *ComputeClause) *NullableComputeClause {
	return &NullableComputeClause{value: val, isSet: true}
}

func (v NullableComputeClause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeClause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
