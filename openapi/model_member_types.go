/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MemberTypes the model 'MemberTypes'
type MemberTypes string

// List of MemberTypes
const (
	CONSTRUCTOR MemberTypes = "Constructor"
	EVENT       MemberTypes = "Event"
	FIELD       MemberTypes = "Field"
	METHOD      MemberTypes = "Method"
	PROPERTY    MemberTypes = "Property"
	TYPE_INFO   MemberTypes = "TypeInfo"
	CUSTOM      MemberTypes = "Custom"
	NESTED_TYPE MemberTypes = "NestedType"
	ALL         MemberTypes = "All"
)

// All allowed values of MemberTypes enum
var AllowedMemberTypesEnumValues = []MemberTypes{
	"Constructor",
	"Event",
	"Field",
	"Method",
	"Property",
	"TypeInfo",
	"Custom",
	"NestedType",
	"All",
}

func (v *MemberTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MemberTypes(value)
	for _, existing := range AllowedMemberTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MemberTypes", value)
}

// NewMemberTypesFromValue returns a pointer to a valid MemberTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemberTypesFromValue(v string) (*MemberTypes, error) {
	ev := MemberTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MemberTypes: valid values are %v", v, AllowedMemberTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemberTypes) IsValid() bool {
	for _, existing := range AllowedMemberTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MemberTypes value
func (v MemberTypes) Ptr() *MemberTypes {
	return &v
}

type NullableMemberTypes struct {
	value *MemberTypes
	isSet bool
}

func (v NullableMemberTypes) Get() *MemberTypes {
	return v.value
}

func (v *NullableMemberTypes) Set(val *MemberTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberTypes(val *MemberTypes) *NullableMemberTypes {
	return &NullableMemberTypes{value: val, isSet: true}
}

func (v NullableMemberTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
