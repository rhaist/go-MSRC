/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IEdmTypeReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IEdmTypeReference{}

// IEdmTypeReference struct for IEdmTypeReference
type IEdmTypeReference struct {
	IsNullable *bool     `json:"isNullable,omitempty"`
	Definition *IEdmType `json:"definition,omitempty"`
}

// NewIEdmTypeReference instantiates a new IEdmTypeReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIEdmTypeReference() *IEdmTypeReference {
	this := IEdmTypeReference{}
	return &this
}

// NewIEdmTypeReferenceWithDefaults instantiates a new IEdmTypeReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIEdmTypeReferenceWithDefaults() *IEdmTypeReference {
	this := IEdmTypeReference{}
	return &this
}

// GetIsNullable returns the IsNullable field value if set, zero value otherwise.
func (o *IEdmTypeReference) GetIsNullable() bool {
	if o == nil || IsNil(o.IsNullable) {
		var ret bool
		return ret
	}
	return *o.IsNullable
}

// GetIsNullableOk returns a tuple with the IsNullable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEdmTypeReference) GetIsNullableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNullable) {
		return nil, false
	}
	return o.IsNullable, true
}

// HasIsNullable returns a boolean if a field has been set.
func (o *IEdmTypeReference) HasIsNullable() bool {
	if o != nil && !IsNil(o.IsNullable) {
		return true
	}

	return false
}

// SetIsNullable gets a reference to the given bool and assigns it to the IsNullable field.
func (o *IEdmTypeReference) SetIsNullable(v bool) {
	o.IsNullable = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *IEdmTypeReference) GetDefinition() IEdmType {
	if o == nil || IsNil(o.Definition) {
		var ret IEdmType
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEdmTypeReference) GetDefinitionOk() (*IEdmType, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *IEdmTypeReference) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given IEdmType and assigns it to the Definition field.
func (o *IEdmTypeReference) SetDefinition(v IEdmType) {
	o.Definition = &v
}

func (o IEdmTypeReference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IEdmTypeReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsNullable) {
		toSerialize["isNullable"] = o.IsNullable
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	return toSerialize, nil
}

type NullableIEdmTypeReference struct {
	value *IEdmTypeReference
	isSet bool
}

func (v NullableIEdmTypeReference) Get() *IEdmTypeReference {
	return v.value
}

func (v *NullableIEdmTypeReference) Set(val *IEdmTypeReference) {
	v.value = val
	v.isSet = true
}

func (v NullableIEdmTypeReference) IsSet() bool {
	return v.isSet
}

func (v *NullableIEdmTypeReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIEdmTypeReference(val *IEdmTypeReference) *NullableIEdmTypeReference {
	return &NullableIEdmTypeReference{value: val, isSet: true}
}

func (v NullableIEdmTypeReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIEdmTypeReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
