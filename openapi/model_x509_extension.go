/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the X509Extension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &X509Extension{}

// X509Extension struct for X509Extension
type X509Extension struct {
	Oid      *Oid           `json:"oid,omitempty"`
	RawData  NullableString `json:"rawData,omitempty"`
	Critical *bool          `json:"critical,omitempty"`
}

// NewX509Extension instantiates a new X509Extension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewX509Extension() *X509Extension {
	this := X509Extension{}
	return &this
}

// NewX509ExtensionWithDefaults instantiates a new X509Extension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewX509ExtensionWithDefaults() *X509Extension {
	this := X509Extension{}
	return &this
}

// GetOid returns the Oid field value if set, zero value otherwise.
func (o *X509Extension) GetOid() Oid {
	if o == nil || IsNil(o.Oid) {
		var ret Oid
		return ret
	}
	return *o.Oid
}

// GetOidOk returns a tuple with the Oid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *X509Extension) GetOidOk() (*Oid, bool) {
	if o == nil || IsNil(o.Oid) {
		return nil, false
	}
	return o.Oid, true
}

// HasOid returns a boolean if a field has been set.
func (o *X509Extension) HasOid() bool {
	if o != nil && !IsNil(o.Oid) {
		return true
	}

	return false
}

// SetOid gets a reference to the given Oid and assigns it to the Oid field.
func (o *X509Extension) SetOid(v Oid) {
	o.Oid = &v
}

// GetRawData returns the RawData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *X509Extension) GetRawData() string {
	if o == nil || IsNil(o.RawData.Get()) {
		var ret string
		return ret
	}
	return *o.RawData.Get()
}

// GetRawDataOk returns a tuple with the RawData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *X509Extension) GetRawDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RawData.Get(), o.RawData.IsSet()
}

// HasRawData returns a boolean if a field has been set.
func (o *X509Extension) HasRawData() bool {
	if o != nil && o.RawData.IsSet() {
		return true
	}

	return false
}

// SetRawData gets a reference to the given NullableString and assigns it to the RawData field.
func (o *X509Extension) SetRawData(v string) {
	o.RawData.Set(&v)
}

// SetRawDataNil sets the value for RawData to be an explicit nil
func (o *X509Extension) SetRawDataNil() {
	o.RawData.Set(nil)
}

// UnsetRawData ensures that no value is present for RawData, not even an explicit nil
func (o *X509Extension) UnsetRawData() {
	o.RawData.Unset()
}

// GetCritical returns the Critical field value if set, zero value otherwise.
func (o *X509Extension) GetCritical() bool {
	if o == nil || IsNil(o.Critical) {
		var ret bool
		return ret
	}
	return *o.Critical
}

// GetCriticalOk returns a tuple with the Critical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *X509Extension) GetCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.Critical) {
		return nil, false
	}
	return o.Critical, true
}

// HasCritical returns a boolean if a field has been set.
func (o *X509Extension) HasCritical() bool {
	if o != nil && !IsNil(o.Critical) {
		return true
	}

	return false
}

// SetCritical gets a reference to the given bool and assigns it to the Critical field.
func (o *X509Extension) SetCritical(v bool) {
	o.Critical = &v
}

func (o X509Extension) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o X509Extension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Oid) {
		toSerialize["oid"] = o.Oid
	}
	if o.RawData.IsSet() {
		toSerialize["rawData"] = o.RawData.Get()
	}
	if !IsNil(o.Critical) {
		toSerialize["critical"] = o.Critical
	}
	return toSerialize, nil
}

type NullableX509Extension struct {
	value *X509Extension
	isSet bool
}

func (v NullableX509Extension) Get() *X509Extension {
	return v.value
}

func (v *NullableX509Extension) Set(val *X509Extension) {
	v.value = val
	v.isSet = true
}

func (v NullableX509Extension) IsSet() bool {
	return v.isSet
}

func (v *NullableX509Extension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableX509Extension(val *X509Extension) *NullableX509Extension {
	return &NullableX509Extension{value: val, isSet: true}
}

func (v NullableX509Extension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableX509Extension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
