/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FieldInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldInfo{}

// FieldInfo struct for FieldInfo
type FieldInfo struct {
	Name             NullableString        `json:"name,omitempty"`
	DeclaringType    *Type                 `json:"declaringType,omitempty"`
	ReflectedType    *Type                 `json:"reflectedType,omitempty"`
	Module           *Module               `json:"module,omitempty"`
	CustomAttributes []CustomAttributeData `json:"customAttributes,omitempty"`
	IsCollectible    *bool                 `json:"isCollectible,omitempty"`
	MetadataToken    *int32                `json:"metadataToken,omitempty"`
	MemberType       *MemberTypes          `json:"memberType,omitempty"`
	Attributes       *FieldAttributes      `json:"attributes,omitempty"`
	FieldType        *Type                 `json:"fieldType,omitempty"`
	IsInitOnly       *bool                 `json:"isInitOnly,omitempty"`
	IsLiteral        *bool                 `json:"isLiteral,omitempty"`
	// Deprecated
	IsNotSerialized        *bool               `json:"isNotSerialized,omitempty"`
	IsPinvokeImpl          *bool               `json:"isPinvokeImpl,omitempty"`
	IsSpecialName          *bool               `json:"isSpecialName,omitempty"`
	IsStatic               *bool               `json:"isStatic,omitempty"`
	IsAssembly             *bool               `json:"isAssembly,omitempty"`
	IsFamily               *bool               `json:"isFamily,omitempty"`
	IsFamilyAndAssembly    *bool               `json:"isFamilyAndAssembly,omitempty"`
	IsFamilyOrAssembly     *bool               `json:"isFamilyOrAssembly,omitempty"`
	IsPrivate              *bool               `json:"isPrivate,omitempty"`
	IsPublic               *bool               `json:"isPublic,omitempty"`
	IsSecurityCritical     *bool               `json:"isSecurityCritical,omitempty"`
	IsSecuritySafeCritical *bool               `json:"isSecuritySafeCritical,omitempty"`
	IsSecurityTransparent  *bool               `json:"isSecurityTransparent,omitempty"`
	FieldHandle            *RuntimeFieldHandle `json:"fieldHandle,omitempty"`
}

// NewFieldInfo instantiates a new FieldInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldInfo() *FieldInfo {
	this := FieldInfo{}
	return &this
}

// NewFieldInfoWithDefaults instantiates a new FieldInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldInfoWithDefaults() *FieldInfo {
	this := FieldInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *FieldInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *FieldInfo) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *FieldInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *FieldInfo) UnsetName() {
	o.Name.Unset()
}

// GetDeclaringType returns the DeclaringType field value if set, zero value otherwise.
func (o *FieldInfo) GetDeclaringType() Type {
	if o == nil || IsNil(o.DeclaringType) {
		var ret Type
		return ret
	}
	return *o.DeclaringType
}

// GetDeclaringTypeOk returns a tuple with the DeclaringType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetDeclaringTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.DeclaringType) {
		return nil, false
	}
	return o.DeclaringType, true
}

// HasDeclaringType returns a boolean if a field has been set.
func (o *FieldInfo) HasDeclaringType() bool {
	if o != nil && !IsNil(o.DeclaringType) {
		return true
	}

	return false
}

// SetDeclaringType gets a reference to the given Type and assigns it to the DeclaringType field.
func (o *FieldInfo) SetDeclaringType(v Type) {
	o.DeclaringType = &v
}

// GetReflectedType returns the ReflectedType field value if set, zero value otherwise.
func (o *FieldInfo) GetReflectedType() Type {
	if o == nil || IsNil(o.ReflectedType) {
		var ret Type
		return ret
	}
	return *o.ReflectedType
}

// GetReflectedTypeOk returns a tuple with the ReflectedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetReflectedTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.ReflectedType) {
		return nil, false
	}
	return o.ReflectedType, true
}

// HasReflectedType returns a boolean if a field has been set.
func (o *FieldInfo) HasReflectedType() bool {
	if o != nil && !IsNil(o.ReflectedType) {
		return true
	}

	return false
}

// SetReflectedType gets a reference to the given Type and assigns it to the ReflectedType field.
func (o *FieldInfo) SetReflectedType(v Type) {
	o.ReflectedType = &v
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *FieldInfo) GetModule() Module {
	if o == nil || IsNil(o.Module) {
		var ret Module
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetModuleOk() (*Module, bool) {
	if o == nil || IsNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *FieldInfo) HasModule() bool {
	if o != nil && !IsNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given Module and assigns it to the Module field.
func (o *FieldInfo) SetModule(v Module) {
	o.Module = &v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldInfo) GetCustomAttributes() []CustomAttributeData {
	if o == nil {
		var ret []CustomAttributeData
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldInfo) GetCustomAttributesOk() ([]CustomAttributeData, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *FieldInfo) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []CustomAttributeData and assigns it to the CustomAttributes field.
func (o *FieldInfo) SetCustomAttributes(v []CustomAttributeData) {
	o.CustomAttributes = v
}

// GetIsCollectible returns the IsCollectible field value if set, zero value otherwise.
func (o *FieldInfo) GetIsCollectible() bool {
	if o == nil || IsNil(o.IsCollectible) {
		var ret bool
		return ret
	}
	return *o.IsCollectible
}

// GetIsCollectibleOk returns a tuple with the IsCollectible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsCollectibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCollectible) {
		return nil, false
	}
	return o.IsCollectible, true
}

// HasIsCollectible returns a boolean if a field has been set.
func (o *FieldInfo) HasIsCollectible() bool {
	if o != nil && !IsNil(o.IsCollectible) {
		return true
	}

	return false
}

// SetIsCollectible gets a reference to the given bool and assigns it to the IsCollectible field.
func (o *FieldInfo) SetIsCollectible(v bool) {
	o.IsCollectible = &v
}

// GetMetadataToken returns the MetadataToken field value if set, zero value otherwise.
func (o *FieldInfo) GetMetadataToken() int32 {
	if o == nil || IsNil(o.MetadataToken) {
		var ret int32
		return ret
	}
	return *o.MetadataToken
}

// GetMetadataTokenOk returns a tuple with the MetadataToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetMetadataTokenOk() (*int32, bool) {
	if o == nil || IsNil(o.MetadataToken) {
		return nil, false
	}
	return o.MetadataToken, true
}

// HasMetadataToken returns a boolean if a field has been set.
func (o *FieldInfo) HasMetadataToken() bool {
	if o != nil && !IsNil(o.MetadataToken) {
		return true
	}

	return false
}

// SetMetadataToken gets a reference to the given int32 and assigns it to the MetadataToken field.
func (o *FieldInfo) SetMetadataToken(v int32) {
	o.MetadataToken = &v
}

// GetMemberType returns the MemberType field value if set, zero value otherwise.
func (o *FieldInfo) GetMemberType() MemberTypes {
	if o == nil || IsNil(o.MemberType) {
		var ret MemberTypes
		return ret
	}
	return *o.MemberType
}

// GetMemberTypeOk returns a tuple with the MemberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetMemberTypeOk() (*MemberTypes, bool) {
	if o == nil || IsNil(o.MemberType) {
		return nil, false
	}
	return o.MemberType, true
}

// HasMemberType returns a boolean if a field has been set.
func (o *FieldInfo) HasMemberType() bool {
	if o != nil && !IsNil(o.MemberType) {
		return true
	}

	return false
}

// SetMemberType gets a reference to the given MemberTypes and assigns it to the MemberType field.
func (o *FieldInfo) SetMemberType(v MemberTypes) {
	o.MemberType = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *FieldInfo) GetAttributes() FieldAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret FieldAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetAttributesOk() (*FieldAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *FieldInfo) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given FieldAttributes and assigns it to the Attributes field.
func (o *FieldInfo) SetAttributes(v FieldAttributes) {
	o.Attributes = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *FieldInfo) GetFieldType() Type {
	if o == nil || IsNil(o.FieldType) {
		var ret Type
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetFieldTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *FieldInfo) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given Type and assigns it to the FieldType field.
func (o *FieldInfo) SetFieldType(v Type) {
	o.FieldType = &v
}

// GetIsInitOnly returns the IsInitOnly field value if set, zero value otherwise.
func (o *FieldInfo) GetIsInitOnly() bool {
	if o == nil || IsNil(o.IsInitOnly) {
		var ret bool
		return ret
	}
	return *o.IsInitOnly
}

// GetIsInitOnlyOk returns a tuple with the IsInitOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsInitOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInitOnly) {
		return nil, false
	}
	return o.IsInitOnly, true
}

// HasIsInitOnly returns a boolean if a field has been set.
func (o *FieldInfo) HasIsInitOnly() bool {
	if o != nil && !IsNil(o.IsInitOnly) {
		return true
	}

	return false
}

// SetIsInitOnly gets a reference to the given bool and assigns it to the IsInitOnly field.
func (o *FieldInfo) SetIsInitOnly(v bool) {
	o.IsInitOnly = &v
}

// GetIsLiteral returns the IsLiteral field value if set, zero value otherwise.
func (o *FieldInfo) GetIsLiteral() bool {
	if o == nil || IsNil(o.IsLiteral) {
		var ret bool
		return ret
	}
	return *o.IsLiteral
}

// GetIsLiteralOk returns a tuple with the IsLiteral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsLiteralOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLiteral) {
		return nil, false
	}
	return o.IsLiteral, true
}

// HasIsLiteral returns a boolean if a field has been set.
func (o *FieldInfo) HasIsLiteral() bool {
	if o != nil && !IsNil(o.IsLiteral) {
		return true
	}

	return false
}

// SetIsLiteral gets a reference to the given bool and assigns it to the IsLiteral field.
func (o *FieldInfo) SetIsLiteral(v bool) {
	o.IsLiteral = &v
}

// GetIsNotSerialized returns the IsNotSerialized field value if set, zero value otherwise.
// Deprecated
func (o *FieldInfo) GetIsNotSerialized() bool {
	if o == nil || IsNil(o.IsNotSerialized) {
		var ret bool
		return ret
	}
	return *o.IsNotSerialized
}

// GetIsNotSerializedOk returns a tuple with the IsNotSerialized field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FieldInfo) GetIsNotSerializedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNotSerialized) {
		return nil, false
	}
	return o.IsNotSerialized, true
}

// HasIsNotSerialized returns a boolean if a field has been set.
func (o *FieldInfo) HasIsNotSerialized() bool {
	if o != nil && !IsNil(o.IsNotSerialized) {
		return true
	}

	return false
}

// SetIsNotSerialized gets a reference to the given bool and assigns it to the IsNotSerialized field.
// Deprecated
func (o *FieldInfo) SetIsNotSerialized(v bool) {
	o.IsNotSerialized = &v
}

// GetIsPinvokeImpl returns the IsPinvokeImpl field value if set, zero value otherwise.
func (o *FieldInfo) GetIsPinvokeImpl() bool {
	if o == nil || IsNil(o.IsPinvokeImpl) {
		var ret bool
		return ret
	}
	return *o.IsPinvokeImpl
}

// GetIsPinvokeImplOk returns a tuple with the IsPinvokeImpl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsPinvokeImplOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPinvokeImpl) {
		return nil, false
	}
	return o.IsPinvokeImpl, true
}

// HasIsPinvokeImpl returns a boolean if a field has been set.
func (o *FieldInfo) HasIsPinvokeImpl() bool {
	if o != nil && !IsNil(o.IsPinvokeImpl) {
		return true
	}

	return false
}

// SetIsPinvokeImpl gets a reference to the given bool and assigns it to the IsPinvokeImpl field.
func (o *FieldInfo) SetIsPinvokeImpl(v bool) {
	o.IsPinvokeImpl = &v
}

// GetIsSpecialName returns the IsSpecialName field value if set, zero value otherwise.
func (o *FieldInfo) GetIsSpecialName() bool {
	if o == nil || IsNil(o.IsSpecialName) {
		var ret bool
		return ret
	}
	return *o.IsSpecialName
}

// GetIsSpecialNameOk returns a tuple with the IsSpecialName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsSpecialNameOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSpecialName) {
		return nil, false
	}
	return o.IsSpecialName, true
}

// HasIsSpecialName returns a boolean if a field has been set.
func (o *FieldInfo) HasIsSpecialName() bool {
	if o != nil && !IsNil(o.IsSpecialName) {
		return true
	}

	return false
}

// SetIsSpecialName gets a reference to the given bool and assigns it to the IsSpecialName field.
func (o *FieldInfo) SetIsSpecialName(v bool) {
	o.IsSpecialName = &v
}

// GetIsStatic returns the IsStatic field value if set, zero value otherwise.
func (o *FieldInfo) GetIsStatic() bool {
	if o == nil || IsNil(o.IsStatic) {
		var ret bool
		return ret
	}
	return *o.IsStatic
}

// GetIsStaticOk returns a tuple with the IsStatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStatic) {
		return nil, false
	}
	return o.IsStatic, true
}

// HasIsStatic returns a boolean if a field has been set.
func (o *FieldInfo) HasIsStatic() bool {
	if o != nil && !IsNil(o.IsStatic) {
		return true
	}

	return false
}

// SetIsStatic gets a reference to the given bool and assigns it to the IsStatic field.
func (o *FieldInfo) SetIsStatic(v bool) {
	o.IsStatic = &v
}

// GetIsAssembly returns the IsAssembly field value if set, zero value otherwise.
func (o *FieldInfo) GetIsAssembly() bool {
	if o == nil || IsNil(o.IsAssembly) {
		var ret bool
		return ret
	}
	return *o.IsAssembly
}

// GetIsAssemblyOk returns a tuple with the IsAssembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsAssemblyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAssembly) {
		return nil, false
	}
	return o.IsAssembly, true
}

// HasIsAssembly returns a boolean if a field has been set.
func (o *FieldInfo) HasIsAssembly() bool {
	if o != nil && !IsNil(o.IsAssembly) {
		return true
	}

	return false
}

// SetIsAssembly gets a reference to the given bool and assigns it to the IsAssembly field.
func (o *FieldInfo) SetIsAssembly(v bool) {
	o.IsAssembly = &v
}

// GetIsFamily returns the IsFamily field value if set, zero value otherwise.
func (o *FieldInfo) GetIsFamily() bool {
	if o == nil || IsNil(o.IsFamily) {
		var ret bool
		return ret
	}
	return *o.IsFamily
}

// GetIsFamilyOk returns a tuple with the IsFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsFamilyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFamily) {
		return nil, false
	}
	return o.IsFamily, true
}

// HasIsFamily returns a boolean if a field has been set.
func (o *FieldInfo) HasIsFamily() bool {
	if o != nil && !IsNil(o.IsFamily) {
		return true
	}

	return false
}

// SetIsFamily gets a reference to the given bool and assigns it to the IsFamily field.
func (o *FieldInfo) SetIsFamily(v bool) {
	o.IsFamily = &v
}

// GetIsFamilyAndAssembly returns the IsFamilyAndAssembly field value if set, zero value otherwise.
func (o *FieldInfo) GetIsFamilyAndAssembly() bool {
	if o == nil || IsNil(o.IsFamilyAndAssembly) {
		var ret bool
		return ret
	}
	return *o.IsFamilyAndAssembly
}

// GetIsFamilyAndAssemblyOk returns a tuple with the IsFamilyAndAssembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsFamilyAndAssemblyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFamilyAndAssembly) {
		return nil, false
	}
	return o.IsFamilyAndAssembly, true
}

// HasIsFamilyAndAssembly returns a boolean if a field has been set.
func (o *FieldInfo) HasIsFamilyAndAssembly() bool {
	if o != nil && !IsNil(o.IsFamilyAndAssembly) {
		return true
	}

	return false
}

// SetIsFamilyAndAssembly gets a reference to the given bool and assigns it to the IsFamilyAndAssembly field.
func (o *FieldInfo) SetIsFamilyAndAssembly(v bool) {
	o.IsFamilyAndAssembly = &v
}

// GetIsFamilyOrAssembly returns the IsFamilyOrAssembly field value if set, zero value otherwise.
func (o *FieldInfo) GetIsFamilyOrAssembly() bool {
	if o == nil || IsNil(o.IsFamilyOrAssembly) {
		var ret bool
		return ret
	}
	return *o.IsFamilyOrAssembly
}

// GetIsFamilyOrAssemblyOk returns a tuple with the IsFamilyOrAssembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsFamilyOrAssemblyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFamilyOrAssembly) {
		return nil, false
	}
	return o.IsFamilyOrAssembly, true
}

// HasIsFamilyOrAssembly returns a boolean if a field has been set.
func (o *FieldInfo) HasIsFamilyOrAssembly() bool {
	if o != nil && !IsNil(o.IsFamilyOrAssembly) {
		return true
	}

	return false
}

// SetIsFamilyOrAssembly gets a reference to the given bool and assigns it to the IsFamilyOrAssembly field.
func (o *FieldInfo) SetIsFamilyOrAssembly(v bool) {
	o.IsFamilyOrAssembly = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *FieldInfo) GetIsPrivate() bool {
	if o == nil || IsNil(o.IsPrivate) {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivate) {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *FieldInfo) HasIsPrivate() bool {
	if o != nil && !IsNil(o.IsPrivate) {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *FieldInfo) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *FieldInfo) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *FieldInfo) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *FieldInfo) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetIsSecurityCritical returns the IsSecurityCritical field value if set, zero value otherwise.
func (o *FieldInfo) GetIsSecurityCritical() bool {
	if o == nil || IsNil(o.IsSecurityCritical) {
		var ret bool
		return ret
	}
	return *o.IsSecurityCritical
}

// GetIsSecurityCriticalOk returns a tuple with the IsSecurityCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsSecurityCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecurityCritical) {
		return nil, false
	}
	return o.IsSecurityCritical, true
}

// HasIsSecurityCritical returns a boolean if a field has been set.
func (o *FieldInfo) HasIsSecurityCritical() bool {
	if o != nil && !IsNil(o.IsSecurityCritical) {
		return true
	}

	return false
}

// SetIsSecurityCritical gets a reference to the given bool and assigns it to the IsSecurityCritical field.
func (o *FieldInfo) SetIsSecurityCritical(v bool) {
	o.IsSecurityCritical = &v
}

// GetIsSecuritySafeCritical returns the IsSecuritySafeCritical field value if set, zero value otherwise.
func (o *FieldInfo) GetIsSecuritySafeCritical() bool {
	if o == nil || IsNil(o.IsSecuritySafeCritical) {
		var ret bool
		return ret
	}
	return *o.IsSecuritySafeCritical
}

// GetIsSecuritySafeCriticalOk returns a tuple with the IsSecuritySafeCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsSecuritySafeCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecuritySafeCritical) {
		return nil, false
	}
	return o.IsSecuritySafeCritical, true
}

// HasIsSecuritySafeCritical returns a boolean if a field has been set.
func (o *FieldInfo) HasIsSecuritySafeCritical() bool {
	if o != nil && !IsNil(o.IsSecuritySafeCritical) {
		return true
	}

	return false
}

// SetIsSecuritySafeCritical gets a reference to the given bool and assigns it to the IsSecuritySafeCritical field.
func (o *FieldInfo) SetIsSecuritySafeCritical(v bool) {
	o.IsSecuritySafeCritical = &v
}

// GetIsSecurityTransparent returns the IsSecurityTransparent field value if set, zero value otherwise.
func (o *FieldInfo) GetIsSecurityTransparent() bool {
	if o == nil || IsNil(o.IsSecurityTransparent) {
		var ret bool
		return ret
	}
	return *o.IsSecurityTransparent
}

// GetIsSecurityTransparentOk returns a tuple with the IsSecurityTransparent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetIsSecurityTransparentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecurityTransparent) {
		return nil, false
	}
	return o.IsSecurityTransparent, true
}

// HasIsSecurityTransparent returns a boolean if a field has been set.
func (o *FieldInfo) HasIsSecurityTransparent() bool {
	if o != nil && !IsNil(o.IsSecurityTransparent) {
		return true
	}

	return false
}

// SetIsSecurityTransparent gets a reference to the given bool and assigns it to the IsSecurityTransparent field.
func (o *FieldInfo) SetIsSecurityTransparent(v bool) {
	o.IsSecurityTransparent = &v
}

// GetFieldHandle returns the FieldHandle field value if set, zero value otherwise.
func (o *FieldInfo) GetFieldHandle() RuntimeFieldHandle {
	if o == nil || IsNil(o.FieldHandle) {
		var ret RuntimeFieldHandle
		return ret
	}
	return *o.FieldHandle
}

// GetFieldHandleOk returns a tuple with the FieldHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldInfo) GetFieldHandleOk() (*RuntimeFieldHandle, bool) {
	if o == nil || IsNil(o.FieldHandle) {
		return nil, false
	}
	return o.FieldHandle, true
}

// HasFieldHandle returns a boolean if a field has been set.
func (o *FieldInfo) HasFieldHandle() bool {
	if o != nil && !IsNil(o.FieldHandle) {
		return true
	}

	return false
}

// SetFieldHandle gets a reference to the given RuntimeFieldHandle and assigns it to the FieldHandle field.
func (o *FieldInfo) SetFieldHandle(v RuntimeFieldHandle) {
	o.FieldHandle = &v
}

func (o FieldInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.DeclaringType) {
		toSerialize["declaringType"] = o.DeclaringType
	}
	if !IsNil(o.ReflectedType) {
		toSerialize["reflectedType"] = o.ReflectedType
	}
	if !IsNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	if o.CustomAttributes != nil {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	if !IsNil(o.IsCollectible) {
		toSerialize["isCollectible"] = o.IsCollectible
	}
	if !IsNil(o.MetadataToken) {
		toSerialize["metadataToken"] = o.MetadataToken
	}
	if !IsNil(o.MemberType) {
		toSerialize["memberType"] = o.MemberType
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.FieldType) {
		toSerialize["fieldType"] = o.FieldType
	}
	if !IsNil(o.IsInitOnly) {
		toSerialize["isInitOnly"] = o.IsInitOnly
	}
	if !IsNil(o.IsLiteral) {
		toSerialize["isLiteral"] = o.IsLiteral
	}
	if !IsNil(o.IsNotSerialized) {
		toSerialize["isNotSerialized"] = o.IsNotSerialized
	}
	if !IsNil(o.IsPinvokeImpl) {
		toSerialize["isPinvokeImpl"] = o.IsPinvokeImpl
	}
	if !IsNil(o.IsSpecialName) {
		toSerialize["isSpecialName"] = o.IsSpecialName
	}
	if !IsNil(o.IsStatic) {
		toSerialize["isStatic"] = o.IsStatic
	}
	if !IsNil(o.IsAssembly) {
		toSerialize["isAssembly"] = o.IsAssembly
	}
	if !IsNil(o.IsFamily) {
		toSerialize["isFamily"] = o.IsFamily
	}
	if !IsNil(o.IsFamilyAndAssembly) {
		toSerialize["isFamilyAndAssembly"] = o.IsFamilyAndAssembly
	}
	if !IsNil(o.IsFamilyOrAssembly) {
		toSerialize["isFamilyOrAssembly"] = o.IsFamilyOrAssembly
	}
	if !IsNil(o.IsPrivate) {
		toSerialize["isPrivate"] = o.IsPrivate
	}
	if !IsNil(o.IsPublic) {
		toSerialize["isPublic"] = o.IsPublic
	}
	if !IsNil(o.IsSecurityCritical) {
		toSerialize["isSecurityCritical"] = o.IsSecurityCritical
	}
	if !IsNil(o.IsSecuritySafeCritical) {
		toSerialize["isSecuritySafeCritical"] = o.IsSecuritySafeCritical
	}
	if !IsNil(o.IsSecurityTransparent) {
		toSerialize["isSecurityTransparent"] = o.IsSecurityTransparent
	}
	if !IsNil(o.FieldHandle) {
		toSerialize["fieldHandle"] = o.FieldHandle
	}
	return toSerialize, nil
}

type NullableFieldInfo struct {
	value *FieldInfo
	isSet bool
}

func (v NullableFieldInfo) Get() *FieldInfo {
	return v.value
}

func (v *NullableFieldInfo) Set(val *FieldInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldInfo(val *FieldInfo) *NullableFieldInfo {
	return &NullableFieldInfo{value: val, isSet: true}
}

func (v NullableFieldInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
