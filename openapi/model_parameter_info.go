/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ParameterInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterInfo{}

// ParameterInfo struct for ParameterInfo
type ParameterInfo struct {
	Attributes       *ParameterAttributes  `json:"attributes,omitempty"`
	Member           *MemberInfo           `json:"member,omitempty"`
	Name             NullableString        `json:"name,omitempty"`
	ParameterType    *Type                 `json:"parameterType,omitempty"`
	Position         *int32                `json:"position,omitempty"`
	IsIn             *bool                 `json:"isIn,omitempty"`
	IsLcid           *bool                 `json:"isLcid,omitempty"`
	IsOptional       *bool                 `json:"isOptional,omitempty"`
	IsOut            *bool                 `json:"isOut,omitempty"`
	IsRetval         *bool                 `json:"isRetval,omitempty"`
	DefaultValue     interface{}           `json:"defaultValue,omitempty"`
	RawDefaultValue  interface{}           `json:"rawDefaultValue,omitempty"`
	HasDefaultValue  *bool                 `json:"hasDefaultValue,omitempty"`
	CustomAttributes []CustomAttributeData `json:"customAttributes,omitempty"`
	MetadataToken    *int32                `json:"metadataToken,omitempty"`
}

// NewParameterInfo instantiates a new ParameterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterInfo() *ParameterInfo {
	this := ParameterInfo{}
	return &this
}

// NewParameterInfoWithDefaults instantiates a new ParameterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterInfoWithDefaults() *ParameterInfo {
	this := ParameterInfo{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ParameterInfo) GetAttributes() ParameterAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret ParameterAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetAttributesOk() (*ParameterAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ParameterInfo) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given ParameterAttributes and assigns it to the Attributes field.
func (o *ParameterInfo) SetAttributes(v ParameterAttributes) {
	o.Attributes = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *ParameterInfo) GetMember() MemberInfo {
	if o == nil || IsNil(o.Member) {
		var ret MemberInfo
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetMemberOk() (*MemberInfo, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *ParameterInfo) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberInfo and assigns it to the Member field.
func (o *ParameterInfo) SetMember(v MemberInfo) {
	o.Member = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParameterInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParameterInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ParameterInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ParameterInfo) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *ParameterInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ParameterInfo) UnsetName() {
	o.Name.Unset()
}

// GetParameterType returns the ParameterType field value if set, zero value otherwise.
func (o *ParameterInfo) GetParameterType() Type {
	if o == nil || IsNil(o.ParameterType) {
		var ret Type
		return ret
	}
	return *o.ParameterType
}

// GetParameterTypeOk returns a tuple with the ParameterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetParameterTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.ParameterType) {
		return nil, false
	}
	return o.ParameterType, true
}

// HasParameterType returns a boolean if a field has been set.
func (o *ParameterInfo) HasParameterType() bool {
	if o != nil && !IsNil(o.ParameterType) {
		return true
	}

	return false
}

// SetParameterType gets a reference to the given Type and assigns it to the ParameterType field.
func (o *ParameterInfo) SetParameterType(v Type) {
	o.ParameterType = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ParameterInfo) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ParameterInfo) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *ParameterInfo) SetPosition(v int32) {
	o.Position = &v
}

// GetIsIn returns the IsIn field value if set, zero value otherwise.
func (o *ParameterInfo) GetIsIn() bool {
	if o == nil || IsNil(o.IsIn) {
		var ret bool
		return ret
	}
	return *o.IsIn
}

// GetIsInOk returns a tuple with the IsIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetIsInOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIn) {
		return nil, false
	}
	return o.IsIn, true
}

// HasIsIn returns a boolean if a field has been set.
func (o *ParameterInfo) HasIsIn() bool {
	if o != nil && !IsNil(o.IsIn) {
		return true
	}

	return false
}

// SetIsIn gets a reference to the given bool and assigns it to the IsIn field.
func (o *ParameterInfo) SetIsIn(v bool) {
	o.IsIn = &v
}

// GetIsLcid returns the IsLcid field value if set, zero value otherwise.
func (o *ParameterInfo) GetIsLcid() bool {
	if o == nil || IsNil(o.IsLcid) {
		var ret bool
		return ret
	}
	return *o.IsLcid
}

// GetIsLcidOk returns a tuple with the IsLcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetIsLcidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLcid) {
		return nil, false
	}
	return o.IsLcid, true
}

// HasIsLcid returns a boolean if a field has been set.
func (o *ParameterInfo) HasIsLcid() bool {
	if o != nil && !IsNil(o.IsLcid) {
		return true
	}

	return false
}

// SetIsLcid gets a reference to the given bool and assigns it to the IsLcid field.
func (o *ParameterInfo) SetIsLcid(v bool) {
	o.IsLcid = &v
}

// GetIsOptional returns the IsOptional field value if set, zero value otherwise.
func (o *ParameterInfo) GetIsOptional() bool {
	if o == nil || IsNil(o.IsOptional) {
		var ret bool
		return ret
	}
	return *o.IsOptional
}

// GetIsOptionalOk returns a tuple with the IsOptional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetIsOptionalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOptional) {
		return nil, false
	}
	return o.IsOptional, true
}

// HasIsOptional returns a boolean if a field has been set.
func (o *ParameterInfo) HasIsOptional() bool {
	if o != nil && !IsNil(o.IsOptional) {
		return true
	}

	return false
}

// SetIsOptional gets a reference to the given bool and assigns it to the IsOptional field.
func (o *ParameterInfo) SetIsOptional(v bool) {
	o.IsOptional = &v
}

// GetIsOut returns the IsOut field value if set, zero value otherwise.
func (o *ParameterInfo) GetIsOut() bool {
	if o == nil || IsNil(o.IsOut) {
		var ret bool
		return ret
	}
	return *o.IsOut
}

// GetIsOutOk returns a tuple with the IsOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetIsOutOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOut) {
		return nil, false
	}
	return o.IsOut, true
}

// HasIsOut returns a boolean if a field has been set.
func (o *ParameterInfo) HasIsOut() bool {
	if o != nil && !IsNil(o.IsOut) {
		return true
	}

	return false
}

// SetIsOut gets a reference to the given bool and assigns it to the IsOut field.
func (o *ParameterInfo) SetIsOut(v bool) {
	o.IsOut = &v
}

// GetIsRetval returns the IsRetval field value if set, zero value otherwise.
func (o *ParameterInfo) GetIsRetval() bool {
	if o == nil || IsNil(o.IsRetval) {
		var ret bool
		return ret
	}
	return *o.IsRetval
}

// GetIsRetvalOk returns a tuple with the IsRetval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetIsRetvalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRetval) {
		return nil, false
	}
	return o.IsRetval, true
}

// HasIsRetval returns a boolean if a field has been set.
func (o *ParameterInfo) HasIsRetval() bool {
	if o != nil && !IsNil(o.IsRetval) {
		return true
	}

	return false
}

// SetIsRetval gets a reference to the given bool and assigns it to the IsRetval field.
func (o *ParameterInfo) SetIsRetval(v bool) {
	o.IsRetval = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParameterInfo) GetDefaultValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParameterInfo) GetDefaultValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return &o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ParameterInfo) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given interface{} and assigns it to the DefaultValue field.
func (o *ParameterInfo) SetDefaultValue(v interface{}) {
	o.DefaultValue = v
}

// GetRawDefaultValue returns the RawDefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParameterInfo) GetRawDefaultValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RawDefaultValue
}

// GetRawDefaultValueOk returns a tuple with the RawDefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParameterInfo) GetRawDefaultValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RawDefaultValue) {
		return nil, false
	}
	return &o.RawDefaultValue, true
}

// HasRawDefaultValue returns a boolean if a field has been set.
func (o *ParameterInfo) HasRawDefaultValue() bool {
	if o != nil && !IsNil(o.RawDefaultValue) {
		return true
	}

	return false
}

// SetRawDefaultValue gets a reference to the given interface{} and assigns it to the RawDefaultValue field.
func (o *ParameterInfo) SetRawDefaultValue(v interface{}) {
	o.RawDefaultValue = v
}

// GetHasDefaultValue returns the HasDefaultValue field value if set, zero value otherwise.
func (o *ParameterInfo) GetHasDefaultValue() bool {
	if o == nil || IsNil(o.HasDefaultValue) {
		var ret bool
		return ret
	}
	return *o.HasDefaultValue
}

// GetHasDefaultValueOk returns a tuple with the HasDefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetHasDefaultValueOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDefaultValue) {
		return nil, false
	}
	return o.HasDefaultValue, true
}

// HasHasDefaultValue returns a boolean if a field has been set.
func (o *ParameterInfo) HasHasDefaultValue() bool {
	if o != nil && !IsNil(o.HasDefaultValue) {
		return true
	}

	return false
}

// SetHasDefaultValue gets a reference to the given bool and assigns it to the HasDefaultValue field.
func (o *ParameterInfo) SetHasDefaultValue(v bool) {
	o.HasDefaultValue = &v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParameterInfo) GetCustomAttributes() []CustomAttributeData {
	if o == nil {
		var ret []CustomAttributeData
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParameterInfo) GetCustomAttributesOk() ([]CustomAttributeData, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *ParameterInfo) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []CustomAttributeData and assigns it to the CustomAttributes field.
func (o *ParameterInfo) SetCustomAttributes(v []CustomAttributeData) {
	o.CustomAttributes = v
}

// GetMetadataToken returns the MetadataToken field value if set, zero value otherwise.
func (o *ParameterInfo) GetMetadataToken() int32 {
	if o == nil || IsNil(o.MetadataToken) {
		var ret int32
		return ret
	}
	return *o.MetadataToken
}

// GetMetadataTokenOk returns a tuple with the MetadataToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterInfo) GetMetadataTokenOk() (*int32, bool) {
	if o == nil || IsNil(o.MetadataToken) {
		return nil, false
	}
	return o.MetadataToken, true
}

// HasMetadataToken returns a boolean if a field has been set.
func (o *ParameterInfo) HasMetadataToken() bool {
	if o != nil && !IsNil(o.MetadataToken) {
		return true
	}

	return false
}

// SetMetadataToken gets a reference to the given int32 and assigns it to the MetadataToken field.
func (o *ParameterInfo) SetMetadataToken(v int32) {
	o.MetadataToken = &v
}

func (o ParameterInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.ParameterType) {
		toSerialize["parameterType"] = o.ParameterType
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.IsIn) {
		toSerialize["isIn"] = o.IsIn
	}
	if !IsNil(o.IsLcid) {
		toSerialize["isLcid"] = o.IsLcid
	}
	if !IsNil(o.IsOptional) {
		toSerialize["isOptional"] = o.IsOptional
	}
	if !IsNil(o.IsOut) {
		toSerialize["isOut"] = o.IsOut
	}
	if !IsNil(o.IsRetval) {
		toSerialize["isRetval"] = o.IsRetval
	}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.RawDefaultValue != nil {
		toSerialize["rawDefaultValue"] = o.RawDefaultValue
	}
	if !IsNil(o.HasDefaultValue) {
		toSerialize["hasDefaultValue"] = o.HasDefaultValue
	}
	if o.CustomAttributes != nil {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	if !IsNil(o.MetadataToken) {
		toSerialize["metadataToken"] = o.MetadataToken
	}
	return toSerialize, nil
}

type NullableParameterInfo struct {
	value *ParameterInfo
	isSet bool
}

func (v NullableParameterInfo) Get() *ParameterInfo {
	return v.value
}

func (v *NullableParameterInfo) Set(val *ParameterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterInfo(val *ParameterInfo) *NullableParameterInfo {
	return &NullableParameterInfo{value: val, isSet: true}
}

func (v NullableParameterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
