/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PipeWriter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipeWriter{}

// PipeWriter struct for PipeWriter
type PipeWriter struct {
	CanGetUnflushedBytes *bool  `json:"canGetUnflushedBytes,omitempty"`
	UnflushedBytes       *int64 `json:"unflushedBytes,omitempty"`
}

// NewPipeWriter instantiates a new PipeWriter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipeWriter() *PipeWriter {
	this := PipeWriter{}
	return &this
}

// NewPipeWriterWithDefaults instantiates a new PipeWriter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipeWriterWithDefaults() *PipeWriter {
	this := PipeWriter{}
	return &this
}

// GetCanGetUnflushedBytes returns the CanGetUnflushedBytes field value if set, zero value otherwise.
func (o *PipeWriter) GetCanGetUnflushedBytes() bool {
	if o == nil || IsNil(o.CanGetUnflushedBytes) {
		var ret bool
		return ret
	}
	return *o.CanGetUnflushedBytes
}

// GetCanGetUnflushedBytesOk returns a tuple with the CanGetUnflushedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipeWriter) GetCanGetUnflushedBytesOk() (*bool, bool) {
	if o == nil || IsNil(o.CanGetUnflushedBytes) {
		return nil, false
	}
	return o.CanGetUnflushedBytes, true
}

// HasCanGetUnflushedBytes returns a boolean if a field has been set.
func (o *PipeWriter) HasCanGetUnflushedBytes() bool {
	if o != nil && !IsNil(o.CanGetUnflushedBytes) {
		return true
	}

	return false
}

// SetCanGetUnflushedBytes gets a reference to the given bool and assigns it to the CanGetUnflushedBytes field.
func (o *PipeWriter) SetCanGetUnflushedBytes(v bool) {
	o.CanGetUnflushedBytes = &v
}

// GetUnflushedBytes returns the UnflushedBytes field value if set, zero value otherwise.
func (o *PipeWriter) GetUnflushedBytes() int64 {
	if o == nil || IsNil(o.UnflushedBytes) {
		var ret int64
		return ret
	}
	return *o.UnflushedBytes
}

// GetUnflushedBytesOk returns a tuple with the UnflushedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipeWriter) GetUnflushedBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.UnflushedBytes) {
		return nil, false
	}
	return o.UnflushedBytes, true
}

// HasUnflushedBytes returns a boolean if a field has been set.
func (o *PipeWriter) HasUnflushedBytes() bool {
	if o != nil && !IsNil(o.UnflushedBytes) {
		return true
	}

	return false
}

// SetUnflushedBytes gets a reference to the given int64 and assigns it to the UnflushedBytes field.
func (o *PipeWriter) SetUnflushedBytes(v int64) {
	o.UnflushedBytes = &v
}

func (o PipeWriter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipeWriter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanGetUnflushedBytes) {
		toSerialize["canGetUnflushedBytes"] = o.CanGetUnflushedBytes
	}
	if !IsNil(o.UnflushedBytes) {
		toSerialize["unflushedBytes"] = o.UnflushedBytes
	}
	return toSerialize, nil
}

type NullablePipeWriter struct {
	value *PipeWriter
	isSet bool
}

func (v NullablePipeWriter) Get() *PipeWriter {
	return v.value
}

func (v *NullablePipeWriter) Set(val *PipeWriter) {
	v.value = val
	v.isSet = true
}

func (v NullablePipeWriter) IsSet() bool {
	return v.isSet
}

func (v *NullablePipeWriter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipeWriter(val *PipeWriter) *NullablePipeWriter {
	return &NullablePipeWriter{value: val, isSet: true}
}

func (v NullablePipeWriter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipeWriter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
