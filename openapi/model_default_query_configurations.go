/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DefaultQueryConfigurations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultQueryConfigurations{}

// DefaultQueryConfigurations struct for DefaultQueryConfigurations
type DefaultQueryConfigurations struct {
	EnableExpand    *bool         `json:"enableExpand,omitempty"`
	EnableSelect    *bool         `json:"enableSelect,omitempty"`
	EnableCount     *bool         `json:"enableCount,omitempty"`
	EnableOrderBy   *bool         `json:"enableOrderBy,omitempty"`
	EnableFilter    *bool         `json:"enableFilter,omitempty"`
	MaxTop          NullableInt32 `json:"maxTop,omitempty"`
	EnableSkipToken *bool         `json:"enableSkipToken,omitempty"`
}

// NewDefaultQueryConfigurations instantiates a new DefaultQueryConfigurations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultQueryConfigurations() *DefaultQueryConfigurations {
	this := DefaultQueryConfigurations{}
	return &this
}

// NewDefaultQueryConfigurationsWithDefaults instantiates a new DefaultQueryConfigurations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultQueryConfigurationsWithDefaults() *DefaultQueryConfigurations {
	this := DefaultQueryConfigurations{}
	return &this
}

// GetEnableExpand returns the EnableExpand field value if set, zero value otherwise.
func (o *DefaultQueryConfigurations) GetEnableExpand() bool {
	if o == nil || IsNil(o.EnableExpand) {
		var ret bool
		return ret
	}
	return *o.EnableExpand
}

// GetEnableExpandOk returns a tuple with the EnableExpand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultQueryConfigurations) GetEnableExpandOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableExpand) {
		return nil, false
	}
	return o.EnableExpand, true
}

// HasEnableExpand returns a boolean if a field has been set.
func (o *DefaultQueryConfigurations) HasEnableExpand() bool {
	if o != nil && !IsNil(o.EnableExpand) {
		return true
	}

	return false
}

// SetEnableExpand gets a reference to the given bool and assigns it to the EnableExpand field.
func (o *DefaultQueryConfigurations) SetEnableExpand(v bool) {
	o.EnableExpand = &v
}

// GetEnableSelect returns the EnableSelect field value if set, zero value otherwise.
func (o *DefaultQueryConfigurations) GetEnableSelect() bool {
	if o == nil || IsNil(o.EnableSelect) {
		var ret bool
		return ret
	}
	return *o.EnableSelect
}

// GetEnableSelectOk returns a tuple with the EnableSelect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultQueryConfigurations) GetEnableSelectOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSelect) {
		return nil, false
	}
	return o.EnableSelect, true
}

// HasEnableSelect returns a boolean if a field has been set.
func (o *DefaultQueryConfigurations) HasEnableSelect() bool {
	if o != nil && !IsNil(o.EnableSelect) {
		return true
	}

	return false
}

// SetEnableSelect gets a reference to the given bool and assigns it to the EnableSelect field.
func (o *DefaultQueryConfigurations) SetEnableSelect(v bool) {
	o.EnableSelect = &v
}

// GetEnableCount returns the EnableCount field value if set, zero value otherwise.
func (o *DefaultQueryConfigurations) GetEnableCount() bool {
	if o == nil || IsNil(o.EnableCount) {
		var ret bool
		return ret
	}
	return *o.EnableCount
}

// GetEnableCountOk returns a tuple with the EnableCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultQueryConfigurations) GetEnableCountOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCount) {
		return nil, false
	}
	return o.EnableCount, true
}

// HasEnableCount returns a boolean if a field has been set.
func (o *DefaultQueryConfigurations) HasEnableCount() bool {
	if o != nil && !IsNil(o.EnableCount) {
		return true
	}

	return false
}

// SetEnableCount gets a reference to the given bool and assigns it to the EnableCount field.
func (o *DefaultQueryConfigurations) SetEnableCount(v bool) {
	o.EnableCount = &v
}

// GetEnableOrderBy returns the EnableOrderBy field value if set, zero value otherwise.
func (o *DefaultQueryConfigurations) GetEnableOrderBy() bool {
	if o == nil || IsNil(o.EnableOrderBy) {
		var ret bool
		return ret
	}
	return *o.EnableOrderBy
}

// GetEnableOrderByOk returns a tuple with the EnableOrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultQueryConfigurations) GetEnableOrderByOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableOrderBy) {
		return nil, false
	}
	return o.EnableOrderBy, true
}

// HasEnableOrderBy returns a boolean if a field has been set.
func (o *DefaultQueryConfigurations) HasEnableOrderBy() bool {
	if o != nil && !IsNil(o.EnableOrderBy) {
		return true
	}

	return false
}

// SetEnableOrderBy gets a reference to the given bool and assigns it to the EnableOrderBy field.
func (o *DefaultQueryConfigurations) SetEnableOrderBy(v bool) {
	o.EnableOrderBy = &v
}

// GetEnableFilter returns the EnableFilter field value if set, zero value otherwise.
func (o *DefaultQueryConfigurations) GetEnableFilter() bool {
	if o == nil || IsNil(o.EnableFilter) {
		var ret bool
		return ret
	}
	return *o.EnableFilter
}

// GetEnableFilterOk returns a tuple with the EnableFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultQueryConfigurations) GetEnableFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFilter) {
		return nil, false
	}
	return o.EnableFilter, true
}

// HasEnableFilter returns a boolean if a field has been set.
func (o *DefaultQueryConfigurations) HasEnableFilter() bool {
	if o != nil && !IsNil(o.EnableFilter) {
		return true
	}

	return false
}

// SetEnableFilter gets a reference to the given bool and assigns it to the EnableFilter field.
func (o *DefaultQueryConfigurations) SetEnableFilter(v bool) {
	o.EnableFilter = &v
}

// GetMaxTop returns the MaxTop field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DefaultQueryConfigurations) GetMaxTop() int32 {
	if o == nil || IsNil(o.MaxTop.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxTop.Get()
}

// GetMaxTopOk returns a tuple with the MaxTop field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DefaultQueryConfigurations) GetMaxTopOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxTop.Get(), o.MaxTop.IsSet()
}

// HasMaxTop returns a boolean if a field has been set.
func (o *DefaultQueryConfigurations) HasMaxTop() bool {
	if o != nil && o.MaxTop.IsSet() {
		return true
	}

	return false
}

// SetMaxTop gets a reference to the given NullableInt32 and assigns it to the MaxTop field.
func (o *DefaultQueryConfigurations) SetMaxTop(v int32) {
	o.MaxTop.Set(&v)
}

// SetMaxTopNil sets the value for MaxTop to be an explicit nil
func (o *DefaultQueryConfigurations) SetMaxTopNil() {
	o.MaxTop.Set(nil)
}

// UnsetMaxTop ensures that no value is present for MaxTop, not even an explicit nil
func (o *DefaultQueryConfigurations) UnsetMaxTop() {
	o.MaxTop.Unset()
}

// GetEnableSkipToken returns the EnableSkipToken field value if set, zero value otherwise.
func (o *DefaultQueryConfigurations) GetEnableSkipToken() bool {
	if o == nil || IsNil(o.EnableSkipToken) {
		var ret bool
		return ret
	}
	return *o.EnableSkipToken
}

// GetEnableSkipTokenOk returns a tuple with the EnableSkipToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultQueryConfigurations) GetEnableSkipTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSkipToken) {
		return nil, false
	}
	return o.EnableSkipToken, true
}

// HasEnableSkipToken returns a boolean if a field has been set.
func (o *DefaultQueryConfigurations) HasEnableSkipToken() bool {
	if o != nil && !IsNil(o.EnableSkipToken) {
		return true
	}

	return false
}

// SetEnableSkipToken gets a reference to the given bool and assigns it to the EnableSkipToken field.
func (o *DefaultQueryConfigurations) SetEnableSkipToken(v bool) {
	o.EnableSkipToken = &v
}

func (o DefaultQueryConfigurations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultQueryConfigurations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableExpand) {
		toSerialize["enableExpand"] = o.EnableExpand
	}
	if !IsNil(o.EnableSelect) {
		toSerialize["enableSelect"] = o.EnableSelect
	}
	if !IsNil(o.EnableCount) {
		toSerialize["enableCount"] = o.EnableCount
	}
	if !IsNil(o.EnableOrderBy) {
		toSerialize["enableOrderBy"] = o.EnableOrderBy
	}
	if !IsNil(o.EnableFilter) {
		toSerialize["enableFilter"] = o.EnableFilter
	}
	if o.MaxTop.IsSet() {
		toSerialize["maxTop"] = o.MaxTop.Get()
	}
	if !IsNil(o.EnableSkipToken) {
		toSerialize["enableSkipToken"] = o.EnableSkipToken
	}
	return toSerialize, nil
}

type NullableDefaultQueryConfigurations struct {
	value *DefaultQueryConfigurations
	isSet bool
}

func (v NullableDefaultQueryConfigurations) Get() *DefaultQueryConfigurations {
	return v.value
}

func (v *NullableDefaultQueryConfigurations) Set(val *DefaultQueryConfigurations) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultQueryConfigurations) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultQueryConfigurations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultQueryConfigurations(val *DefaultQueryConfigurations) *NullableDefaultQueryConfigurations {
	return &NullableDefaultQueryConfigurations{value: val, isSet: true}
}

func (v NullableDefaultQueryConfigurations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultQueryConfigurations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
