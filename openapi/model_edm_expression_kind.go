/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EdmExpressionKind the model 'EdmExpressionKind'
type EdmExpressionKind string

// List of EdmExpressionKind
const (
	NONE                         EdmExpressionKind = "None"
	BINARY_CONSTANT              EdmExpressionKind = "BinaryConstant"
	BOOLEAN_CONSTANT             EdmExpressionKind = "BooleanConstant"
	DATE_TIME_OFFSET_CONSTANT    EdmExpressionKind = "DateTimeOffsetConstant"
	DECIMAL_CONSTANT             EdmExpressionKind = "DecimalConstant"
	FLOATING_CONSTANT            EdmExpressionKind = "FloatingConstant"
	GUID_CONSTANT                EdmExpressionKind = "GuidConstant"
	INTEGER_CONSTANT             EdmExpressionKind = "IntegerConstant"
	STRING_CONSTANT              EdmExpressionKind = "StringConstant"
	DURATION_CONSTANT            EdmExpressionKind = "DurationConstant"
	NULL                         EdmExpressionKind = "Null"
	RECORD                       EdmExpressionKind = "Record"
	COLLECTION                   EdmExpressionKind = "Collection"
	PATH                         EdmExpressionKind = "Path"
	IF                           EdmExpressionKind = "If"
	CAST                         EdmExpressionKind = "Cast"
	IS_TYPE                      EdmExpressionKind = "IsType"
	FUNCTION_APPLICATION         EdmExpressionKind = "FunctionApplication"
	LABELED_EXPRESSION_REFERENCE EdmExpressionKind = "LabeledExpressionReference"
	LABELED                      EdmExpressionKind = "Labeled"
	PROPERTY_PATH                EdmExpressionKind = "PropertyPath"
	NAVIGATION_PROPERTY_PATH     EdmExpressionKind = "NavigationPropertyPath"
	DATE_CONSTANT                EdmExpressionKind = "DateConstant"
	TIME_OF_DAY_CONSTANT         EdmExpressionKind = "TimeOfDayConstant"
	ENUM_MEMBER                  EdmExpressionKind = "EnumMember"
	ANNOTATION_PATH              EdmExpressionKind = "AnnotationPath"
)

// All allowed values of EdmExpressionKind enum
var AllowedEdmExpressionKindEnumValues = []EdmExpressionKind{
	"None",
	"BinaryConstant",
	"BooleanConstant",
	"DateTimeOffsetConstant",
	"DecimalConstant",
	"FloatingConstant",
	"GuidConstant",
	"IntegerConstant",
	"StringConstant",
	"DurationConstant",
	"Null",
	"Record",
	"Collection",
	"Path",
	"If",
	"Cast",
	"IsType",
	"FunctionApplication",
	"LabeledExpressionReference",
	"Labeled",
	"PropertyPath",
	"NavigationPropertyPath",
	"DateConstant",
	"TimeOfDayConstant",
	"EnumMember",
	"AnnotationPath",
}

func (v *EdmExpressionKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EdmExpressionKind(value)
	for _, existing := range AllowedEdmExpressionKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EdmExpressionKind", value)
}

// NewEdmExpressionKindFromValue returns a pointer to a valid EdmExpressionKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEdmExpressionKindFromValue(v string) (*EdmExpressionKind, error) {
	ev := EdmExpressionKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EdmExpressionKind: valid values are %v", v, AllowedEdmExpressionKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EdmExpressionKind) IsValid() bool {
	for _, existing := range AllowedEdmExpressionKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EdmExpressionKind value
func (v EdmExpressionKind) Ptr() *EdmExpressionKind {
	return &v
}

type NullableEdmExpressionKind struct {
	value *EdmExpressionKind
	isSet bool
}

func (v NullableEdmExpressionKind) Get() *EdmExpressionKind {
	return v.value
}

func (v *NullableEdmExpressionKind) Set(val *EdmExpressionKind) {
	v.value = val
	v.isSet = true
}

func (v NullableEdmExpressionKind) IsSet() bool {
	return v.isSet
}

func (v *NullableEdmExpressionKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdmExpressionKind(val *EdmExpressionKind) *NullableEdmExpressionKind {
	return &NullableEdmExpressionKind{value: val, isSet: true}
}

func (v NullableEdmExpressionKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdmExpressionKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
