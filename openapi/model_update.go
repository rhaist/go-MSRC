/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Update type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Update{}

// Update struct for Update
type Update struct {
	Id                 string         `json:"id"`
	Alias              string         `json:"alias"`
	DocumentTitle      string         `json:"documentTitle"`
	Severity           NullableString `json:"severity,omitempty"`
	InitialReleaseDate time.Time      `json:"initialReleaseDate"`
	CurrentReleaseDate time.Time      `json:"currentReleaseDate"`
	CvrfUrl            string         `json:"cvrfUrl"`
}

type _Update Update

// NewUpdate instantiates a new Update object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdate(id string, alias string, documentTitle string, initialReleaseDate time.Time, currentReleaseDate time.Time, cvrfUrl string) *Update {
	this := Update{}
	this.Id = id
	this.Alias = alias
	this.DocumentTitle = documentTitle
	this.InitialReleaseDate = initialReleaseDate
	this.CurrentReleaseDate = currentReleaseDate
	this.CvrfUrl = cvrfUrl
	return &this
}

// NewUpdateWithDefaults instantiates a new Update object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWithDefaults() *Update {
	this := Update{}
	return &this
}

// GetId returns the Id field value
func (o *Update) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Update) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Update) SetId(v string) {
	o.Id = v
}

// GetAlias returns the Alias field value
func (o *Update) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *Update) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *Update) SetAlias(v string) {
	o.Alias = v
}

// GetDocumentTitle returns the DocumentTitle field value
func (o *Update) GetDocumentTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentTitle
}

// GetDocumentTitleOk returns a tuple with the DocumentTitle field value
// and a boolean to check if the value has been set.
func (o *Update) GetDocumentTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentTitle, true
}

// SetDocumentTitle sets field value
func (o *Update) SetDocumentTitle(v string) {
	o.DocumentTitle = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Update) GetSeverity() string {
	if o == nil || IsNil(o.Severity.Get()) {
		var ret string
		return ret
	}
	return *o.Severity.Get()
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Update) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Severity.Get(), o.Severity.IsSet()
}

// HasSeverity returns a boolean if a field has been set.
func (o *Update) HasSeverity() bool {
	if o != nil && o.Severity.IsSet() {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given NullableString and assigns it to the Severity field.
func (o *Update) SetSeverity(v string) {
	o.Severity.Set(&v)
}

// SetSeverityNil sets the value for Severity to be an explicit nil
func (o *Update) SetSeverityNil() {
	o.Severity.Set(nil)
}

// UnsetSeverity ensures that no value is present for Severity, not even an explicit nil
func (o *Update) UnsetSeverity() {
	o.Severity.Unset()
}

// GetInitialReleaseDate returns the InitialReleaseDate field value
func (o *Update) GetInitialReleaseDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.InitialReleaseDate
}

// GetInitialReleaseDateOk returns a tuple with the InitialReleaseDate field value
// and a boolean to check if the value has been set.
func (o *Update) GetInitialReleaseDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitialReleaseDate, true
}

// SetInitialReleaseDate sets field value
func (o *Update) SetInitialReleaseDate(v time.Time) {
	o.InitialReleaseDate = v
}

// GetCurrentReleaseDate returns the CurrentReleaseDate field value
func (o *Update) GetCurrentReleaseDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CurrentReleaseDate
}

// GetCurrentReleaseDateOk returns a tuple with the CurrentReleaseDate field value
// and a boolean to check if the value has been set.
func (o *Update) GetCurrentReleaseDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentReleaseDate, true
}

// SetCurrentReleaseDate sets field value
func (o *Update) SetCurrentReleaseDate(v time.Time) {
	o.CurrentReleaseDate = v
}

// GetCvrfUrl returns the CvrfUrl field value
func (o *Update) GetCvrfUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CvrfUrl
}

// GetCvrfUrlOk returns a tuple with the CvrfUrl field value
// and a boolean to check if the value has been set.
func (o *Update) GetCvrfUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CvrfUrl, true
}

// SetCvrfUrl sets field value
func (o *Update) SetCvrfUrl(v string) {
	o.CvrfUrl = v
}

func (o Update) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Update) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["alias"] = o.Alias
	toSerialize["documentTitle"] = o.DocumentTitle
	if o.Severity.IsSet() {
		toSerialize["severity"] = o.Severity.Get()
	}
	toSerialize["initialReleaseDate"] = o.InitialReleaseDate
	toSerialize["currentReleaseDate"] = o.CurrentReleaseDate
	toSerialize["cvrfUrl"] = o.CvrfUrl
	return toSerialize, nil
}

func (o *Update) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"alias",
		"documentTitle",
		"initialReleaseDate",
		"currentReleaseDate",
		"cvrfUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdate := _Update{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdate)

	if err != nil {
		return err
	}

	*o = Update(varUpdate)

	return err
}

type NullableUpdate struct {
	value *Update
	isSet bool
}

func (v NullableUpdate) Get() *Update {
	return v.value
}

func (v *NullableUpdate) Set(val *Update) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdate(val *Update) *NullableUpdate {
	return &NullableUpdate{value: val, isSet: true}
}

func (v NullableUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
