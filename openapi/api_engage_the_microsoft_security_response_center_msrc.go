/*
 * MSRC Public API
 *
 * This RESTful API can be used to engage the Microsoft Security Response Center (MSRC) in the following ways:    - Get security update summaries and details using the [Common Vulnerability Reporting Framework](https://www.icasi.org/cvrf) (CVRF).    - Report suspected cyberattacks or abuse originating from Microsoft Online Services.    - Notify Microsoft of any planned penetration tests against your Azure assets.    **Sample client code** is available on the Microsoft Security [Updates](https://github.com/microsoft/MSRC-Microsoft-Security-Updates-API) and [Engage](https://github.com/Microsoft/MSRC-Microsoft-Engage-API)   Github repositories.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// EngageTheMicrosoftSecurityResponseCenterMSRCApiService EngageTheMicrosoftSecurityResponseCenterMSRCApi service
type EngageTheMicrosoftSecurityResponseCenterMSRCApiService service

type ApiCarsPostCarsReportRequest struct {
	ctx        _context.Context
	ApiService *EngageTheMicrosoftSecurityResponseCenterMSRCApiService
	carsDto    *CarsDto
	apiVersion *string
}

func (r ApiCarsPostCarsReportRequest) CarsDto(carsDto CarsDto) ApiCarsPostCarsReportRequest {
	r.carsDto = &carsDto
	return r
}
func (r ApiCarsPostCarsReportRequest) ApiVersion(apiVersion string) ApiCarsPostCarsReportRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiCarsPostCarsReportRequest) Execute() (*_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.CarsPostCarsReportExecute(r)
}

/*
 * CarsPostCarsReport Submit an abuse report
 * Submit reports to Microsoft's Computer Emergency Response Team (CERT) using the Common Abuse Reporting System (CARS).
This action is to report suspected cyberattacks or abuse originating from Microsoft Online Services,
such as Azure, Bing, Outlook, OneDrive, and Office 365. This includes malicious network activity
originating from Microsoft IP addresses. It also includes distribution of malicious content or other
illicit material through Microsoft Online Services.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCarsPostCarsReportRequest
*/
func (a *EngageTheMicrosoftSecurityResponseCenterMSRCApiService) CarsPostCarsReport(ctx _context.Context) ApiCarsPostCarsReportRequest {
	return ApiCarsPostCarsReportRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *EngageTheMicrosoftSecurityResponseCenterMSRCApiService) CarsPostCarsReportExecute(r ApiCarsPostCarsReportRequest) (*_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EngageTheMicrosoftSecurityResponseCenterMSRCApiService.CarsPostCarsReport")
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarPath := localBasePath + "/engage/cars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.carsDto == nil {
		executionError.error = "carsDto is required and must be specified"
		return nil, executionError
	}

	if r.apiVersion != nil {
		localVarQueryParams.Add("api-version", parameterToString(*r.apiVersion, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.carsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, executionError
}
