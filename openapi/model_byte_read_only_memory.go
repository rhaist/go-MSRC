/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ByteReadOnlyMemory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ByteReadOnlyMemory{}

// ByteReadOnlyMemory struct for ByteReadOnlyMemory
type ByteReadOnlyMemory struct {
	Length  *int32            `json:"length,omitempty"`
	IsEmpty *bool             `json:"isEmpty,omitempty"`
	Span    *ByteReadOnlySpan `json:"span,omitempty"`
}

// NewByteReadOnlyMemory instantiates a new ByteReadOnlyMemory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewByteReadOnlyMemory() *ByteReadOnlyMemory {
	this := ByteReadOnlyMemory{}
	return &this
}

// NewByteReadOnlyMemoryWithDefaults instantiates a new ByteReadOnlyMemory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewByteReadOnlyMemoryWithDefaults() *ByteReadOnlyMemory {
	this := ByteReadOnlyMemory{}
	return &this
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *ByteReadOnlyMemory) GetLength() int32 {
	if o == nil || IsNil(o.Length) {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ByteReadOnlyMemory) GetLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *ByteReadOnlyMemory) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *ByteReadOnlyMemory) SetLength(v int32) {
	o.Length = &v
}

// GetIsEmpty returns the IsEmpty field value if set, zero value otherwise.
func (o *ByteReadOnlyMemory) GetIsEmpty() bool {
	if o == nil || IsNil(o.IsEmpty) {
		var ret bool
		return ret
	}
	return *o.IsEmpty
}

// GetIsEmptyOk returns a tuple with the IsEmpty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ByteReadOnlyMemory) GetIsEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEmpty) {
		return nil, false
	}
	return o.IsEmpty, true
}

// HasIsEmpty returns a boolean if a field has been set.
func (o *ByteReadOnlyMemory) HasIsEmpty() bool {
	if o != nil && !IsNil(o.IsEmpty) {
		return true
	}

	return false
}

// SetIsEmpty gets a reference to the given bool and assigns it to the IsEmpty field.
func (o *ByteReadOnlyMemory) SetIsEmpty(v bool) {
	o.IsEmpty = &v
}

// GetSpan returns the Span field value if set, zero value otherwise.
func (o *ByteReadOnlyMemory) GetSpan() ByteReadOnlySpan {
	if o == nil || IsNil(o.Span) {
		var ret ByteReadOnlySpan
		return ret
	}
	return *o.Span
}

// GetSpanOk returns a tuple with the Span field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ByteReadOnlyMemory) GetSpanOk() (*ByteReadOnlySpan, bool) {
	if o == nil || IsNil(o.Span) {
		return nil, false
	}
	return o.Span, true
}

// HasSpan returns a boolean if a field has been set.
func (o *ByteReadOnlyMemory) HasSpan() bool {
	if o != nil && !IsNil(o.Span) {
		return true
	}

	return false
}

// SetSpan gets a reference to the given ByteReadOnlySpan and assigns it to the Span field.
func (o *ByteReadOnlyMemory) SetSpan(v ByteReadOnlySpan) {
	o.Span = &v
}

func (o ByteReadOnlyMemory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ByteReadOnlyMemory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.IsEmpty) {
		toSerialize["isEmpty"] = o.IsEmpty
	}
	if !IsNil(o.Span) {
		toSerialize["span"] = o.Span
	}
	return toSerialize, nil
}

type NullableByteReadOnlyMemory struct {
	value *ByteReadOnlyMemory
	isSet bool
}

func (v NullableByteReadOnlyMemory) Get() *ByteReadOnlyMemory {
	return v.value
}

func (v *NullableByteReadOnlyMemory) Set(val *ByteReadOnlyMemory) {
	v.value = val
	v.isSet = true
}

func (v NullableByteReadOnlyMemory) IsSet() bool {
	return v.isSet
}

func (v *NullableByteReadOnlyMemory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableByteReadOnlyMemory(val *ByteReadOnlyMemory) *NullableByteReadOnlyMemory {
	return &NullableByteReadOnlyMemory{value: val, isSet: true}
}

func (v NullableByteReadOnlyMemory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableByteReadOnlyMemory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
