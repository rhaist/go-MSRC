/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CountQueryOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountQueryOption{}

// CountQueryOption struct for CountQueryOption
type CountQueryOption struct {
	Context   *ODataQueryContext     `json:"context,omitempty"`
	RawValue  NullableString         `json:"rawValue,omitempty"`
	Value     *bool                  `json:"value,omitempty"`
	Validator map[string]interface{} `json:"validator,omitempty"`
}

// NewCountQueryOption instantiates a new CountQueryOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountQueryOption() *CountQueryOption {
	this := CountQueryOption{}
	return &this
}

// NewCountQueryOptionWithDefaults instantiates a new CountQueryOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountQueryOptionWithDefaults() *CountQueryOption {
	this := CountQueryOption{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *CountQueryOption) GetContext() ODataQueryContext {
	if o == nil || IsNil(o.Context) {
		var ret ODataQueryContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountQueryOption) GetContextOk() (*ODataQueryContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *CountQueryOption) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given ODataQueryContext and assigns it to the Context field.
func (o *CountQueryOption) SetContext(v ODataQueryContext) {
	o.Context = &v
}

// GetRawValue returns the RawValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountQueryOption) GetRawValue() string {
	if o == nil || IsNil(o.RawValue.Get()) {
		var ret string
		return ret
	}
	return *o.RawValue.Get()
}

// GetRawValueOk returns a tuple with the RawValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountQueryOption) GetRawValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RawValue.Get(), o.RawValue.IsSet()
}

// HasRawValue returns a boolean if a field has been set.
func (o *CountQueryOption) HasRawValue() bool {
	if o != nil && o.RawValue.IsSet() {
		return true
	}

	return false
}

// SetRawValue gets a reference to the given NullableString and assigns it to the RawValue field.
func (o *CountQueryOption) SetRawValue(v string) {
	o.RawValue.Set(&v)
}

// SetRawValueNil sets the value for RawValue to be an explicit nil
func (o *CountQueryOption) SetRawValueNil() {
	o.RawValue.Set(nil)
}

// UnsetRawValue ensures that no value is present for RawValue, not even an explicit nil
func (o *CountQueryOption) UnsetRawValue() {
	o.RawValue.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CountQueryOption) GetValue() bool {
	if o == nil || IsNil(o.Value) {
		var ret bool
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountQueryOption) GetValueOk() (*bool, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CountQueryOption) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given bool and assigns it to the Value field.
func (o *CountQueryOption) SetValue(v bool) {
	o.Value = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *CountQueryOption) GetValidator() map[string]interface{} {
	if o == nil || IsNil(o.Validator) {
		var ret map[string]interface{}
		return ret
	}
	return o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountQueryOption) GetValidatorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Validator) {
		return map[string]interface{}{}, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *CountQueryOption) HasValidator() bool {
	if o != nil && !IsNil(o.Validator) {
		return true
	}

	return false
}

// SetValidator gets a reference to the given map[string]interface{} and assigns it to the Validator field.
func (o *CountQueryOption) SetValidator(v map[string]interface{}) {
	o.Validator = v
}

func (o CountQueryOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountQueryOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if o.RawValue.IsSet() {
		toSerialize["rawValue"] = o.RawValue.Get()
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Validator) {
		toSerialize["validator"] = o.Validator
	}
	return toSerialize, nil
}

type NullableCountQueryOption struct {
	value *CountQueryOption
	isSet bool
}

func (v NullableCountQueryOption) Get() *CountQueryOption {
	return v.value
}

func (v *NullableCountQueryOption) Set(val *CountQueryOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCountQueryOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCountQueryOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountQueryOption(val *CountQueryOption) *NullableCountQueryOption {
	return &NullableCountQueryOption{value: val, isSet: true}
}

func (v NullableCountQueryOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountQueryOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
