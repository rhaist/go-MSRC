/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SingleValueNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleValueNode{}

// SingleValueNode struct for SingleValueNode
type SingleValueNode struct {
	TypeReference *IEdmTypeReference `json:"typeReference,omitempty"`
	Kind          *QueryNodeKind     `json:"kind,omitempty"`
}

// NewSingleValueNode instantiates a new SingleValueNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleValueNode() *SingleValueNode {
	this := SingleValueNode{}
	return &this
}

// NewSingleValueNodeWithDefaults instantiates a new SingleValueNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleValueNodeWithDefaults() *SingleValueNode {
	this := SingleValueNode{}
	return &this
}

// GetTypeReference returns the TypeReference field value if set, zero value otherwise.
func (o *SingleValueNode) GetTypeReference() IEdmTypeReference {
	if o == nil || IsNil(o.TypeReference) {
		var ret IEdmTypeReference
		return ret
	}
	return *o.TypeReference
}

// GetTypeReferenceOk returns a tuple with the TypeReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleValueNode) GetTypeReferenceOk() (*IEdmTypeReference, bool) {
	if o == nil || IsNil(o.TypeReference) {
		return nil, false
	}
	return o.TypeReference, true
}

// HasTypeReference returns a boolean if a field has been set.
func (o *SingleValueNode) HasTypeReference() bool {
	if o != nil && !IsNil(o.TypeReference) {
		return true
	}

	return false
}

// SetTypeReference gets a reference to the given IEdmTypeReference and assigns it to the TypeReference field.
func (o *SingleValueNode) SetTypeReference(v IEdmTypeReference) {
	o.TypeReference = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *SingleValueNode) GetKind() QueryNodeKind {
	if o == nil || IsNil(o.Kind) {
		var ret QueryNodeKind
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleValueNode) GetKindOk() (*QueryNodeKind, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *SingleValueNode) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given QueryNodeKind and assigns it to the Kind field.
func (o *SingleValueNode) SetKind(v QueryNodeKind) {
	o.Kind = &v
}

func (o SingleValueNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleValueNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TypeReference) {
		toSerialize["typeReference"] = o.TypeReference
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	return toSerialize, nil
}

type NullableSingleValueNode struct {
	value *SingleValueNode
	isSet bool
}

func (v NullableSingleValueNode) Get() *SingleValueNode {
	return v.value
}

func (v *NullableSingleValueNode) Set(val *SingleValueNode) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleValueNode) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleValueNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleValueNode(val *SingleValueNode) *NullableSingleValueNode {
	return &NullableSingleValueNode{value: val, isSet: true}
}

func (v NullableSingleValueNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleValueNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
