/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EventInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventInfo{}

// EventInfo struct for EventInfo
type EventInfo struct {
	Name             NullableString        `json:"name,omitempty"`
	DeclaringType    *Type                 `json:"declaringType,omitempty"`
	ReflectedType    *Type                 `json:"reflectedType,omitempty"`
	Module           *Module               `json:"module,omitempty"`
	CustomAttributes []CustomAttributeData `json:"customAttributes,omitempty"`
	IsCollectible    *bool                 `json:"isCollectible,omitempty"`
	MetadataToken    *int32                `json:"metadataToken,omitempty"`
	MemberType       *MemberTypes          `json:"memberType,omitempty"`
	Attributes       *EventAttributes      `json:"attributes,omitempty"`
	IsSpecialName    *bool                 `json:"isSpecialName,omitempty"`
	AddMethod        *MethodInfo           `json:"addMethod,omitempty"`
	RemoveMethod     *MethodInfo           `json:"removeMethod,omitempty"`
	RaiseMethod      *MethodInfo           `json:"raiseMethod,omitempty"`
	IsMulticast      *bool                 `json:"isMulticast,omitempty"`
	EventHandlerType *Type                 `json:"eventHandlerType,omitempty"`
}

// NewEventInfo instantiates a new EventInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventInfo() *EventInfo {
	this := EventInfo{}
	return &this
}

// NewEventInfoWithDefaults instantiates a new EventInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventInfoWithDefaults() *EventInfo {
	this := EventInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *EventInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *EventInfo) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *EventInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *EventInfo) UnsetName() {
	o.Name.Unset()
}

// GetDeclaringType returns the DeclaringType field value if set, zero value otherwise.
func (o *EventInfo) GetDeclaringType() Type {
	if o == nil || IsNil(o.DeclaringType) {
		var ret Type
		return ret
	}
	return *o.DeclaringType
}

// GetDeclaringTypeOk returns a tuple with the DeclaringType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetDeclaringTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.DeclaringType) {
		return nil, false
	}
	return o.DeclaringType, true
}

// HasDeclaringType returns a boolean if a field has been set.
func (o *EventInfo) HasDeclaringType() bool {
	if o != nil && !IsNil(o.DeclaringType) {
		return true
	}

	return false
}

// SetDeclaringType gets a reference to the given Type and assigns it to the DeclaringType field.
func (o *EventInfo) SetDeclaringType(v Type) {
	o.DeclaringType = &v
}

// GetReflectedType returns the ReflectedType field value if set, zero value otherwise.
func (o *EventInfo) GetReflectedType() Type {
	if o == nil || IsNil(o.ReflectedType) {
		var ret Type
		return ret
	}
	return *o.ReflectedType
}

// GetReflectedTypeOk returns a tuple with the ReflectedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetReflectedTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.ReflectedType) {
		return nil, false
	}
	return o.ReflectedType, true
}

// HasReflectedType returns a boolean if a field has been set.
func (o *EventInfo) HasReflectedType() bool {
	if o != nil && !IsNil(o.ReflectedType) {
		return true
	}

	return false
}

// SetReflectedType gets a reference to the given Type and assigns it to the ReflectedType field.
func (o *EventInfo) SetReflectedType(v Type) {
	o.ReflectedType = &v
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *EventInfo) GetModule() Module {
	if o == nil || IsNil(o.Module) {
		var ret Module
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetModuleOk() (*Module, bool) {
	if o == nil || IsNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *EventInfo) HasModule() bool {
	if o != nil && !IsNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given Module and assigns it to the Module field.
func (o *EventInfo) SetModule(v Module) {
	o.Module = &v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventInfo) GetCustomAttributes() []CustomAttributeData {
	if o == nil {
		var ret []CustomAttributeData
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventInfo) GetCustomAttributesOk() ([]CustomAttributeData, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *EventInfo) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []CustomAttributeData and assigns it to the CustomAttributes field.
func (o *EventInfo) SetCustomAttributes(v []CustomAttributeData) {
	o.CustomAttributes = v
}

// GetIsCollectible returns the IsCollectible field value if set, zero value otherwise.
func (o *EventInfo) GetIsCollectible() bool {
	if o == nil || IsNil(o.IsCollectible) {
		var ret bool
		return ret
	}
	return *o.IsCollectible
}

// GetIsCollectibleOk returns a tuple with the IsCollectible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetIsCollectibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCollectible) {
		return nil, false
	}
	return o.IsCollectible, true
}

// HasIsCollectible returns a boolean if a field has been set.
func (o *EventInfo) HasIsCollectible() bool {
	if o != nil && !IsNil(o.IsCollectible) {
		return true
	}

	return false
}

// SetIsCollectible gets a reference to the given bool and assigns it to the IsCollectible field.
func (o *EventInfo) SetIsCollectible(v bool) {
	o.IsCollectible = &v
}

// GetMetadataToken returns the MetadataToken field value if set, zero value otherwise.
func (o *EventInfo) GetMetadataToken() int32 {
	if o == nil || IsNil(o.MetadataToken) {
		var ret int32
		return ret
	}
	return *o.MetadataToken
}

// GetMetadataTokenOk returns a tuple with the MetadataToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetMetadataTokenOk() (*int32, bool) {
	if o == nil || IsNil(o.MetadataToken) {
		return nil, false
	}
	return o.MetadataToken, true
}

// HasMetadataToken returns a boolean if a field has been set.
func (o *EventInfo) HasMetadataToken() bool {
	if o != nil && !IsNil(o.MetadataToken) {
		return true
	}

	return false
}

// SetMetadataToken gets a reference to the given int32 and assigns it to the MetadataToken field.
func (o *EventInfo) SetMetadataToken(v int32) {
	o.MetadataToken = &v
}

// GetMemberType returns the MemberType field value if set, zero value otherwise.
func (o *EventInfo) GetMemberType() MemberTypes {
	if o == nil || IsNil(o.MemberType) {
		var ret MemberTypes
		return ret
	}
	return *o.MemberType
}

// GetMemberTypeOk returns a tuple with the MemberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetMemberTypeOk() (*MemberTypes, bool) {
	if o == nil || IsNil(o.MemberType) {
		return nil, false
	}
	return o.MemberType, true
}

// HasMemberType returns a boolean if a field has been set.
func (o *EventInfo) HasMemberType() bool {
	if o != nil && !IsNil(o.MemberType) {
		return true
	}

	return false
}

// SetMemberType gets a reference to the given MemberTypes and assigns it to the MemberType field.
func (o *EventInfo) SetMemberType(v MemberTypes) {
	o.MemberType = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *EventInfo) GetAttributes() EventAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret EventAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetAttributesOk() (*EventAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *EventInfo) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given EventAttributes and assigns it to the Attributes field.
func (o *EventInfo) SetAttributes(v EventAttributes) {
	o.Attributes = &v
}

// GetIsSpecialName returns the IsSpecialName field value if set, zero value otherwise.
func (o *EventInfo) GetIsSpecialName() bool {
	if o == nil || IsNil(o.IsSpecialName) {
		var ret bool
		return ret
	}
	return *o.IsSpecialName
}

// GetIsSpecialNameOk returns a tuple with the IsSpecialName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetIsSpecialNameOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSpecialName) {
		return nil, false
	}
	return o.IsSpecialName, true
}

// HasIsSpecialName returns a boolean if a field has been set.
func (o *EventInfo) HasIsSpecialName() bool {
	if o != nil && !IsNil(o.IsSpecialName) {
		return true
	}

	return false
}

// SetIsSpecialName gets a reference to the given bool and assigns it to the IsSpecialName field.
func (o *EventInfo) SetIsSpecialName(v bool) {
	o.IsSpecialName = &v
}

// GetAddMethod returns the AddMethod field value if set, zero value otherwise.
func (o *EventInfo) GetAddMethod() MethodInfo {
	if o == nil || IsNil(o.AddMethod) {
		var ret MethodInfo
		return ret
	}
	return *o.AddMethod
}

// GetAddMethodOk returns a tuple with the AddMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetAddMethodOk() (*MethodInfo, bool) {
	if o == nil || IsNil(o.AddMethod) {
		return nil, false
	}
	return o.AddMethod, true
}

// HasAddMethod returns a boolean if a field has been set.
func (o *EventInfo) HasAddMethod() bool {
	if o != nil && !IsNil(o.AddMethod) {
		return true
	}

	return false
}

// SetAddMethod gets a reference to the given MethodInfo and assigns it to the AddMethod field.
func (o *EventInfo) SetAddMethod(v MethodInfo) {
	o.AddMethod = &v
}

// GetRemoveMethod returns the RemoveMethod field value if set, zero value otherwise.
func (o *EventInfo) GetRemoveMethod() MethodInfo {
	if o == nil || IsNil(o.RemoveMethod) {
		var ret MethodInfo
		return ret
	}
	return *o.RemoveMethod
}

// GetRemoveMethodOk returns a tuple with the RemoveMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetRemoveMethodOk() (*MethodInfo, bool) {
	if o == nil || IsNil(o.RemoveMethod) {
		return nil, false
	}
	return o.RemoveMethod, true
}

// HasRemoveMethod returns a boolean if a field has been set.
func (o *EventInfo) HasRemoveMethod() bool {
	if o != nil && !IsNil(o.RemoveMethod) {
		return true
	}

	return false
}

// SetRemoveMethod gets a reference to the given MethodInfo and assigns it to the RemoveMethod field.
func (o *EventInfo) SetRemoveMethod(v MethodInfo) {
	o.RemoveMethod = &v
}

// GetRaiseMethod returns the RaiseMethod field value if set, zero value otherwise.
func (o *EventInfo) GetRaiseMethod() MethodInfo {
	if o == nil || IsNil(o.RaiseMethod) {
		var ret MethodInfo
		return ret
	}
	return *o.RaiseMethod
}

// GetRaiseMethodOk returns a tuple with the RaiseMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetRaiseMethodOk() (*MethodInfo, bool) {
	if o == nil || IsNil(o.RaiseMethod) {
		return nil, false
	}
	return o.RaiseMethod, true
}

// HasRaiseMethod returns a boolean if a field has been set.
func (o *EventInfo) HasRaiseMethod() bool {
	if o != nil && !IsNil(o.RaiseMethod) {
		return true
	}

	return false
}

// SetRaiseMethod gets a reference to the given MethodInfo and assigns it to the RaiseMethod field.
func (o *EventInfo) SetRaiseMethod(v MethodInfo) {
	o.RaiseMethod = &v
}

// GetIsMulticast returns the IsMulticast field value if set, zero value otherwise.
func (o *EventInfo) GetIsMulticast() bool {
	if o == nil || IsNil(o.IsMulticast) {
		var ret bool
		return ret
	}
	return *o.IsMulticast
}

// GetIsMulticastOk returns a tuple with the IsMulticast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetIsMulticastOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMulticast) {
		return nil, false
	}
	return o.IsMulticast, true
}

// HasIsMulticast returns a boolean if a field has been set.
func (o *EventInfo) HasIsMulticast() bool {
	if o != nil && !IsNil(o.IsMulticast) {
		return true
	}

	return false
}

// SetIsMulticast gets a reference to the given bool and assigns it to the IsMulticast field.
func (o *EventInfo) SetIsMulticast(v bool) {
	o.IsMulticast = &v
}

// GetEventHandlerType returns the EventHandlerType field value if set, zero value otherwise.
func (o *EventInfo) GetEventHandlerType() Type {
	if o == nil || IsNil(o.EventHandlerType) {
		var ret Type
		return ret
	}
	return *o.EventHandlerType
}

// GetEventHandlerTypeOk returns a tuple with the EventHandlerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfo) GetEventHandlerTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.EventHandlerType) {
		return nil, false
	}
	return o.EventHandlerType, true
}

// HasEventHandlerType returns a boolean if a field has been set.
func (o *EventInfo) HasEventHandlerType() bool {
	if o != nil && !IsNil(o.EventHandlerType) {
		return true
	}

	return false
}

// SetEventHandlerType gets a reference to the given Type and assigns it to the EventHandlerType field.
func (o *EventInfo) SetEventHandlerType(v Type) {
	o.EventHandlerType = &v
}

func (o EventInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.DeclaringType) {
		toSerialize["declaringType"] = o.DeclaringType
	}
	if !IsNil(o.ReflectedType) {
		toSerialize["reflectedType"] = o.ReflectedType
	}
	if !IsNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	if o.CustomAttributes != nil {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	if !IsNil(o.IsCollectible) {
		toSerialize["isCollectible"] = o.IsCollectible
	}
	if !IsNil(o.MetadataToken) {
		toSerialize["metadataToken"] = o.MetadataToken
	}
	if !IsNil(o.MemberType) {
		toSerialize["memberType"] = o.MemberType
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.IsSpecialName) {
		toSerialize["isSpecialName"] = o.IsSpecialName
	}
	if !IsNil(o.AddMethod) {
		toSerialize["addMethod"] = o.AddMethod
	}
	if !IsNil(o.RemoveMethod) {
		toSerialize["removeMethod"] = o.RemoveMethod
	}
	if !IsNil(o.RaiseMethod) {
		toSerialize["raiseMethod"] = o.RaiseMethod
	}
	if !IsNil(o.IsMulticast) {
		toSerialize["isMulticast"] = o.IsMulticast
	}
	if !IsNil(o.EventHandlerType) {
		toSerialize["eventHandlerType"] = o.EventHandlerType
	}
	return toSerialize, nil
}

type NullableEventInfo struct {
	value *EventInfo
	isSet bool
}

func (v NullableEventInfo) Get() *EventInfo {
	return v.value
}

func (v *NullableEventInfo) Set(val *EventInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEventInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEventInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventInfo(val *EventInfo) *NullableEventInfo {
	return &NullableEventInfo{value: val, isSet: true}
}

func (v NullableEventInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
