/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EdmOnDeleteAction the model 'EdmOnDeleteAction'
type EdmOnDeleteAction string

// List of EdmOnDeleteAction
const (
	NONE    EdmOnDeleteAction = "None"
	CASCADE EdmOnDeleteAction = "Cascade"
)

// All allowed values of EdmOnDeleteAction enum
var AllowedEdmOnDeleteActionEnumValues = []EdmOnDeleteAction{
	"None",
	"Cascade",
}

func (v *EdmOnDeleteAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EdmOnDeleteAction(value)
	for _, existing := range AllowedEdmOnDeleteActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EdmOnDeleteAction", value)
}

// NewEdmOnDeleteActionFromValue returns a pointer to a valid EdmOnDeleteAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEdmOnDeleteActionFromValue(v string) (*EdmOnDeleteAction, error) {
	ev := EdmOnDeleteAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EdmOnDeleteAction: valid values are %v", v, AllowedEdmOnDeleteActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EdmOnDeleteAction) IsValid() bool {
	for _, existing := range AllowedEdmOnDeleteActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EdmOnDeleteAction value
func (v EdmOnDeleteAction) Ptr() *EdmOnDeleteAction {
	return &v
}

type NullableEdmOnDeleteAction struct {
	value *EdmOnDeleteAction
	isSet bool
}

func (v NullableEdmOnDeleteAction) Get() *EdmOnDeleteAction {
	return v.value
}

func (v *NullableEdmOnDeleteAction) Set(val *EdmOnDeleteAction) {
	v.value = val
	v.isSet = true
}

func (v NullableEdmOnDeleteAction) IsSet() bool {
	return v.isSet
}

func (v *NullableEdmOnDeleteAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdmOnDeleteAction(val *EdmOnDeleteAction) *NullableEdmOnDeleteAction {
	return &NullableEdmOnDeleteAction{value: val, isSet: true}
}

func (v NullableEdmOnDeleteAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdmOnDeleteAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
