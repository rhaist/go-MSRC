/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IEdmPathExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IEdmPathExpression{}

// IEdmPathExpression struct for IEdmPathExpression
type IEdmPathExpression struct {
	PathSegments   []string           `json:"pathSegments,omitempty"`
	Path           NullableString     `json:"path,omitempty"`
	ExpressionKind *EdmExpressionKind `json:"expressionKind,omitempty"`
}

// NewIEdmPathExpression instantiates a new IEdmPathExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIEdmPathExpression() *IEdmPathExpression {
	this := IEdmPathExpression{}
	return &this
}

// NewIEdmPathExpressionWithDefaults instantiates a new IEdmPathExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIEdmPathExpressionWithDefaults() *IEdmPathExpression {
	this := IEdmPathExpression{}
	return &this
}

// GetPathSegments returns the PathSegments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IEdmPathExpression) GetPathSegments() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.PathSegments
}

// GetPathSegmentsOk returns a tuple with the PathSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IEdmPathExpression) GetPathSegmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.PathSegments) {
		return nil, false
	}
	return o.PathSegments, true
}

// HasPathSegments returns a boolean if a field has been set.
func (o *IEdmPathExpression) HasPathSegments() bool {
	if o != nil && !IsNil(o.PathSegments) {
		return true
	}

	return false
}

// SetPathSegments gets a reference to the given []string and assigns it to the PathSegments field.
func (o *IEdmPathExpression) SetPathSegments(v []string) {
	o.PathSegments = v
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IEdmPathExpression) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IEdmPathExpression) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *IEdmPathExpression) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *IEdmPathExpression) SetPath(v string) {
	o.Path.Set(&v)
}

// SetPathNil sets the value for Path to be an explicit nil
func (o *IEdmPathExpression) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *IEdmPathExpression) UnsetPath() {
	o.Path.Unset()
}

// GetExpressionKind returns the ExpressionKind field value if set, zero value otherwise.
func (o *IEdmPathExpression) GetExpressionKind() EdmExpressionKind {
	if o == nil || IsNil(o.ExpressionKind) {
		var ret EdmExpressionKind
		return ret
	}
	return *o.ExpressionKind
}

// GetExpressionKindOk returns a tuple with the ExpressionKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEdmPathExpression) GetExpressionKindOk() (*EdmExpressionKind, bool) {
	if o == nil || IsNil(o.ExpressionKind) {
		return nil, false
	}
	return o.ExpressionKind, true
}

// HasExpressionKind returns a boolean if a field has been set.
func (o *IEdmPathExpression) HasExpressionKind() bool {
	if o != nil && !IsNil(o.ExpressionKind) {
		return true
	}

	return false
}

// SetExpressionKind gets a reference to the given EdmExpressionKind and assigns it to the ExpressionKind field.
func (o *IEdmPathExpression) SetExpressionKind(v EdmExpressionKind) {
	o.ExpressionKind = &v
}

func (o IEdmPathExpression) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IEdmPathExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PathSegments != nil {
		toSerialize["pathSegments"] = o.PathSegments
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if !IsNil(o.ExpressionKind) {
		toSerialize["expressionKind"] = o.ExpressionKind
	}
	return toSerialize, nil
}

type NullableIEdmPathExpression struct {
	value *IEdmPathExpression
	isSet bool
}

func (v NullableIEdmPathExpression) Get() *IEdmPathExpression {
	return v.value
}

func (v *NullableIEdmPathExpression) Set(val *IEdmPathExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableIEdmPathExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableIEdmPathExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIEdmPathExpression(val *IEdmPathExpression) *NullableIEdmPathExpression {
	return &NullableIEdmPathExpression{value: val, isSet: true}
}

func (v NullableIEdmPathExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIEdmPathExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
