/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionInfo{}

// ConnectionInfo struct for ConnectionInfo
type ConnectionInfo struct {
	Id                NullableString    `json:"id,omitempty"`
	RemoteIpAddress   *IPAddress        `json:"remoteIpAddress,omitempty"`
	RemotePort        *int32            `json:"remotePort,omitempty"`
	LocalIpAddress    *IPAddress        `json:"localIpAddress,omitempty"`
	LocalPort         *int32            `json:"localPort,omitempty"`
	ClientCertificate *X509Certificate2 `json:"clientCertificate,omitempty"`
}

// NewConnectionInfo instantiates a new ConnectionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionInfo() *ConnectionInfo {
	this := ConnectionInfo{}
	return &this
}

// NewConnectionInfoWithDefaults instantiates a new ConnectionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionInfoWithDefaults() *ConnectionInfo {
	this := ConnectionInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectionInfo) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectionInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ConnectionInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ConnectionInfo) SetId(v string) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *ConnectionInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ConnectionInfo) UnsetId() {
	o.Id.Unset()
}

// GetRemoteIpAddress returns the RemoteIpAddress field value if set, zero value otherwise.
func (o *ConnectionInfo) GetRemoteIpAddress() IPAddress {
	if o == nil || IsNil(o.RemoteIpAddress) {
		var ret IPAddress
		return ret
	}
	return *o.RemoteIpAddress
}

// GetRemoteIpAddressOk returns a tuple with the RemoteIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetRemoteIpAddressOk() (*IPAddress, bool) {
	if o == nil || IsNil(o.RemoteIpAddress) {
		return nil, false
	}
	return o.RemoteIpAddress, true
}

// HasRemoteIpAddress returns a boolean if a field has been set.
func (o *ConnectionInfo) HasRemoteIpAddress() bool {
	if o != nil && !IsNil(o.RemoteIpAddress) {
		return true
	}

	return false
}

// SetRemoteIpAddress gets a reference to the given IPAddress and assigns it to the RemoteIpAddress field.
func (o *ConnectionInfo) SetRemoteIpAddress(v IPAddress) {
	o.RemoteIpAddress = &v
}

// GetRemotePort returns the RemotePort field value if set, zero value otherwise.
func (o *ConnectionInfo) GetRemotePort() int32 {
	if o == nil || IsNil(o.RemotePort) {
		var ret int32
		return ret
	}
	return *o.RemotePort
}

// GetRemotePortOk returns a tuple with the RemotePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetRemotePortOk() (*int32, bool) {
	if o == nil || IsNil(o.RemotePort) {
		return nil, false
	}
	return o.RemotePort, true
}

// HasRemotePort returns a boolean if a field has been set.
func (o *ConnectionInfo) HasRemotePort() bool {
	if o != nil && !IsNil(o.RemotePort) {
		return true
	}

	return false
}

// SetRemotePort gets a reference to the given int32 and assigns it to the RemotePort field.
func (o *ConnectionInfo) SetRemotePort(v int32) {
	o.RemotePort = &v
}

// GetLocalIpAddress returns the LocalIpAddress field value if set, zero value otherwise.
func (o *ConnectionInfo) GetLocalIpAddress() IPAddress {
	if o == nil || IsNil(o.LocalIpAddress) {
		var ret IPAddress
		return ret
	}
	return *o.LocalIpAddress
}

// GetLocalIpAddressOk returns a tuple with the LocalIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetLocalIpAddressOk() (*IPAddress, bool) {
	if o == nil || IsNil(o.LocalIpAddress) {
		return nil, false
	}
	return o.LocalIpAddress, true
}

// HasLocalIpAddress returns a boolean if a field has been set.
func (o *ConnectionInfo) HasLocalIpAddress() bool {
	if o != nil && !IsNil(o.LocalIpAddress) {
		return true
	}

	return false
}

// SetLocalIpAddress gets a reference to the given IPAddress and assigns it to the LocalIpAddress field.
func (o *ConnectionInfo) SetLocalIpAddress(v IPAddress) {
	o.LocalIpAddress = &v
}

// GetLocalPort returns the LocalPort field value if set, zero value otherwise.
func (o *ConnectionInfo) GetLocalPort() int32 {
	if o == nil || IsNil(o.LocalPort) {
		var ret int32
		return ret
	}
	return *o.LocalPort
}

// GetLocalPortOk returns a tuple with the LocalPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetLocalPortOk() (*int32, bool) {
	if o == nil || IsNil(o.LocalPort) {
		return nil, false
	}
	return o.LocalPort, true
}

// HasLocalPort returns a boolean if a field has been set.
func (o *ConnectionInfo) HasLocalPort() bool {
	if o != nil && !IsNil(o.LocalPort) {
		return true
	}

	return false
}

// SetLocalPort gets a reference to the given int32 and assigns it to the LocalPort field.
func (o *ConnectionInfo) SetLocalPort(v int32) {
	o.LocalPort = &v
}

// GetClientCertificate returns the ClientCertificate field value if set, zero value otherwise.
func (o *ConnectionInfo) GetClientCertificate() X509Certificate2 {
	if o == nil || IsNil(o.ClientCertificate) {
		var ret X509Certificate2
		return ret
	}
	return *o.ClientCertificate
}

// GetClientCertificateOk returns a tuple with the ClientCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetClientCertificateOk() (*X509Certificate2, bool) {
	if o == nil || IsNil(o.ClientCertificate) {
		return nil, false
	}
	return o.ClientCertificate, true
}

// HasClientCertificate returns a boolean if a field has been set.
func (o *ConnectionInfo) HasClientCertificate() bool {
	if o != nil && !IsNil(o.ClientCertificate) {
		return true
	}

	return false
}

// SetClientCertificate gets a reference to the given X509Certificate2 and assigns it to the ClientCertificate field.
func (o *ConnectionInfo) SetClientCertificate(v X509Certificate2) {
	o.ClientCertificate = &v
}

func (o ConnectionInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.RemoteIpAddress) {
		toSerialize["remoteIpAddress"] = o.RemoteIpAddress
	}
	if !IsNil(o.RemotePort) {
		toSerialize["remotePort"] = o.RemotePort
	}
	if !IsNil(o.LocalIpAddress) {
		toSerialize["localIpAddress"] = o.LocalIpAddress
	}
	if !IsNil(o.LocalPort) {
		toSerialize["localPort"] = o.LocalPort
	}
	if !IsNil(o.ClientCertificate) {
		toSerialize["clientCertificate"] = o.ClientCertificate
	}
	return toSerialize, nil
}

type NullableConnectionInfo struct {
	value *ConnectionInfo
	isSet bool
}

func (v NullableConnectionInfo) Get() *ConnectionInfo {
	return v.value
}

func (v *NullableConnectionInfo) Set(val *ConnectionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionInfo(val *ConnectionInfo) *NullableConnectionInfo {
	return &NullableConnectionInfo{value: val, isSet: true}
}

func (v NullableConnectionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
