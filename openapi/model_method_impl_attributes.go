/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MethodImplAttributes the model 'MethodImplAttributes'
type MethodImplAttributes string

// List of MethodImplAttributes
const (
	IL                      MethodImplAttributes = "IL"
	NATIVE                  MethodImplAttributes = "Native"
	OPTIL                   MethodImplAttributes = "OPTIL"
	CODE_TYPE_MASK          MethodImplAttributes = "CodeTypeMask"
	MANAGED_MASK            MethodImplAttributes = "ManagedMask"
	NO_INLINING             MethodImplAttributes = "NoInlining"
	FORWARD_REF             MethodImplAttributes = "ForwardRef"
	SYNCHRONIZED            MethodImplAttributes = "Synchronized"
	NO_OPTIMIZATION         MethodImplAttributes = "NoOptimization"
	PRESERVE_SIG            MethodImplAttributes = "PreserveSig"
	AGGRESSIVE_INLINING     MethodImplAttributes = "AggressiveInlining"
	AGGRESSIVE_OPTIMIZATION MethodImplAttributes = "AggressiveOptimization"
	INTERNAL_CALL           MethodImplAttributes = "InternalCall"
	MAX_METHOD_IMPL_VAL     MethodImplAttributes = "MaxMethodImplVal"
)

// All allowed values of MethodImplAttributes enum
var AllowedMethodImplAttributesEnumValues = []MethodImplAttributes{
	"IL",
	"Native",
	"OPTIL",
	"CodeTypeMask",
	"ManagedMask",
	"NoInlining",
	"ForwardRef",
	"Synchronized",
	"NoOptimization",
	"PreserveSig",
	"AggressiveInlining",
	"AggressiveOptimization",
	"InternalCall",
	"MaxMethodImplVal",
}

func (v *MethodImplAttributes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MethodImplAttributes(value)
	for _, existing := range AllowedMethodImplAttributesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MethodImplAttributes", value)
}

// NewMethodImplAttributesFromValue returns a pointer to a valid MethodImplAttributes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMethodImplAttributesFromValue(v string) (*MethodImplAttributes, error) {
	ev := MethodImplAttributes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MethodImplAttributes: valid values are %v", v, AllowedMethodImplAttributesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MethodImplAttributes) IsValid() bool {
	for _, existing := range AllowedMethodImplAttributesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MethodImplAttributes value
func (v MethodImplAttributes) Ptr() *MethodImplAttributes {
	return &v
}

type NullableMethodImplAttributes struct {
	value *MethodImplAttributes
	isSet bool
}

func (v NullableMethodImplAttributes) Get() *MethodImplAttributes {
	return v.value
}

func (v *NullableMethodImplAttributes) Set(val *MethodImplAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableMethodImplAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableMethodImplAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMethodImplAttributes(val *MethodImplAttributes) *NullableMethodImplAttributes {
	return &NullableMethodImplAttributes{value: val, isSet: true}
}

func (v NullableMethodImplAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMethodImplAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
