/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Type type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Type{}

// Type struct for Type
type Type struct {
	Name                       NullableString              `json:"name,omitempty"`
	CustomAttributes           []CustomAttributeData       `json:"customAttributes,omitempty"`
	IsCollectible              *bool                       `json:"isCollectible,omitempty"`
	MetadataToken              *int32                      `json:"metadataToken,omitempty"`
	IsInterface                *bool                       `json:"isInterface,omitempty"`
	MemberType                 *MemberTypes                `json:"memberType,omitempty"`
	Namespace                  NullableString              `json:"namespace,omitempty"`
	AssemblyQualifiedName      NullableString              `json:"assemblyQualifiedName,omitempty"`
	FullName                   NullableString              `json:"fullName,omitempty"`
	Assembly                   *Assembly                   `json:"assembly,omitempty"`
	Module                     *Module                     `json:"module,omitempty"`
	IsNested                   *bool                       `json:"isNested,omitempty"`
	DeclaringType              *Type                       `json:"declaringType,omitempty"`
	DeclaringMethod            *MethodBase                 `json:"declaringMethod,omitempty"`
	ReflectedType              *Type                       `json:"reflectedType,omitempty"`
	UnderlyingSystemType       *Type                       `json:"underlyingSystemType,omitempty"`
	IsTypeDefinition           *bool                       `json:"isTypeDefinition,omitempty"`
	IsArray                    *bool                       `json:"isArray,omitempty"`
	IsByRef                    *bool                       `json:"isByRef,omitempty"`
	IsPointer                  *bool                       `json:"isPointer,omitempty"`
	IsConstructedGenericType   *bool                       `json:"isConstructedGenericType,omitempty"`
	IsGenericParameter         *bool                       `json:"isGenericParameter,omitempty"`
	IsGenericTypeParameter     *bool                       `json:"isGenericTypeParameter,omitempty"`
	IsGenericMethodParameter   *bool                       `json:"isGenericMethodParameter,omitempty"`
	IsGenericType              *bool                       `json:"isGenericType,omitempty"`
	IsGenericTypeDefinition    *bool                       `json:"isGenericTypeDefinition,omitempty"`
	IsSZArray                  *bool                       `json:"isSZArray,omitempty"`
	IsVariableBoundArray       *bool                       `json:"isVariableBoundArray,omitempty"`
	IsByRefLike                *bool                       `json:"isByRefLike,omitempty"`
	HasElementType             *bool                       `json:"hasElementType,omitempty"`
	GenericTypeArguments       []Type                      `json:"genericTypeArguments,omitempty"`
	GenericParameterPosition   *int32                      `json:"genericParameterPosition,omitempty"`
	GenericParameterAttributes *GenericParameterAttributes `json:"genericParameterAttributes,omitempty"`
	Attributes                 *TypeAttributes             `json:"attributes,omitempty"`
	IsAbstract                 *bool                       `json:"isAbstract,omitempty"`
	IsImport                   *bool                       `json:"isImport,omitempty"`
	IsSealed                   *bool                       `json:"isSealed,omitempty"`
	IsSpecialName              *bool                       `json:"isSpecialName,omitempty"`
	IsClass                    *bool                       `json:"isClass,omitempty"`
	IsNestedAssembly           *bool                       `json:"isNestedAssembly,omitempty"`
	IsNestedFamANDAssem        *bool                       `json:"isNestedFamANDAssem,omitempty"`
	IsNestedFamily             *bool                       `json:"isNestedFamily,omitempty"`
	IsNestedFamORAssem         *bool                       `json:"isNestedFamORAssem,omitempty"`
	IsNestedPrivate            *bool                       `json:"isNestedPrivate,omitempty"`
	IsNestedPublic             *bool                       `json:"isNestedPublic,omitempty"`
	IsNotPublic                *bool                       `json:"isNotPublic,omitempty"`
	IsPublic                   *bool                       `json:"isPublic,omitempty"`
	IsAutoLayout               *bool                       `json:"isAutoLayout,omitempty"`
	IsExplicitLayout           *bool                       `json:"isExplicitLayout,omitempty"`
	IsLayoutSequential         *bool                       `json:"isLayoutSequential,omitempty"`
	IsAnsiClass                *bool                       `json:"isAnsiClass,omitempty"`
	IsAutoClass                *bool                       `json:"isAutoClass,omitempty"`
	IsUnicodeClass             *bool                       `json:"isUnicodeClass,omitempty"`
	IsCOMObject                *bool                       `json:"isCOMObject,omitempty"`
	IsContextful               *bool                       `json:"isContextful,omitempty"`
	IsEnum                     *bool                       `json:"isEnum,omitempty"`
	IsMarshalByRef             *bool                       `json:"isMarshalByRef,omitempty"`
	IsPrimitive                *bool                       `json:"isPrimitive,omitempty"`
	IsValueType                *bool                       `json:"isValueType,omitempty"`
	IsSignatureType            *bool                       `json:"isSignatureType,omitempty"`
	IsSecurityCritical         *bool                       `json:"isSecurityCritical,omitempty"`
	IsSecuritySafeCritical     *bool                       `json:"isSecuritySafeCritical,omitempty"`
	IsSecurityTransparent      *bool                       `json:"isSecurityTransparent,omitempty"`
	StructLayoutAttribute      *StructLayoutAttribute      `json:"structLayoutAttribute,omitempty"`
	TypeInitializer            *ConstructorInfo            `json:"typeInitializer,omitempty"`
	TypeHandle                 *RuntimeTypeHandle          `json:"typeHandle,omitempty"`
	Guid                       *string                     `json:"guid,omitempty"`
	BaseType                   *Type                       `json:"baseType,omitempty"`
	IsSerializable             *bool                       `json:"isSerializable,omitempty"`
	ContainsGenericParameters  *bool                       `json:"containsGenericParameters,omitempty"`
	IsVisible                  *bool                       `json:"isVisible,omitempty"`
}

// NewType instantiates a new Type object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewType() *Type {
	this := Type{}
	return &this
}

// NewTypeWithDefaults instantiates a new Type object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypeWithDefaults() *Type {
	this := Type{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Type) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Type) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Type) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Type) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *Type) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Type) UnsetName() {
	o.Name.Unset()
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Type) GetCustomAttributes() []CustomAttributeData {
	if o == nil {
		var ret []CustomAttributeData
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Type) GetCustomAttributesOk() ([]CustomAttributeData, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *Type) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []CustomAttributeData and assigns it to the CustomAttributes field.
func (o *Type) SetCustomAttributes(v []CustomAttributeData) {
	o.CustomAttributes = v
}

// GetIsCollectible returns the IsCollectible field value if set, zero value otherwise.
func (o *Type) GetIsCollectible() bool {
	if o == nil || IsNil(o.IsCollectible) {
		var ret bool
		return ret
	}
	return *o.IsCollectible
}

// GetIsCollectibleOk returns a tuple with the IsCollectible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsCollectibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCollectible) {
		return nil, false
	}
	return o.IsCollectible, true
}

// HasIsCollectible returns a boolean if a field has been set.
func (o *Type) HasIsCollectible() bool {
	if o != nil && !IsNil(o.IsCollectible) {
		return true
	}

	return false
}

// SetIsCollectible gets a reference to the given bool and assigns it to the IsCollectible field.
func (o *Type) SetIsCollectible(v bool) {
	o.IsCollectible = &v
}

// GetMetadataToken returns the MetadataToken field value if set, zero value otherwise.
func (o *Type) GetMetadataToken() int32 {
	if o == nil || IsNil(o.MetadataToken) {
		var ret int32
		return ret
	}
	return *o.MetadataToken
}

// GetMetadataTokenOk returns a tuple with the MetadataToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetMetadataTokenOk() (*int32, bool) {
	if o == nil || IsNil(o.MetadataToken) {
		return nil, false
	}
	return o.MetadataToken, true
}

// HasMetadataToken returns a boolean if a field has been set.
func (o *Type) HasMetadataToken() bool {
	if o != nil && !IsNil(o.MetadataToken) {
		return true
	}

	return false
}

// SetMetadataToken gets a reference to the given int32 and assigns it to the MetadataToken field.
func (o *Type) SetMetadataToken(v int32) {
	o.MetadataToken = &v
}

// GetIsInterface returns the IsInterface field value if set, zero value otherwise.
func (o *Type) GetIsInterface() bool {
	if o == nil || IsNil(o.IsInterface) {
		var ret bool
		return ret
	}
	return *o.IsInterface
}

// GetIsInterfaceOk returns a tuple with the IsInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsInterfaceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInterface) {
		return nil, false
	}
	return o.IsInterface, true
}

// HasIsInterface returns a boolean if a field has been set.
func (o *Type) HasIsInterface() bool {
	if o != nil && !IsNil(o.IsInterface) {
		return true
	}

	return false
}

// SetIsInterface gets a reference to the given bool and assigns it to the IsInterface field.
func (o *Type) SetIsInterface(v bool) {
	o.IsInterface = &v
}

// GetMemberType returns the MemberType field value if set, zero value otherwise.
func (o *Type) GetMemberType() MemberTypes {
	if o == nil || IsNil(o.MemberType) {
		var ret MemberTypes
		return ret
	}
	return *o.MemberType
}

// GetMemberTypeOk returns a tuple with the MemberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetMemberTypeOk() (*MemberTypes, bool) {
	if o == nil || IsNil(o.MemberType) {
		return nil, false
	}
	return o.MemberType, true
}

// HasMemberType returns a boolean if a field has been set.
func (o *Type) HasMemberType() bool {
	if o != nil && !IsNil(o.MemberType) {
		return true
	}

	return false
}

// SetMemberType gets a reference to the given MemberTypes and assigns it to the MemberType field.
func (o *Type) SetMemberType(v MemberTypes) {
	o.MemberType = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Type) GetNamespace() string {
	if o == nil || IsNil(o.Namespace.Get()) {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Type) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *Type) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *Type) SetNamespace(v string) {
	o.Namespace.Set(&v)
}

// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *Type) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *Type) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetAssemblyQualifiedName returns the AssemblyQualifiedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Type) GetAssemblyQualifiedName() string {
	if o == nil || IsNil(o.AssemblyQualifiedName.Get()) {
		var ret string
		return ret
	}
	return *o.AssemblyQualifiedName.Get()
}

// GetAssemblyQualifiedNameOk returns a tuple with the AssemblyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Type) GetAssemblyQualifiedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssemblyQualifiedName.Get(), o.AssemblyQualifiedName.IsSet()
}

// HasAssemblyQualifiedName returns a boolean if a field has been set.
func (o *Type) HasAssemblyQualifiedName() bool {
	if o != nil && o.AssemblyQualifiedName.IsSet() {
		return true
	}

	return false
}

// SetAssemblyQualifiedName gets a reference to the given NullableString and assigns it to the AssemblyQualifiedName field.
func (o *Type) SetAssemblyQualifiedName(v string) {
	o.AssemblyQualifiedName.Set(&v)
}

// SetAssemblyQualifiedNameNil sets the value for AssemblyQualifiedName to be an explicit nil
func (o *Type) SetAssemblyQualifiedNameNil() {
	o.AssemblyQualifiedName.Set(nil)
}

// UnsetAssemblyQualifiedName ensures that no value is present for AssemblyQualifiedName, not even an explicit nil
func (o *Type) UnsetAssemblyQualifiedName() {
	o.AssemblyQualifiedName.Unset()
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Type) GetFullName() string {
	if o == nil || IsNil(o.FullName.Get()) {
		var ret string
		return ret
	}
	return *o.FullName.Get()
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Type) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullName.Get(), o.FullName.IsSet()
}

// HasFullName returns a boolean if a field has been set.
func (o *Type) HasFullName() bool {
	if o != nil && o.FullName.IsSet() {
		return true
	}

	return false
}

// SetFullName gets a reference to the given NullableString and assigns it to the FullName field.
func (o *Type) SetFullName(v string) {
	o.FullName.Set(&v)
}

// SetFullNameNil sets the value for FullName to be an explicit nil
func (o *Type) SetFullNameNil() {
	o.FullName.Set(nil)
}

// UnsetFullName ensures that no value is present for FullName, not even an explicit nil
func (o *Type) UnsetFullName() {
	o.FullName.Unset()
}

// GetAssembly returns the Assembly field value if set, zero value otherwise.
func (o *Type) GetAssembly() Assembly {
	if o == nil || IsNil(o.Assembly) {
		var ret Assembly
		return ret
	}
	return *o.Assembly
}

// GetAssemblyOk returns a tuple with the Assembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetAssemblyOk() (*Assembly, bool) {
	if o == nil || IsNil(o.Assembly) {
		return nil, false
	}
	return o.Assembly, true
}

// HasAssembly returns a boolean if a field has been set.
func (o *Type) HasAssembly() bool {
	if o != nil && !IsNil(o.Assembly) {
		return true
	}

	return false
}

// SetAssembly gets a reference to the given Assembly and assigns it to the Assembly field.
func (o *Type) SetAssembly(v Assembly) {
	o.Assembly = &v
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *Type) GetModule() Module {
	if o == nil || IsNil(o.Module) {
		var ret Module
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetModuleOk() (*Module, bool) {
	if o == nil || IsNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *Type) HasModule() bool {
	if o != nil && !IsNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given Module and assigns it to the Module field.
func (o *Type) SetModule(v Module) {
	o.Module = &v
}

// GetIsNested returns the IsNested field value if set, zero value otherwise.
func (o *Type) GetIsNested() bool {
	if o == nil || IsNil(o.IsNested) {
		var ret bool
		return ret
	}
	return *o.IsNested
}

// GetIsNestedOk returns a tuple with the IsNested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsNestedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNested) {
		return nil, false
	}
	return o.IsNested, true
}

// HasIsNested returns a boolean if a field has been set.
func (o *Type) HasIsNested() bool {
	if o != nil && !IsNil(o.IsNested) {
		return true
	}

	return false
}

// SetIsNested gets a reference to the given bool and assigns it to the IsNested field.
func (o *Type) SetIsNested(v bool) {
	o.IsNested = &v
}

// GetDeclaringType returns the DeclaringType field value if set, zero value otherwise.
func (o *Type) GetDeclaringType() Type {
	if o == nil || IsNil(o.DeclaringType) {
		var ret Type
		return ret
	}
	return *o.DeclaringType
}

// GetDeclaringTypeOk returns a tuple with the DeclaringType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetDeclaringTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.DeclaringType) {
		return nil, false
	}
	return o.DeclaringType, true
}

// HasDeclaringType returns a boolean if a field has been set.
func (o *Type) HasDeclaringType() bool {
	if o != nil && !IsNil(o.DeclaringType) {
		return true
	}

	return false
}

// SetDeclaringType gets a reference to the given Type and assigns it to the DeclaringType field.
func (o *Type) SetDeclaringType(v Type) {
	o.DeclaringType = &v
}

// GetDeclaringMethod returns the DeclaringMethod field value if set, zero value otherwise.
func (o *Type) GetDeclaringMethod() MethodBase {
	if o == nil || IsNil(o.DeclaringMethod) {
		var ret MethodBase
		return ret
	}
	return *o.DeclaringMethod
}

// GetDeclaringMethodOk returns a tuple with the DeclaringMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetDeclaringMethodOk() (*MethodBase, bool) {
	if o == nil || IsNil(o.DeclaringMethod) {
		return nil, false
	}
	return o.DeclaringMethod, true
}

// HasDeclaringMethod returns a boolean if a field has been set.
func (o *Type) HasDeclaringMethod() bool {
	if o != nil && !IsNil(o.DeclaringMethod) {
		return true
	}

	return false
}

// SetDeclaringMethod gets a reference to the given MethodBase and assigns it to the DeclaringMethod field.
func (o *Type) SetDeclaringMethod(v MethodBase) {
	o.DeclaringMethod = &v
}

// GetReflectedType returns the ReflectedType field value if set, zero value otherwise.
func (o *Type) GetReflectedType() Type {
	if o == nil || IsNil(o.ReflectedType) {
		var ret Type
		return ret
	}
	return *o.ReflectedType
}

// GetReflectedTypeOk returns a tuple with the ReflectedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetReflectedTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.ReflectedType) {
		return nil, false
	}
	return o.ReflectedType, true
}

// HasReflectedType returns a boolean if a field has been set.
func (o *Type) HasReflectedType() bool {
	if o != nil && !IsNil(o.ReflectedType) {
		return true
	}

	return false
}

// SetReflectedType gets a reference to the given Type and assigns it to the ReflectedType field.
func (o *Type) SetReflectedType(v Type) {
	o.ReflectedType = &v
}

// GetUnderlyingSystemType returns the UnderlyingSystemType field value if set, zero value otherwise.
func (o *Type) GetUnderlyingSystemType() Type {
	if o == nil || IsNil(o.UnderlyingSystemType) {
		var ret Type
		return ret
	}
	return *o.UnderlyingSystemType
}

// GetUnderlyingSystemTypeOk returns a tuple with the UnderlyingSystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetUnderlyingSystemTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.UnderlyingSystemType) {
		return nil, false
	}
	return o.UnderlyingSystemType, true
}

// HasUnderlyingSystemType returns a boolean if a field has been set.
func (o *Type) HasUnderlyingSystemType() bool {
	if o != nil && !IsNil(o.UnderlyingSystemType) {
		return true
	}

	return false
}

// SetUnderlyingSystemType gets a reference to the given Type and assigns it to the UnderlyingSystemType field.
func (o *Type) SetUnderlyingSystemType(v Type) {
	o.UnderlyingSystemType = &v
}

// GetIsTypeDefinition returns the IsTypeDefinition field value if set, zero value otherwise.
func (o *Type) GetIsTypeDefinition() bool {
	if o == nil || IsNil(o.IsTypeDefinition) {
		var ret bool
		return ret
	}
	return *o.IsTypeDefinition
}

// GetIsTypeDefinitionOk returns a tuple with the IsTypeDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsTypeDefinitionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTypeDefinition) {
		return nil, false
	}
	return o.IsTypeDefinition, true
}

// HasIsTypeDefinition returns a boolean if a field has been set.
func (o *Type) HasIsTypeDefinition() bool {
	if o != nil && !IsNil(o.IsTypeDefinition) {
		return true
	}

	return false
}

// SetIsTypeDefinition gets a reference to the given bool and assigns it to the IsTypeDefinition field.
func (o *Type) SetIsTypeDefinition(v bool) {
	o.IsTypeDefinition = &v
}

// GetIsArray returns the IsArray field value if set, zero value otherwise.
func (o *Type) GetIsArray() bool {
	if o == nil || IsNil(o.IsArray) {
		var ret bool
		return ret
	}
	return *o.IsArray
}

// GetIsArrayOk returns a tuple with the IsArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsArrayOk() (*bool, bool) {
	if o == nil || IsNil(o.IsArray) {
		return nil, false
	}
	return o.IsArray, true
}

// HasIsArray returns a boolean if a field has been set.
func (o *Type) HasIsArray() bool {
	if o != nil && !IsNil(o.IsArray) {
		return true
	}

	return false
}

// SetIsArray gets a reference to the given bool and assigns it to the IsArray field.
func (o *Type) SetIsArray(v bool) {
	o.IsArray = &v
}

// GetIsByRef returns the IsByRef field value if set, zero value otherwise.
func (o *Type) GetIsByRef() bool {
	if o == nil || IsNil(o.IsByRef) {
		var ret bool
		return ret
	}
	return *o.IsByRef
}

// GetIsByRefOk returns a tuple with the IsByRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsByRefOk() (*bool, bool) {
	if o == nil || IsNil(o.IsByRef) {
		return nil, false
	}
	return o.IsByRef, true
}

// HasIsByRef returns a boolean if a field has been set.
func (o *Type) HasIsByRef() bool {
	if o != nil && !IsNil(o.IsByRef) {
		return true
	}

	return false
}

// SetIsByRef gets a reference to the given bool and assigns it to the IsByRef field.
func (o *Type) SetIsByRef(v bool) {
	o.IsByRef = &v
}

// GetIsPointer returns the IsPointer field value if set, zero value otherwise.
func (o *Type) GetIsPointer() bool {
	if o == nil || IsNil(o.IsPointer) {
		var ret bool
		return ret
	}
	return *o.IsPointer
}

// GetIsPointerOk returns a tuple with the IsPointer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsPointerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPointer) {
		return nil, false
	}
	return o.IsPointer, true
}

// HasIsPointer returns a boolean if a field has been set.
func (o *Type) HasIsPointer() bool {
	if o != nil && !IsNil(o.IsPointer) {
		return true
	}

	return false
}

// SetIsPointer gets a reference to the given bool and assigns it to the IsPointer field.
func (o *Type) SetIsPointer(v bool) {
	o.IsPointer = &v
}

// GetIsConstructedGenericType returns the IsConstructedGenericType field value if set, zero value otherwise.
func (o *Type) GetIsConstructedGenericType() bool {
	if o == nil || IsNil(o.IsConstructedGenericType) {
		var ret bool
		return ret
	}
	return *o.IsConstructedGenericType
}

// GetIsConstructedGenericTypeOk returns a tuple with the IsConstructedGenericType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsConstructedGenericTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConstructedGenericType) {
		return nil, false
	}
	return o.IsConstructedGenericType, true
}

// HasIsConstructedGenericType returns a boolean if a field has been set.
func (o *Type) HasIsConstructedGenericType() bool {
	if o != nil && !IsNil(o.IsConstructedGenericType) {
		return true
	}

	return false
}

// SetIsConstructedGenericType gets a reference to the given bool and assigns it to the IsConstructedGenericType field.
func (o *Type) SetIsConstructedGenericType(v bool) {
	o.IsConstructedGenericType = &v
}

// GetIsGenericParameter returns the IsGenericParameter field value if set, zero value otherwise.
func (o *Type) GetIsGenericParameter() bool {
	if o == nil || IsNil(o.IsGenericParameter) {
		var ret bool
		return ret
	}
	return *o.IsGenericParameter
}

// GetIsGenericParameterOk returns a tuple with the IsGenericParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsGenericParameterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGenericParameter) {
		return nil, false
	}
	return o.IsGenericParameter, true
}

// HasIsGenericParameter returns a boolean if a field has been set.
func (o *Type) HasIsGenericParameter() bool {
	if o != nil && !IsNil(o.IsGenericParameter) {
		return true
	}

	return false
}

// SetIsGenericParameter gets a reference to the given bool and assigns it to the IsGenericParameter field.
func (o *Type) SetIsGenericParameter(v bool) {
	o.IsGenericParameter = &v
}

// GetIsGenericTypeParameter returns the IsGenericTypeParameter field value if set, zero value otherwise.
func (o *Type) GetIsGenericTypeParameter() bool {
	if o == nil || IsNil(o.IsGenericTypeParameter) {
		var ret bool
		return ret
	}
	return *o.IsGenericTypeParameter
}

// GetIsGenericTypeParameterOk returns a tuple with the IsGenericTypeParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsGenericTypeParameterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGenericTypeParameter) {
		return nil, false
	}
	return o.IsGenericTypeParameter, true
}

// HasIsGenericTypeParameter returns a boolean if a field has been set.
func (o *Type) HasIsGenericTypeParameter() bool {
	if o != nil && !IsNil(o.IsGenericTypeParameter) {
		return true
	}

	return false
}

// SetIsGenericTypeParameter gets a reference to the given bool and assigns it to the IsGenericTypeParameter field.
func (o *Type) SetIsGenericTypeParameter(v bool) {
	o.IsGenericTypeParameter = &v
}

// GetIsGenericMethodParameter returns the IsGenericMethodParameter field value if set, zero value otherwise.
func (o *Type) GetIsGenericMethodParameter() bool {
	if o == nil || IsNil(o.IsGenericMethodParameter) {
		var ret bool
		return ret
	}
	return *o.IsGenericMethodParameter
}

// GetIsGenericMethodParameterOk returns a tuple with the IsGenericMethodParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsGenericMethodParameterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGenericMethodParameter) {
		return nil, false
	}
	return o.IsGenericMethodParameter, true
}

// HasIsGenericMethodParameter returns a boolean if a field has been set.
func (o *Type) HasIsGenericMethodParameter() bool {
	if o != nil && !IsNil(o.IsGenericMethodParameter) {
		return true
	}

	return false
}

// SetIsGenericMethodParameter gets a reference to the given bool and assigns it to the IsGenericMethodParameter field.
func (o *Type) SetIsGenericMethodParameter(v bool) {
	o.IsGenericMethodParameter = &v
}

// GetIsGenericType returns the IsGenericType field value if set, zero value otherwise.
func (o *Type) GetIsGenericType() bool {
	if o == nil || IsNil(o.IsGenericType) {
		var ret bool
		return ret
	}
	return *o.IsGenericType
}

// GetIsGenericTypeOk returns a tuple with the IsGenericType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsGenericTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGenericType) {
		return nil, false
	}
	return o.IsGenericType, true
}

// HasIsGenericType returns a boolean if a field has been set.
func (o *Type) HasIsGenericType() bool {
	if o != nil && !IsNil(o.IsGenericType) {
		return true
	}

	return false
}

// SetIsGenericType gets a reference to the given bool and assigns it to the IsGenericType field.
func (o *Type) SetIsGenericType(v bool) {
	o.IsGenericType = &v
}

// GetIsGenericTypeDefinition returns the IsGenericTypeDefinition field value if set, zero value otherwise.
func (o *Type) GetIsGenericTypeDefinition() bool {
	if o == nil || IsNil(o.IsGenericTypeDefinition) {
		var ret bool
		return ret
	}
	return *o.IsGenericTypeDefinition
}

// GetIsGenericTypeDefinitionOk returns a tuple with the IsGenericTypeDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsGenericTypeDefinitionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGenericTypeDefinition) {
		return nil, false
	}
	return o.IsGenericTypeDefinition, true
}

// HasIsGenericTypeDefinition returns a boolean if a field has been set.
func (o *Type) HasIsGenericTypeDefinition() bool {
	if o != nil && !IsNil(o.IsGenericTypeDefinition) {
		return true
	}

	return false
}

// SetIsGenericTypeDefinition gets a reference to the given bool and assigns it to the IsGenericTypeDefinition field.
func (o *Type) SetIsGenericTypeDefinition(v bool) {
	o.IsGenericTypeDefinition = &v
}

// GetIsSZArray returns the IsSZArray field value if set, zero value otherwise.
func (o *Type) GetIsSZArray() bool {
	if o == nil || IsNil(o.IsSZArray) {
		var ret bool
		return ret
	}
	return *o.IsSZArray
}

// GetIsSZArrayOk returns a tuple with the IsSZArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsSZArrayOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSZArray) {
		return nil, false
	}
	return o.IsSZArray, true
}

// HasIsSZArray returns a boolean if a field has been set.
func (o *Type) HasIsSZArray() bool {
	if o != nil && !IsNil(o.IsSZArray) {
		return true
	}

	return false
}

// SetIsSZArray gets a reference to the given bool and assigns it to the IsSZArray field.
func (o *Type) SetIsSZArray(v bool) {
	o.IsSZArray = &v
}

// GetIsVariableBoundArray returns the IsVariableBoundArray field value if set, zero value otherwise.
func (o *Type) GetIsVariableBoundArray() bool {
	if o == nil || IsNil(o.IsVariableBoundArray) {
		var ret bool
		return ret
	}
	return *o.IsVariableBoundArray
}

// GetIsVariableBoundArrayOk returns a tuple with the IsVariableBoundArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsVariableBoundArrayOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVariableBoundArray) {
		return nil, false
	}
	return o.IsVariableBoundArray, true
}

// HasIsVariableBoundArray returns a boolean if a field has been set.
func (o *Type) HasIsVariableBoundArray() bool {
	if o != nil && !IsNil(o.IsVariableBoundArray) {
		return true
	}

	return false
}

// SetIsVariableBoundArray gets a reference to the given bool and assigns it to the IsVariableBoundArray field.
func (o *Type) SetIsVariableBoundArray(v bool) {
	o.IsVariableBoundArray = &v
}

// GetIsByRefLike returns the IsByRefLike field value if set, zero value otherwise.
func (o *Type) GetIsByRefLike() bool {
	if o == nil || IsNil(o.IsByRefLike) {
		var ret bool
		return ret
	}
	return *o.IsByRefLike
}

// GetIsByRefLikeOk returns a tuple with the IsByRefLike field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsByRefLikeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsByRefLike) {
		return nil, false
	}
	return o.IsByRefLike, true
}

// HasIsByRefLike returns a boolean if a field has been set.
func (o *Type) HasIsByRefLike() bool {
	if o != nil && !IsNil(o.IsByRefLike) {
		return true
	}

	return false
}

// SetIsByRefLike gets a reference to the given bool and assigns it to the IsByRefLike field.
func (o *Type) SetIsByRefLike(v bool) {
	o.IsByRefLike = &v
}

// GetHasElementType returns the HasElementType field value if set, zero value otherwise.
func (o *Type) GetHasElementType() bool {
	if o == nil || IsNil(o.HasElementType) {
		var ret bool
		return ret
	}
	return *o.HasElementType
}

// GetHasElementTypeOk returns a tuple with the HasElementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetHasElementTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.HasElementType) {
		return nil, false
	}
	return o.HasElementType, true
}

// HasHasElementType returns a boolean if a field has been set.
func (o *Type) HasHasElementType() bool {
	if o != nil && !IsNil(o.HasElementType) {
		return true
	}

	return false
}

// SetHasElementType gets a reference to the given bool and assigns it to the HasElementType field.
func (o *Type) SetHasElementType(v bool) {
	o.HasElementType = &v
}

// GetGenericTypeArguments returns the GenericTypeArguments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Type) GetGenericTypeArguments() []Type {
	if o == nil {
		var ret []Type
		return ret
	}
	return o.GenericTypeArguments
}

// GetGenericTypeArgumentsOk returns a tuple with the GenericTypeArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Type) GetGenericTypeArgumentsOk() ([]Type, bool) {
	if o == nil || IsNil(o.GenericTypeArguments) {
		return nil, false
	}
	return o.GenericTypeArguments, true
}

// HasGenericTypeArguments returns a boolean if a field has been set.
func (o *Type) HasGenericTypeArguments() bool {
	if o != nil && !IsNil(o.GenericTypeArguments) {
		return true
	}

	return false
}

// SetGenericTypeArguments gets a reference to the given []Type and assigns it to the GenericTypeArguments field.
func (o *Type) SetGenericTypeArguments(v []Type) {
	o.GenericTypeArguments = v
}

// GetGenericParameterPosition returns the GenericParameterPosition field value if set, zero value otherwise.
func (o *Type) GetGenericParameterPosition() int32 {
	if o == nil || IsNil(o.GenericParameterPosition) {
		var ret int32
		return ret
	}
	return *o.GenericParameterPosition
}

// GetGenericParameterPositionOk returns a tuple with the GenericParameterPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetGenericParameterPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.GenericParameterPosition) {
		return nil, false
	}
	return o.GenericParameterPosition, true
}

// HasGenericParameterPosition returns a boolean if a field has been set.
func (o *Type) HasGenericParameterPosition() bool {
	if o != nil && !IsNil(o.GenericParameterPosition) {
		return true
	}

	return false
}

// SetGenericParameterPosition gets a reference to the given int32 and assigns it to the GenericParameterPosition field.
func (o *Type) SetGenericParameterPosition(v int32) {
	o.GenericParameterPosition = &v
}

// GetGenericParameterAttributes returns the GenericParameterAttributes field value if set, zero value otherwise.
func (o *Type) GetGenericParameterAttributes() GenericParameterAttributes {
	if o == nil || IsNil(o.GenericParameterAttributes) {
		var ret GenericParameterAttributes
		return ret
	}
	return *o.GenericParameterAttributes
}

// GetGenericParameterAttributesOk returns a tuple with the GenericParameterAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetGenericParameterAttributesOk() (*GenericParameterAttributes, bool) {
	if o == nil || IsNil(o.GenericParameterAttributes) {
		return nil, false
	}
	return o.GenericParameterAttributes, true
}

// HasGenericParameterAttributes returns a boolean if a field has been set.
func (o *Type) HasGenericParameterAttributes() bool {
	if o != nil && !IsNil(o.GenericParameterAttributes) {
		return true
	}

	return false
}

// SetGenericParameterAttributes gets a reference to the given GenericParameterAttributes and assigns it to the GenericParameterAttributes field.
func (o *Type) SetGenericParameterAttributes(v GenericParameterAttributes) {
	o.GenericParameterAttributes = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Type) GetAttributes() TypeAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret TypeAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetAttributesOk() (*TypeAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Type) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given TypeAttributes and assigns it to the Attributes field.
func (o *Type) SetAttributes(v TypeAttributes) {
	o.Attributes = &v
}

// GetIsAbstract returns the IsAbstract field value if set, zero value otherwise.
func (o *Type) GetIsAbstract() bool {
	if o == nil || IsNil(o.IsAbstract) {
		var ret bool
		return ret
	}
	return *o.IsAbstract
}

// GetIsAbstractOk returns a tuple with the IsAbstract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsAbstractOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAbstract) {
		return nil, false
	}
	return o.IsAbstract, true
}

// HasIsAbstract returns a boolean if a field has been set.
func (o *Type) HasIsAbstract() bool {
	if o != nil && !IsNil(o.IsAbstract) {
		return true
	}

	return false
}

// SetIsAbstract gets a reference to the given bool and assigns it to the IsAbstract field.
func (o *Type) SetIsAbstract(v bool) {
	o.IsAbstract = &v
}

// GetIsImport returns the IsImport field value if set, zero value otherwise.
func (o *Type) GetIsImport() bool {
	if o == nil || IsNil(o.IsImport) {
		var ret bool
		return ret
	}
	return *o.IsImport
}

// GetIsImportOk returns a tuple with the IsImport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsImportOk() (*bool, bool) {
	if o == nil || IsNil(o.IsImport) {
		return nil, false
	}
	return o.IsImport, true
}

// HasIsImport returns a boolean if a field has been set.
func (o *Type) HasIsImport() bool {
	if o != nil && !IsNil(o.IsImport) {
		return true
	}

	return false
}

// SetIsImport gets a reference to the given bool and assigns it to the IsImport field.
func (o *Type) SetIsImport(v bool) {
	o.IsImport = &v
}

// GetIsSealed returns the IsSealed field value if set, zero value otherwise.
func (o *Type) GetIsSealed() bool {
	if o == nil || IsNil(o.IsSealed) {
		var ret bool
		return ret
	}
	return *o.IsSealed
}

// GetIsSealedOk returns a tuple with the IsSealed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsSealedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSealed) {
		return nil, false
	}
	return o.IsSealed, true
}

// HasIsSealed returns a boolean if a field has been set.
func (o *Type) HasIsSealed() bool {
	if o != nil && !IsNil(o.IsSealed) {
		return true
	}

	return false
}

// SetIsSealed gets a reference to the given bool and assigns it to the IsSealed field.
func (o *Type) SetIsSealed(v bool) {
	o.IsSealed = &v
}

// GetIsSpecialName returns the IsSpecialName field value if set, zero value otherwise.
func (o *Type) GetIsSpecialName() bool {
	if o == nil || IsNil(o.IsSpecialName) {
		var ret bool
		return ret
	}
	return *o.IsSpecialName
}

// GetIsSpecialNameOk returns a tuple with the IsSpecialName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsSpecialNameOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSpecialName) {
		return nil, false
	}
	return o.IsSpecialName, true
}

// HasIsSpecialName returns a boolean if a field has been set.
func (o *Type) HasIsSpecialName() bool {
	if o != nil && !IsNil(o.IsSpecialName) {
		return true
	}

	return false
}

// SetIsSpecialName gets a reference to the given bool and assigns it to the IsSpecialName field.
func (o *Type) SetIsSpecialName(v bool) {
	o.IsSpecialName = &v
}

// GetIsClass returns the IsClass field value if set, zero value otherwise.
func (o *Type) GetIsClass() bool {
	if o == nil || IsNil(o.IsClass) {
		var ret bool
		return ret
	}
	return *o.IsClass
}

// GetIsClassOk returns a tuple with the IsClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsClassOk() (*bool, bool) {
	if o == nil || IsNil(o.IsClass) {
		return nil, false
	}
	return o.IsClass, true
}

// HasIsClass returns a boolean if a field has been set.
func (o *Type) HasIsClass() bool {
	if o != nil && !IsNil(o.IsClass) {
		return true
	}

	return false
}

// SetIsClass gets a reference to the given bool and assigns it to the IsClass field.
func (o *Type) SetIsClass(v bool) {
	o.IsClass = &v
}

// GetIsNestedAssembly returns the IsNestedAssembly field value if set, zero value otherwise.
func (o *Type) GetIsNestedAssembly() bool {
	if o == nil || IsNil(o.IsNestedAssembly) {
		var ret bool
		return ret
	}
	return *o.IsNestedAssembly
}

// GetIsNestedAssemblyOk returns a tuple with the IsNestedAssembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsNestedAssemblyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNestedAssembly) {
		return nil, false
	}
	return o.IsNestedAssembly, true
}

// HasIsNestedAssembly returns a boolean if a field has been set.
func (o *Type) HasIsNestedAssembly() bool {
	if o != nil && !IsNil(o.IsNestedAssembly) {
		return true
	}

	return false
}

// SetIsNestedAssembly gets a reference to the given bool and assigns it to the IsNestedAssembly field.
func (o *Type) SetIsNestedAssembly(v bool) {
	o.IsNestedAssembly = &v
}

// GetIsNestedFamANDAssem returns the IsNestedFamANDAssem field value if set, zero value otherwise.
func (o *Type) GetIsNestedFamANDAssem() bool {
	if o == nil || IsNil(o.IsNestedFamANDAssem) {
		var ret bool
		return ret
	}
	return *o.IsNestedFamANDAssem
}

// GetIsNestedFamANDAssemOk returns a tuple with the IsNestedFamANDAssem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsNestedFamANDAssemOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNestedFamANDAssem) {
		return nil, false
	}
	return o.IsNestedFamANDAssem, true
}

// HasIsNestedFamANDAssem returns a boolean if a field has been set.
func (o *Type) HasIsNestedFamANDAssem() bool {
	if o != nil && !IsNil(o.IsNestedFamANDAssem) {
		return true
	}

	return false
}

// SetIsNestedFamANDAssem gets a reference to the given bool and assigns it to the IsNestedFamANDAssem field.
func (o *Type) SetIsNestedFamANDAssem(v bool) {
	o.IsNestedFamANDAssem = &v
}

// GetIsNestedFamily returns the IsNestedFamily field value if set, zero value otherwise.
func (o *Type) GetIsNestedFamily() bool {
	if o == nil || IsNil(o.IsNestedFamily) {
		var ret bool
		return ret
	}
	return *o.IsNestedFamily
}

// GetIsNestedFamilyOk returns a tuple with the IsNestedFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsNestedFamilyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNestedFamily) {
		return nil, false
	}
	return o.IsNestedFamily, true
}

// HasIsNestedFamily returns a boolean if a field has been set.
func (o *Type) HasIsNestedFamily() bool {
	if o != nil && !IsNil(o.IsNestedFamily) {
		return true
	}

	return false
}

// SetIsNestedFamily gets a reference to the given bool and assigns it to the IsNestedFamily field.
func (o *Type) SetIsNestedFamily(v bool) {
	o.IsNestedFamily = &v
}

// GetIsNestedFamORAssem returns the IsNestedFamORAssem field value if set, zero value otherwise.
func (o *Type) GetIsNestedFamORAssem() bool {
	if o == nil || IsNil(o.IsNestedFamORAssem) {
		var ret bool
		return ret
	}
	return *o.IsNestedFamORAssem
}

// GetIsNestedFamORAssemOk returns a tuple with the IsNestedFamORAssem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsNestedFamORAssemOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNestedFamORAssem) {
		return nil, false
	}
	return o.IsNestedFamORAssem, true
}

// HasIsNestedFamORAssem returns a boolean if a field has been set.
func (o *Type) HasIsNestedFamORAssem() bool {
	if o != nil && !IsNil(o.IsNestedFamORAssem) {
		return true
	}

	return false
}

// SetIsNestedFamORAssem gets a reference to the given bool and assigns it to the IsNestedFamORAssem field.
func (o *Type) SetIsNestedFamORAssem(v bool) {
	o.IsNestedFamORAssem = &v
}

// GetIsNestedPrivate returns the IsNestedPrivate field value if set, zero value otherwise.
func (o *Type) GetIsNestedPrivate() bool {
	if o == nil || IsNil(o.IsNestedPrivate) {
		var ret bool
		return ret
	}
	return *o.IsNestedPrivate
}

// GetIsNestedPrivateOk returns a tuple with the IsNestedPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsNestedPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNestedPrivate) {
		return nil, false
	}
	return o.IsNestedPrivate, true
}

// HasIsNestedPrivate returns a boolean if a field has been set.
func (o *Type) HasIsNestedPrivate() bool {
	if o != nil && !IsNil(o.IsNestedPrivate) {
		return true
	}

	return false
}

// SetIsNestedPrivate gets a reference to the given bool and assigns it to the IsNestedPrivate field.
func (o *Type) SetIsNestedPrivate(v bool) {
	o.IsNestedPrivate = &v
}

// GetIsNestedPublic returns the IsNestedPublic field value if set, zero value otherwise.
func (o *Type) GetIsNestedPublic() bool {
	if o == nil || IsNil(o.IsNestedPublic) {
		var ret bool
		return ret
	}
	return *o.IsNestedPublic
}

// GetIsNestedPublicOk returns a tuple with the IsNestedPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsNestedPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNestedPublic) {
		return nil, false
	}
	return o.IsNestedPublic, true
}

// HasIsNestedPublic returns a boolean if a field has been set.
func (o *Type) HasIsNestedPublic() bool {
	if o != nil && !IsNil(o.IsNestedPublic) {
		return true
	}

	return false
}

// SetIsNestedPublic gets a reference to the given bool and assigns it to the IsNestedPublic field.
func (o *Type) SetIsNestedPublic(v bool) {
	o.IsNestedPublic = &v
}

// GetIsNotPublic returns the IsNotPublic field value if set, zero value otherwise.
func (o *Type) GetIsNotPublic() bool {
	if o == nil || IsNil(o.IsNotPublic) {
		var ret bool
		return ret
	}
	return *o.IsNotPublic
}

// GetIsNotPublicOk returns a tuple with the IsNotPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsNotPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNotPublic) {
		return nil, false
	}
	return o.IsNotPublic, true
}

// HasIsNotPublic returns a boolean if a field has been set.
func (o *Type) HasIsNotPublic() bool {
	if o != nil && !IsNil(o.IsNotPublic) {
		return true
	}

	return false
}

// SetIsNotPublic gets a reference to the given bool and assigns it to the IsNotPublic field.
func (o *Type) SetIsNotPublic(v bool) {
	o.IsNotPublic = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *Type) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *Type) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *Type) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetIsAutoLayout returns the IsAutoLayout field value if set, zero value otherwise.
func (o *Type) GetIsAutoLayout() bool {
	if o == nil || IsNil(o.IsAutoLayout) {
		var ret bool
		return ret
	}
	return *o.IsAutoLayout
}

// GetIsAutoLayoutOk returns a tuple with the IsAutoLayout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsAutoLayoutOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutoLayout) {
		return nil, false
	}
	return o.IsAutoLayout, true
}

// HasIsAutoLayout returns a boolean if a field has been set.
func (o *Type) HasIsAutoLayout() bool {
	if o != nil && !IsNil(o.IsAutoLayout) {
		return true
	}

	return false
}

// SetIsAutoLayout gets a reference to the given bool and assigns it to the IsAutoLayout field.
func (o *Type) SetIsAutoLayout(v bool) {
	o.IsAutoLayout = &v
}

// GetIsExplicitLayout returns the IsExplicitLayout field value if set, zero value otherwise.
func (o *Type) GetIsExplicitLayout() bool {
	if o == nil || IsNil(o.IsExplicitLayout) {
		var ret bool
		return ret
	}
	return *o.IsExplicitLayout
}

// GetIsExplicitLayoutOk returns a tuple with the IsExplicitLayout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsExplicitLayoutOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExplicitLayout) {
		return nil, false
	}
	return o.IsExplicitLayout, true
}

// HasIsExplicitLayout returns a boolean if a field has been set.
func (o *Type) HasIsExplicitLayout() bool {
	if o != nil && !IsNil(o.IsExplicitLayout) {
		return true
	}

	return false
}

// SetIsExplicitLayout gets a reference to the given bool and assigns it to the IsExplicitLayout field.
func (o *Type) SetIsExplicitLayout(v bool) {
	o.IsExplicitLayout = &v
}

// GetIsLayoutSequential returns the IsLayoutSequential field value if set, zero value otherwise.
func (o *Type) GetIsLayoutSequential() bool {
	if o == nil || IsNil(o.IsLayoutSequential) {
		var ret bool
		return ret
	}
	return *o.IsLayoutSequential
}

// GetIsLayoutSequentialOk returns a tuple with the IsLayoutSequential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsLayoutSequentialOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLayoutSequential) {
		return nil, false
	}
	return o.IsLayoutSequential, true
}

// HasIsLayoutSequential returns a boolean if a field has been set.
func (o *Type) HasIsLayoutSequential() bool {
	if o != nil && !IsNil(o.IsLayoutSequential) {
		return true
	}

	return false
}

// SetIsLayoutSequential gets a reference to the given bool and assigns it to the IsLayoutSequential field.
func (o *Type) SetIsLayoutSequential(v bool) {
	o.IsLayoutSequential = &v
}

// GetIsAnsiClass returns the IsAnsiClass field value if set, zero value otherwise.
func (o *Type) GetIsAnsiClass() bool {
	if o == nil || IsNil(o.IsAnsiClass) {
		var ret bool
		return ret
	}
	return *o.IsAnsiClass
}

// GetIsAnsiClassOk returns a tuple with the IsAnsiClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsAnsiClassOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnsiClass) {
		return nil, false
	}
	return o.IsAnsiClass, true
}

// HasIsAnsiClass returns a boolean if a field has been set.
func (o *Type) HasIsAnsiClass() bool {
	if o != nil && !IsNil(o.IsAnsiClass) {
		return true
	}

	return false
}

// SetIsAnsiClass gets a reference to the given bool and assigns it to the IsAnsiClass field.
func (o *Type) SetIsAnsiClass(v bool) {
	o.IsAnsiClass = &v
}

// GetIsAutoClass returns the IsAutoClass field value if set, zero value otherwise.
func (o *Type) GetIsAutoClass() bool {
	if o == nil || IsNil(o.IsAutoClass) {
		var ret bool
		return ret
	}
	return *o.IsAutoClass
}

// GetIsAutoClassOk returns a tuple with the IsAutoClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsAutoClassOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutoClass) {
		return nil, false
	}
	return o.IsAutoClass, true
}

// HasIsAutoClass returns a boolean if a field has been set.
func (o *Type) HasIsAutoClass() bool {
	if o != nil && !IsNil(o.IsAutoClass) {
		return true
	}

	return false
}

// SetIsAutoClass gets a reference to the given bool and assigns it to the IsAutoClass field.
func (o *Type) SetIsAutoClass(v bool) {
	o.IsAutoClass = &v
}

// GetIsUnicodeClass returns the IsUnicodeClass field value if set, zero value otherwise.
func (o *Type) GetIsUnicodeClass() bool {
	if o == nil || IsNil(o.IsUnicodeClass) {
		var ret bool
		return ret
	}
	return *o.IsUnicodeClass
}

// GetIsUnicodeClassOk returns a tuple with the IsUnicodeClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsUnicodeClassOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUnicodeClass) {
		return nil, false
	}
	return o.IsUnicodeClass, true
}

// HasIsUnicodeClass returns a boolean if a field has been set.
func (o *Type) HasIsUnicodeClass() bool {
	if o != nil && !IsNil(o.IsUnicodeClass) {
		return true
	}

	return false
}

// SetIsUnicodeClass gets a reference to the given bool and assigns it to the IsUnicodeClass field.
func (o *Type) SetIsUnicodeClass(v bool) {
	o.IsUnicodeClass = &v
}

// GetIsCOMObject returns the IsCOMObject field value if set, zero value otherwise.
func (o *Type) GetIsCOMObject() bool {
	if o == nil || IsNil(o.IsCOMObject) {
		var ret bool
		return ret
	}
	return *o.IsCOMObject
}

// GetIsCOMObjectOk returns a tuple with the IsCOMObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsCOMObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCOMObject) {
		return nil, false
	}
	return o.IsCOMObject, true
}

// HasIsCOMObject returns a boolean if a field has been set.
func (o *Type) HasIsCOMObject() bool {
	if o != nil && !IsNil(o.IsCOMObject) {
		return true
	}

	return false
}

// SetIsCOMObject gets a reference to the given bool and assigns it to the IsCOMObject field.
func (o *Type) SetIsCOMObject(v bool) {
	o.IsCOMObject = &v
}

// GetIsContextful returns the IsContextful field value if set, zero value otherwise.
func (o *Type) GetIsContextful() bool {
	if o == nil || IsNil(o.IsContextful) {
		var ret bool
		return ret
	}
	return *o.IsContextful
}

// GetIsContextfulOk returns a tuple with the IsContextful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsContextfulOk() (*bool, bool) {
	if o == nil || IsNil(o.IsContextful) {
		return nil, false
	}
	return o.IsContextful, true
}

// HasIsContextful returns a boolean if a field has been set.
func (o *Type) HasIsContextful() bool {
	if o != nil && !IsNil(o.IsContextful) {
		return true
	}

	return false
}

// SetIsContextful gets a reference to the given bool and assigns it to the IsContextful field.
func (o *Type) SetIsContextful(v bool) {
	o.IsContextful = &v
}

// GetIsEnum returns the IsEnum field value if set, zero value otherwise.
func (o *Type) GetIsEnum() bool {
	if o == nil || IsNil(o.IsEnum) {
		var ret bool
		return ret
	}
	return *o.IsEnum
}

// GetIsEnumOk returns a tuple with the IsEnum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsEnumOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnum) {
		return nil, false
	}
	return o.IsEnum, true
}

// HasIsEnum returns a boolean if a field has been set.
func (o *Type) HasIsEnum() bool {
	if o != nil && !IsNil(o.IsEnum) {
		return true
	}

	return false
}

// SetIsEnum gets a reference to the given bool and assigns it to the IsEnum field.
func (o *Type) SetIsEnum(v bool) {
	o.IsEnum = &v
}

// GetIsMarshalByRef returns the IsMarshalByRef field value if set, zero value otherwise.
func (o *Type) GetIsMarshalByRef() bool {
	if o == nil || IsNil(o.IsMarshalByRef) {
		var ret bool
		return ret
	}
	return *o.IsMarshalByRef
}

// GetIsMarshalByRefOk returns a tuple with the IsMarshalByRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsMarshalByRefOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMarshalByRef) {
		return nil, false
	}
	return o.IsMarshalByRef, true
}

// HasIsMarshalByRef returns a boolean if a field has been set.
func (o *Type) HasIsMarshalByRef() bool {
	if o != nil && !IsNil(o.IsMarshalByRef) {
		return true
	}

	return false
}

// SetIsMarshalByRef gets a reference to the given bool and assigns it to the IsMarshalByRef field.
func (o *Type) SetIsMarshalByRef(v bool) {
	o.IsMarshalByRef = &v
}

// GetIsPrimitive returns the IsPrimitive field value if set, zero value otherwise.
func (o *Type) GetIsPrimitive() bool {
	if o == nil || IsNil(o.IsPrimitive) {
		var ret bool
		return ret
	}
	return *o.IsPrimitive
}

// GetIsPrimitiveOk returns a tuple with the IsPrimitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsPrimitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrimitive) {
		return nil, false
	}
	return o.IsPrimitive, true
}

// HasIsPrimitive returns a boolean if a field has been set.
func (o *Type) HasIsPrimitive() bool {
	if o != nil && !IsNil(o.IsPrimitive) {
		return true
	}

	return false
}

// SetIsPrimitive gets a reference to the given bool and assigns it to the IsPrimitive field.
func (o *Type) SetIsPrimitive(v bool) {
	o.IsPrimitive = &v
}

// GetIsValueType returns the IsValueType field value if set, zero value otherwise.
func (o *Type) GetIsValueType() bool {
	if o == nil || IsNil(o.IsValueType) {
		var ret bool
		return ret
	}
	return *o.IsValueType
}

// GetIsValueTypeOk returns a tuple with the IsValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsValueTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsValueType) {
		return nil, false
	}
	return o.IsValueType, true
}

// HasIsValueType returns a boolean if a field has been set.
func (o *Type) HasIsValueType() bool {
	if o != nil && !IsNil(o.IsValueType) {
		return true
	}

	return false
}

// SetIsValueType gets a reference to the given bool and assigns it to the IsValueType field.
func (o *Type) SetIsValueType(v bool) {
	o.IsValueType = &v
}

// GetIsSignatureType returns the IsSignatureType field value if set, zero value otherwise.
func (o *Type) GetIsSignatureType() bool {
	if o == nil || IsNil(o.IsSignatureType) {
		var ret bool
		return ret
	}
	return *o.IsSignatureType
}

// GetIsSignatureTypeOk returns a tuple with the IsSignatureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsSignatureTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSignatureType) {
		return nil, false
	}
	return o.IsSignatureType, true
}

// HasIsSignatureType returns a boolean if a field has been set.
func (o *Type) HasIsSignatureType() bool {
	if o != nil && !IsNil(o.IsSignatureType) {
		return true
	}

	return false
}

// SetIsSignatureType gets a reference to the given bool and assigns it to the IsSignatureType field.
func (o *Type) SetIsSignatureType(v bool) {
	o.IsSignatureType = &v
}

// GetIsSecurityCritical returns the IsSecurityCritical field value if set, zero value otherwise.
func (o *Type) GetIsSecurityCritical() bool {
	if o == nil || IsNil(o.IsSecurityCritical) {
		var ret bool
		return ret
	}
	return *o.IsSecurityCritical
}

// GetIsSecurityCriticalOk returns a tuple with the IsSecurityCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsSecurityCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecurityCritical) {
		return nil, false
	}
	return o.IsSecurityCritical, true
}

// HasIsSecurityCritical returns a boolean if a field has been set.
func (o *Type) HasIsSecurityCritical() bool {
	if o != nil && !IsNil(o.IsSecurityCritical) {
		return true
	}

	return false
}

// SetIsSecurityCritical gets a reference to the given bool and assigns it to the IsSecurityCritical field.
func (o *Type) SetIsSecurityCritical(v bool) {
	o.IsSecurityCritical = &v
}

// GetIsSecuritySafeCritical returns the IsSecuritySafeCritical field value if set, zero value otherwise.
func (o *Type) GetIsSecuritySafeCritical() bool {
	if o == nil || IsNil(o.IsSecuritySafeCritical) {
		var ret bool
		return ret
	}
	return *o.IsSecuritySafeCritical
}

// GetIsSecuritySafeCriticalOk returns a tuple with the IsSecuritySafeCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsSecuritySafeCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecuritySafeCritical) {
		return nil, false
	}
	return o.IsSecuritySafeCritical, true
}

// HasIsSecuritySafeCritical returns a boolean if a field has been set.
func (o *Type) HasIsSecuritySafeCritical() bool {
	if o != nil && !IsNil(o.IsSecuritySafeCritical) {
		return true
	}

	return false
}

// SetIsSecuritySafeCritical gets a reference to the given bool and assigns it to the IsSecuritySafeCritical field.
func (o *Type) SetIsSecuritySafeCritical(v bool) {
	o.IsSecuritySafeCritical = &v
}

// GetIsSecurityTransparent returns the IsSecurityTransparent field value if set, zero value otherwise.
func (o *Type) GetIsSecurityTransparent() bool {
	if o == nil || IsNil(o.IsSecurityTransparent) {
		var ret bool
		return ret
	}
	return *o.IsSecurityTransparent
}

// GetIsSecurityTransparentOk returns a tuple with the IsSecurityTransparent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsSecurityTransparentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecurityTransparent) {
		return nil, false
	}
	return o.IsSecurityTransparent, true
}

// HasIsSecurityTransparent returns a boolean if a field has been set.
func (o *Type) HasIsSecurityTransparent() bool {
	if o != nil && !IsNil(o.IsSecurityTransparent) {
		return true
	}

	return false
}

// SetIsSecurityTransparent gets a reference to the given bool and assigns it to the IsSecurityTransparent field.
func (o *Type) SetIsSecurityTransparent(v bool) {
	o.IsSecurityTransparent = &v
}

// GetStructLayoutAttribute returns the StructLayoutAttribute field value if set, zero value otherwise.
func (o *Type) GetStructLayoutAttribute() StructLayoutAttribute {
	if o == nil || IsNil(o.StructLayoutAttribute) {
		var ret StructLayoutAttribute
		return ret
	}
	return *o.StructLayoutAttribute
}

// GetStructLayoutAttributeOk returns a tuple with the StructLayoutAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetStructLayoutAttributeOk() (*StructLayoutAttribute, bool) {
	if o == nil || IsNil(o.StructLayoutAttribute) {
		return nil, false
	}
	return o.StructLayoutAttribute, true
}

// HasStructLayoutAttribute returns a boolean if a field has been set.
func (o *Type) HasStructLayoutAttribute() bool {
	if o != nil && !IsNil(o.StructLayoutAttribute) {
		return true
	}

	return false
}

// SetStructLayoutAttribute gets a reference to the given StructLayoutAttribute and assigns it to the StructLayoutAttribute field.
func (o *Type) SetStructLayoutAttribute(v StructLayoutAttribute) {
	o.StructLayoutAttribute = &v
}

// GetTypeInitializer returns the TypeInitializer field value if set, zero value otherwise.
func (o *Type) GetTypeInitializer() ConstructorInfo {
	if o == nil || IsNil(o.TypeInitializer) {
		var ret ConstructorInfo
		return ret
	}
	return *o.TypeInitializer
}

// GetTypeInitializerOk returns a tuple with the TypeInitializer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetTypeInitializerOk() (*ConstructorInfo, bool) {
	if o == nil || IsNil(o.TypeInitializer) {
		return nil, false
	}
	return o.TypeInitializer, true
}

// HasTypeInitializer returns a boolean if a field has been set.
func (o *Type) HasTypeInitializer() bool {
	if o != nil && !IsNil(o.TypeInitializer) {
		return true
	}

	return false
}

// SetTypeInitializer gets a reference to the given ConstructorInfo and assigns it to the TypeInitializer field.
func (o *Type) SetTypeInitializer(v ConstructorInfo) {
	o.TypeInitializer = &v
}

// GetTypeHandle returns the TypeHandle field value if set, zero value otherwise.
func (o *Type) GetTypeHandle() RuntimeTypeHandle {
	if o == nil || IsNil(o.TypeHandle) {
		var ret RuntimeTypeHandle
		return ret
	}
	return *o.TypeHandle
}

// GetTypeHandleOk returns a tuple with the TypeHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetTypeHandleOk() (*RuntimeTypeHandle, bool) {
	if o == nil || IsNil(o.TypeHandle) {
		return nil, false
	}
	return o.TypeHandle, true
}

// HasTypeHandle returns a boolean if a field has been set.
func (o *Type) HasTypeHandle() bool {
	if o != nil && !IsNil(o.TypeHandle) {
		return true
	}

	return false
}

// SetTypeHandle gets a reference to the given RuntimeTypeHandle and assigns it to the TypeHandle field.
func (o *Type) SetTypeHandle(v RuntimeTypeHandle) {
	o.TypeHandle = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *Type) GetGuid() string {
	if o == nil || IsNil(o.Guid) {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetGuidOk() (*string, bool) {
	if o == nil || IsNil(o.Guid) {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *Type) HasGuid() bool {
	if o != nil && !IsNil(o.Guid) {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *Type) SetGuid(v string) {
	o.Guid = &v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *Type) GetBaseType() Type {
	if o == nil || IsNil(o.BaseType) {
		var ret Type
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetBaseTypeOk() (*Type, bool) {
	if o == nil || IsNil(o.BaseType) {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *Type) HasBaseType() bool {
	if o != nil && !IsNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given Type and assigns it to the BaseType field.
func (o *Type) SetBaseType(v Type) {
	o.BaseType = &v
}

// GetIsSerializable returns the IsSerializable field value if set, zero value otherwise.
func (o *Type) GetIsSerializable() bool {
	if o == nil || IsNil(o.IsSerializable) {
		var ret bool
		return ret
	}
	return *o.IsSerializable
}

// GetIsSerializableOk returns a tuple with the IsSerializable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsSerializableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSerializable) {
		return nil, false
	}
	return o.IsSerializable, true
}

// HasIsSerializable returns a boolean if a field has been set.
func (o *Type) HasIsSerializable() bool {
	if o != nil && !IsNil(o.IsSerializable) {
		return true
	}

	return false
}

// SetIsSerializable gets a reference to the given bool and assigns it to the IsSerializable field.
func (o *Type) SetIsSerializable(v bool) {
	o.IsSerializable = &v
}

// GetContainsGenericParameters returns the ContainsGenericParameters field value if set, zero value otherwise.
func (o *Type) GetContainsGenericParameters() bool {
	if o == nil || IsNil(o.ContainsGenericParameters) {
		var ret bool
		return ret
	}
	return *o.ContainsGenericParameters
}

// GetContainsGenericParametersOk returns a tuple with the ContainsGenericParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetContainsGenericParametersOk() (*bool, bool) {
	if o == nil || IsNil(o.ContainsGenericParameters) {
		return nil, false
	}
	return o.ContainsGenericParameters, true
}

// HasContainsGenericParameters returns a boolean if a field has been set.
func (o *Type) HasContainsGenericParameters() bool {
	if o != nil && !IsNil(o.ContainsGenericParameters) {
		return true
	}

	return false
}

// SetContainsGenericParameters gets a reference to the given bool and assigns it to the ContainsGenericParameters field.
func (o *Type) SetContainsGenericParameters(v bool) {
	o.ContainsGenericParameters = &v
}

// GetIsVisible returns the IsVisible field value if set, zero value otherwise.
func (o *Type) GetIsVisible() bool {
	if o == nil || IsNil(o.IsVisible) {
		var ret bool
		return ret
	}
	return *o.IsVisible
}

// GetIsVisibleOk returns a tuple with the IsVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Type) GetIsVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVisible) {
		return nil, false
	}
	return o.IsVisible, true
}

// HasIsVisible returns a boolean if a field has been set.
func (o *Type) HasIsVisible() bool {
	if o != nil && !IsNil(o.IsVisible) {
		return true
	}

	return false
}

// SetIsVisible gets a reference to the given bool and assigns it to the IsVisible field.
func (o *Type) SetIsVisible(v bool) {
	o.IsVisible = &v
}

func (o Type) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Type) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.CustomAttributes != nil {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	if !IsNil(o.IsCollectible) {
		toSerialize["isCollectible"] = o.IsCollectible
	}
	if !IsNil(o.MetadataToken) {
		toSerialize["metadataToken"] = o.MetadataToken
	}
	if !IsNil(o.IsInterface) {
		toSerialize["isInterface"] = o.IsInterface
	}
	if !IsNil(o.MemberType) {
		toSerialize["memberType"] = o.MemberType
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if o.AssemblyQualifiedName.IsSet() {
		toSerialize["assemblyQualifiedName"] = o.AssemblyQualifiedName.Get()
	}
	if o.FullName.IsSet() {
		toSerialize["fullName"] = o.FullName.Get()
	}
	if !IsNil(o.Assembly) {
		toSerialize["assembly"] = o.Assembly
	}
	if !IsNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	if !IsNil(o.IsNested) {
		toSerialize["isNested"] = o.IsNested
	}
	if !IsNil(o.DeclaringType) {
		toSerialize["declaringType"] = o.DeclaringType
	}
	if !IsNil(o.DeclaringMethod) {
		toSerialize["declaringMethod"] = o.DeclaringMethod
	}
	if !IsNil(o.ReflectedType) {
		toSerialize["reflectedType"] = o.ReflectedType
	}
	if !IsNil(o.UnderlyingSystemType) {
		toSerialize["underlyingSystemType"] = o.UnderlyingSystemType
	}
	if !IsNil(o.IsTypeDefinition) {
		toSerialize["isTypeDefinition"] = o.IsTypeDefinition
	}
	if !IsNil(o.IsArray) {
		toSerialize["isArray"] = o.IsArray
	}
	if !IsNil(o.IsByRef) {
		toSerialize["isByRef"] = o.IsByRef
	}
	if !IsNil(o.IsPointer) {
		toSerialize["isPointer"] = o.IsPointer
	}
	if !IsNil(o.IsConstructedGenericType) {
		toSerialize["isConstructedGenericType"] = o.IsConstructedGenericType
	}
	if !IsNil(o.IsGenericParameter) {
		toSerialize["isGenericParameter"] = o.IsGenericParameter
	}
	if !IsNil(o.IsGenericTypeParameter) {
		toSerialize["isGenericTypeParameter"] = o.IsGenericTypeParameter
	}
	if !IsNil(o.IsGenericMethodParameter) {
		toSerialize["isGenericMethodParameter"] = o.IsGenericMethodParameter
	}
	if !IsNil(o.IsGenericType) {
		toSerialize["isGenericType"] = o.IsGenericType
	}
	if !IsNil(o.IsGenericTypeDefinition) {
		toSerialize["isGenericTypeDefinition"] = o.IsGenericTypeDefinition
	}
	if !IsNil(o.IsSZArray) {
		toSerialize["isSZArray"] = o.IsSZArray
	}
	if !IsNil(o.IsVariableBoundArray) {
		toSerialize["isVariableBoundArray"] = o.IsVariableBoundArray
	}
	if !IsNil(o.IsByRefLike) {
		toSerialize["isByRefLike"] = o.IsByRefLike
	}
	if !IsNil(o.HasElementType) {
		toSerialize["hasElementType"] = o.HasElementType
	}
	if o.GenericTypeArguments != nil {
		toSerialize["genericTypeArguments"] = o.GenericTypeArguments
	}
	if !IsNil(o.GenericParameterPosition) {
		toSerialize["genericParameterPosition"] = o.GenericParameterPosition
	}
	if !IsNil(o.GenericParameterAttributes) {
		toSerialize["genericParameterAttributes"] = o.GenericParameterAttributes
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.IsAbstract) {
		toSerialize["isAbstract"] = o.IsAbstract
	}
	if !IsNil(o.IsImport) {
		toSerialize["isImport"] = o.IsImport
	}
	if !IsNil(o.IsSealed) {
		toSerialize["isSealed"] = o.IsSealed
	}
	if !IsNil(o.IsSpecialName) {
		toSerialize["isSpecialName"] = o.IsSpecialName
	}
	if !IsNil(o.IsClass) {
		toSerialize["isClass"] = o.IsClass
	}
	if !IsNil(o.IsNestedAssembly) {
		toSerialize["isNestedAssembly"] = o.IsNestedAssembly
	}
	if !IsNil(o.IsNestedFamANDAssem) {
		toSerialize["isNestedFamANDAssem"] = o.IsNestedFamANDAssem
	}
	if !IsNil(o.IsNestedFamily) {
		toSerialize["isNestedFamily"] = o.IsNestedFamily
	}
	if !IsNil(o.IsNestedFamORAssem) {
		toSerialize["isNestedFamORAssem"] = o.IsNestedFamORAssem
	}
	if !IsNil(o.IsNestedPrivate) {
		toSerialize["isNestedPrivate"] = o.IsNestedPrivate
	}
	if !IsNil(o.IsNestedPublic) {
		toSerialize["isNestedPublic"] = o.IsNestedPublic
	}
	if !IsNil(o.IsNotPublic) {
		toSerialize["isNotPublic"] = o.IsNotPublic
	}
	if !IsNil(o.IsPublic) {
		toSerialize["isPublic"] = o.IsPublic
	}
	if !IsNil(o.IsAutoLayout) {
		toSerialize["isAutoLayout"] = o.IsAutoLayout
	}
	if !IsNil(o.IsExplicitLayout) {
		toSerialize["isExplicitLayout"] = o.IsExplicitLayout
	}
	if !IsNil(o.IsLayoutSequential) {
		toSerialize["isLayoutSequential"] = o.IsLayoutSequential
	}
	if !IsNil(o.IsAnsiClass) {
		toSerialize["isAnsiClass"] = o.IsAnsiClass
	}
	if !IsNil(o.IsAutoClass) {
		toSerialize["isAutoClass"] = o.IsAutoClass
	}
	if !IsNil(o.IsUnicodeClass) {
		toSerialize["isUnicodeClass"] = o.IsUnicodeClass
	}
	if !IsNil(o.IsCOMObject) {
		toSerialize["isCOMObject"] = o.IsCOMObject
	}
	if !IsNil(o.IsContextful) {
		toSerialize["isContextful"] = o.IsContextful
	}
	if !IsNil(o.IsEnum) {
		toSerialize["isEnum"] = o.IsEnum
	}
	if !IsNil(o.IsMarshalByRef) {
		toSerialize["isMarshalByRef"] = o.IsMarshalByRef
	}
	if !IsNil(o.IsPrimitive) {
		toSerialize["isPrimitive"] = o.IsPrimitive
	}
	if !IsNil(o.IsValueType) {
		toSerialize["isValueType"] = o.IsValueType
	}
	if !IsNil(o.IsSignatureType) {
		toSerialize["isSignatureType"] = o.IsSignatureType
	}
	if !IsNil(o.IsSecurityCritical) {
		toSerialize["isSecurityCritical"] = o.IsSecurityCritical
	}
	if !IsNil(o.IsSecuritySafeCritical) {
		toSerialize["isSecuritySafeCritical"] = o.IsSecuritySafeCritical
	}
	if !IsNil(o.IsSecurityTransparent) {
		toSerialize["isSecurityTransparent"] = o.IsSecurityTransparent
	}
	if !IsNil(o.StructLayoutAttribute) {
		toSerialize["structLayoutAttribute"] = o.StructLayoutAttribute
	}
	if !IsNil(o.TypeInitializer) {
		toSerialize["typeInitializer"] = o.TypeInitializer
	}
	if !IsNil(o.TypeHandle) {
		toSerialize["typeHandle"] = o.TypeHandle
	}
	if !IsNil(o.Guid) {
		toSerialize["guid"] = o.Guid
	}
	if !IsNil(o.BaseType) {
		toSerialize["baseType"] = o.BaseType
	}
	if !IsNil(o.IsSerializable) {
		toSerialize["isSerializable"] = o.IsSerializable
	}
	if !IsNil(o.ContainsGenericParameters) {
		toSerialize["containsGenericParameters"] = o.ContainsGenericParameters
	}
	if !IsNil(o.IsVisible) {
		toSerialize["isVisible"] = o.IsVisible
	}
	return toSerialize, nil
}

type NullableType struct {
	value *Type
	isSet bool
}

func (v NullableType) Get() *Type {
	return v.value
}

func (v *NullableType) Set(val *Type) {
	v.value = val
	v.isSet = true
}

func (v NullableType) IsSet() bool {
	return v.isSet
}

func (v *NullableType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableType(val *Type) *NullableType {
	return &NullableType{value: val, isSet: true}
}

func (v NullableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
