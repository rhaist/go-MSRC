/*
MSRC CVRF API

Get security updates programmatically using this RESTful API. Sample client code is available on the [Microsoft Security Updates GitHub](https://github.com/microsoft/MSRC-Microsoft-Security-Updates-API). For more details, please visit [msrc.microsoft.com/update-guide](https://msrc.microsoft.com/update-guide).    _**NOTE: If you're looking for the Engage API (CARS), please refer to the new [Abuse Reporting developer portal](https://msrc.microsoft.com/report/developer).**_

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdatesGetUpdates200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatesGetUpdates200Response{}

// UpdatesGetUpdates200Response struct for UpdatesGetUpdates200Response
type UpdatesGetUpdates200Response struct {
	// OData metadata for the request
	OdataContext string `json:"@odata.context"`
	// array of security update summaries
	Value []Update `json:"value"`
}

type _UpdatesGetUpdates200Response UpdatesGetUpdates200Response

// NewUpdatesGetUpdates200Response instantiates a new UpdatesGetUpdates200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatesGetUpdates200Response(odataContext string, value []Update) *UpdatesGetUpdates200Response {
	this := UpdatesGetUpdates200Response{}
	this.OdataContext = odataContext
	this.Value = value
	return &this
}

// NewUpdatesGetUpdates200ResponseWithDefaults instantiates a new UpdatesGetUpdates200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatesGetUpdates200ResponseWithDefaults() *UpdatesGetUpdates200Response {
	this := UpdatesGetUpdates200Response{}
	return &this
}

// GetOdataContext returns the OdataContext field value
func (o *UpdatesGetUpdates200Response) GetOdataContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value
// and a boolean to check if the value has been set.
func (o *UpdatesGetUpdates200Response) GetOdataContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OdataContext, true
}

// SetOdataContext sets field value
func (o *UpdatesGetUpdates200Response) SetOdataContext(v string) {
	o.OdataContext = v
}

// GetValue returns the Value field value
func (o *UpdatesGetUpdates200Response) GetValue() []Update {
	if o == nil {
		var ret []Update
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *UpdatesGetUpdates200Response) GetValueOk() ([]Update, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *UpdatesGetUpdates200Response) SetValue(v []Update) {
	o.Value = v
}

func (o UpdatesGetUpdates200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatesGetUpdates200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["@odata.context"] = o.OdataContext
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *UpdatesGetUpdates200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@odata.context",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdatesGetUpdates200Response := _UpdatesGetUpdates200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdatesGetUpdates200Response)

	if err != nil {
		return err
	}

	*o = UpdatesGetUpdates200Response(varUpdatesGetUpdates200Response)

	return err
}

type NullableUpdatesGetUpdates200Response struct {
	value *UpdatesGetUpdates200Response
	isSet bool
}

func (v NullableUpdatesGetUpdates200Response) Get() *UpdatesGetUpdates200Response {
	return v.value
}

func (v *NullableUpdatesGetUpdates200Response) Set(val *UpdatesGetUpdates200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatesGetUpdates200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatesGetUpdates200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatesGetUpdates200Response(val *UpdatesGetUpdates200Response) *NullableUpdatesGetUpdates200Response {
	return &NullableUpdatesGetUpdates200Response{value: val, isSet: true}
}

func (v NullableUpdatesGetUpdates200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatesGetUpdates200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
