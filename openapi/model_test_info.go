/*
 * MSRC Public API
 *
 * This RESTful API can be used to engage the Microsoft Security Response Center (MSRC) in the following ways:    - Get security update summaries and details using the [Common Vulnerability Reporting Framework](https://www.icasi.org/cvrf) (CVRF).    - Report suspected cyberattacks or abuse originating from Microsoft Online Services.    - Notify Microsoft of any planned penetration tests against your Azure assets.    **Sample client code** is available on the Microsoft Security [Updates](https://github.com/microsoft/MSRC-Microsoft-Security-Updates-API) and [Engage](https://github.com/Microsoft/MSRC-Microsoft-Engage-API)   Github repositories.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestInfo information about a penetration test
type TestInfo struct {
	// date testing will commence
	StartDate string `json:"startDate"`
	// date testing will end
	EndDate string `json:"endDate"`
	// detailed summary of the planned testing, including types of tests and a list of targeted assets (IP or FQDN)
	TestDescription string `json:"testDescription"`
}

// NewTestInfo instantiates a new TestInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestInfo(startDate string, endDate string, testDescription string) *TestInfo {
	this := TestInfo{}
	this.StartDate = startDate
	this.EndDate = endDate
	this.TestDescription = testDescription
	return &this
}

// NewTestInfoWithDefaults instantiates a new TestInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestInfoWithDefaults() *TestInfo {
	this := TestInfo{}
	return &this
}

// GetStartDate returns the StartDate field value
func (o *TestInfo) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *TestInfo) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *TestInfo) SetStartDate(v string) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
func (o *TestInfo) GetEndDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *TestInfo) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *TestInfo) SetEndDate(v string) {
	o.EndDate = v
}

// GetTestDescription returns the TestDescription field value
func (o *TestInfo) GetTestDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestDescription
}

// GetTestDescriptionOk returns a tuple with the TestDescription field value
// and a boolean to check if the value has been set.
func (o *TestInfo) GetTestDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestDescription, true
}

// SetTestDescription sets field value
func (o *TestInfo) SetTestDescription(v string) {
	o.TestDescription = v
}

func (o TestInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["startDate"] = o.StartDate
	}
	if true {
		toSerialize["endDate"] = o.EndDate
	}
	if true {
		toSerialize["testDescription"] = o.TestDescription
	}
	return json.Marshal(toSerialize)
}

type NullableTestInfo struct {
	value *TestInfo
	isSet bool
}

func (v NullableTestInfo) Get() *TestInfo {
	return v.value
}

func (v *NullableTestInfo) Set(val *TestInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTestInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTestInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestInfo(val *TestInfo) *NullableTestInfo {
	return &NullableTestInfo{value: val, isSet: true}
}

func (v NullableTestInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
