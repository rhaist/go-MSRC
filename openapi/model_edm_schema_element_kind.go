/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EdmSchemaElementKind the model 'EdmSchemaElementKind'
type EdmSchemaElementKind string

// List of EdmSchemaElementKind
const (
	NONE             EdmSchemaElementKind = "None"
	TYPE_DEFINITION  EdmSchemaElementKind = "TypeDefinition"
	TERM             EdmSchemaElementKind = "Term"
	ACTION           EdmSchemaElementKind = "Action"
	ENTITY_CONTAINER EdmSchemaElementKind = "EntityContainer"
	FUNCTION         EdmSchemaElementKind = "Function"
)

// All allowed values of EdmSchemaElementKind enum
var AllowedEdmSchemaElementKindEnumValues = []EdmSchemaElementKind{
	"None",
	"TypeDefinition",
	"Term",
	"Action",
	"EntityContainer",
	"Function",
}

func (v *EdmSchemaElementKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EdmSchemaElementKind(value)
	for _, existing := range AllowedEdmSchemaElementKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EdmSchemaElementKind", value)
}

// NewEdmSchemaElementKindFromValue returns a pointer to a valid EdmSchemaElementKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEdmSchemaElementKindFromValue(v string) (*EdmSchemaElementKind, error) {
	ev := EdmSchemaElementKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EdmSchemaElementKind: valid values are %v", v, AllowedEdmSchemaElementKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EdmSchemaElementKind) IsValid() bool {
	for _, existing := range AllowedEdmSchemaElementKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EdmSchemaElementKind value
func (v EdmSchemaElementKind) Ptr() *EdmSchemaElementKind {
	return &v
}

type NullableEdmSchemaElementKind struct {
	value *EdmSchemaElementKind
	isSet bool
}

func (v NullableEdmSchemaElementKind) Get() *EdmSchemaElementKind {
	return v.value
}

func (v *NullableEdmSchemaElementKind) Set(val *EdmSchemaElementKind) {
	v.value = val
	v.isSet = true
}

func (v NullableEdmSchemaElementKind) IsSet() bool {
	return v.isSet
}

func (v *NullableEdmSchemaElementKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdmSchemaElementKind(val *EdmSchemaElementKind) *NullableEdmSchemaElementKind {
	return &NullableEdmSchemaElementKind{value: val, isSet: true}
}

func (v NullableEdmSchemaElementKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdmSchemaElementKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
