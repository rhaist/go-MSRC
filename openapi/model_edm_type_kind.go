/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EdmTypeKind the model 'EdmTypeKind'
type EdmTypeKind string

// List of EdmTypeKind
const (
	NONE             EdmTypeKind = "None"
	PRIMITIVE        EdmTypeKind = "Primitive"
	ENTITY           EdmTypeKind = "Entity"
	COMPLEX          EdmTypeKind = "Complex"
	COLLECTION       EdmTypeKind = "Collection"
	ENTITY_REFERENCE EdmTypeKind = "EntityReference"
	ENUM             EdmTypeKind = "Enum"
	TYPE_DEFINITION  EdmTypeKind = "TypeDefinition"
	UNTYPED          EdmTypeKind = "Untyped"
	PATH             EdmTypeKind = "Path"
)

// All allowed values of EdmTypeKind enum
var AllowedEdmTypeKindEnumValues = []EdmTypeKind{
	"None",
	"Primitive",
	"Entity",
	"Complex",
	"Collection",
	"EntityReference",
	"Enum",
	"TypeDefinition",
	"Untyped",
	"Path",
}

func (v *EdmTypeKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EdmTypeKind(value)
	for _, existing := range AllowedEdmTypeKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EdmTypeKind", value)
}

// NewEdmTypeKindFromValue returns a pointer to a valid EdmTypeKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEdmTypeKindFromValue(v string) (*EdmTypeKind, error) {
	ev := EdmTypeKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EdmTypeKind: valid values are %v", v, AllowedEdmTypeKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EdmTypeKind) IsValid() bool {
	for _, existing := range AllowedEdmTypeKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EdmTypeKind value
func (v EdmTypeKind) Ptr() *EdmTypeKind {
	return &v
}

type NullableEdmTypeKind struct {
	value *EdmTypeKind
	isSet bool
}

func (v NullableEdmTypeKind) Get() *EdmTypeKind {
	return v.value
}

func (v *NullableEdmTypeKind) Set(val *EdmTypeKind) {
	v.value = val
	v.isSet = true
}

func (v NullableEdmTypeKind) IsSet() bool {
	return v.isSet
}

func (v *NullableEdmTypeKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdmTypeKind(val *EdmTypeKind) *NullableEdmTypeKind {
	return &NullableEdmTypeKind{value: val, isSet: true}
}

func (v NullableEdmTypeKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdmTypeKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
