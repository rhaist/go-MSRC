/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ParameterAttributes the model 'ParameterAttributes'
type ParameterAttributes string

// List of ParameterAttributes
const (
	NONE              ParameterAttributes = "None"
	IN                ParameterAttributes = "In"
	OUT               ParameterAttributes = "Out"
	LCID              ParameterAttributes = "Lcid"
	RETVAL            ParameterAttributes = "Retval"
	OPTIONAL          ParameterAttributes = "Optional"
	HAS_DEFAULT       ParameterAttributes = "HasDefault"
	HAS_FIELD_MARSHAL ParameterAttributes = "HasFieldMarshal"
	RESERVED3         ParameterAttributes = "Reserved3"
	RESERVED4         ParameterAttributes = "Reserved4"
	RESERVED_MASK     ParameterAttributes = "ReservedMask"
)

// All allowed values of ParameterAttributes enum
var AllowedParameterAttributesEnumValues = []ParameterAttributes{
	"None",
	"In",
	"Out",
	"Lcid",
	"Retval",
	"Optional",
	"HasDefault",
	"HasFieldMarshal",
	"Reserved3",
	"Reserved4",
	"ReservedMask",
}

func (v *ParameterAttributes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParameterAttributes(value)
	for _, existing := range AllowedParameterAttributesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParameterAttributes", value)
}

// NewParameterAttributesFromValue returns a pointer to a valid ParameterAttributes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParameterAttributesFromValue(v string) (*ParameterAttributes, error) {
	ev := ParameterAttributes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParameterAttributes: valid values are %v", v, AllowedParameterAttributesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParameterAttributes) IsValid() bool {
	for _, existing := range AllowedParameterAttributesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ParameterAttributes value
func (v ParameterAttributes) Ptr() *ParameterAttributes {
	return &v
}

type NullableParameterAttributes struct {
	value *ParameterAttributes
	isSet bool
}

func (v NullableParameterAttributes) Get() *ParameterAttributes {
	return v.value
}

func (v *NullableParameterAttributes) Set(val *ParameterAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterAttributes(val *ParameterAttributes) *NullableParameterAttributes {
	return &NullableParameterAttributes{value: val, isSet: true}
}

func (v NullableParameterAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
