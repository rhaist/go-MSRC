/*
 * MSRC Public API
 *
 * This RESTful API can be used to engage the Microsoft Security Response Center (MSRC) in the following ways:    - Get security update summaries and details using the [Common Vulnerability Reporting Framework](https://www.icasi.org/cvrf) (CVRF).    - Report suspected cyberattacks or abuse originating from Microsoft Online Services.    - Notify Microsoft of any planned penetration tests against your Azure assets.    **Sample client code** is available on the Microsoft Security [Updates](https://github.com/microsoft/MSRC-Microsoft-Security-Updates-API) and [Engage](https://github.com/Microsoft/MSRC-Microsoft-Engage-API)   Github repositories.
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FullProductName struct for FullProductName
type FullProductName struct {
	ProductID *string `json:"ProductID,omitempty"`
	CPE       *string `json:"CPE,omitempty"`
	Value     *string `json:"Value,omitempty"`
}

// NewFullProductName instantiates a new FullProductName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFullProductName() *FullProductName {
	this := FullProductName{}
	return &this
}

// NewFullProductNameWithDefaults instantiates a new FullProductName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFullProductNameWithDefaults() *FullProductName {
	this := FullProductName{}
	return &this
}

// GetProductID returns the ProductID field value if set, zero value otherwise.
func (o *FullProductName) GetProductID() string {
	if o == nil || o.ProductID == nil {
		var ret string
		return ret
	}
	return *o.ProductID
}

// GetProductIDOk returns a tuple with the ProductID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullProductName) GetProductIDOk() (*string, bool) {
	if o == nil || o.ProductID == nil {
		return nil, false
	}
	return o.ProductID, true
}

// HasProductID returns a boolean if a field has been set.
func (o *FullProductName) HasProductID() bool {
	if o != nil && o.ProductID != nil {
		return true
	}

	return false
}

// SetProductID gets a reference to the given string and assigns it to the ProductID field.
func (o *FullProductName) SetProductID(v string) {
	o.ProductID = &v
}

// GetCPE returns the CPE field value if set, zero value otherwise.
func (o *FullProductName) GetCPE() string {
	if o == nil || o.CPE == nil {
		var ret string
		return ret
	}
	return *o.CPE
}

// GetCPEOk returns a tuple with the CPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullProductName) GetCPEOk() (*string, bool) {
	if o == nil || o.CPE == nil {
		return nil, false
	}
	return o.CPE, true
}

// HasCPE returns a boolean if a field has been set.
func (o *FullProductName) HasCPE() bool {
	if o != nil && o.CPE != nil {
		return true
	}

	return false
}

// SetCPE gets a reference to the given string and assigns it to the CPE field.
func (o *FullProductName) SetCPE(v string) {
	o.CPE = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FullProductName) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullProductName) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FullProductName) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *FullProductName) SetValue(v string) {
	o.Value = &v
}

func (o FullProductName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProductID != nil {
		toSerialize["ProductID"] = o.ProductID
	}
	if o.CPE != nil {
		toSerialize["CPE"] = o.CPE
	}
	if o.Value != nil {
		toSerialize["Value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableFullProductName struct {
	value *FullProductName
	isSet bool
}

func (v NullableFullProductName) Get() *FullProductName {
	return v.value
}

func (v *NullableFullProductName) Set(val *FullProductName) {
	v.value = val
	v.isSet = true
}

func (v NullableFullProductName) IsSet() bool {
	return v.isSet
}

func (v *NullableFullProductName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFullProductName(val *FullProductName) *NullableFullProductName {
	return &NullableFullProductName{value: val, isSet: true}
}

func (v NullableFullProductName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFullProductName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
