/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PublicKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicKey{}

// PublicKey struct for PublicKey
type PublicKey struct {
	EncodedKeyValue   *AsnEncodedData      `json:"encodedKeyValue,omitempty"`
	EncodedParameters *AsnEncodedData      `json:"encodedParameters,omitempty"`
	Key               *AsymmetricAlgorithm `json:"key,omitempty"`
	Oid               *Oid                 `json:"oid,omitempty"`
}

// NewPublicKey instantiates a new PublicKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicKey() *PublicKey {
	this := PublicKey{}
	return &this
}

// NewPublicKeyWithDefaults instantiates a new PublicKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicKeyWithDefaults() *PublicKey {
	this := PublicKey{}
	return &this
}

// GetEncodedKeyValue returns the EncodedKeyValue field value if set, zero value otherwise.
func (o *PublicKey) GetEncodedKeyValue() AsnEncodedData {
	if o == nil || IsNil(o.EncodedKeyValue) {
		var ret AsnEncodedData
		return ret
	}
	return *o.EncodedKeyValue
}

// GetEncodedKeyValueOk returns a tuple with the EncodedKeyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicKey) GetEncodedKeyValueOk() (*AsnEncodedData, bool) {
	if o == nil || IsNil(o.EncodedKeyValue) {
		return nil, false
	}
	return o.EncodedKeyValue, true
}

// HasEncodedKeyValue returns a boolean if a field has been set.
func (o *PublicKey) HasEncodedKeyValue() bool {
	if o != nil && !IsNil(o.EncodedKeyValue) {
		return true
	}

	return false
}

// SetEncodedKeyValue gets a reference to the given AsnEncodedData and assigns it to the EncodedKeyValue field.
func (o *PublicKey) SetEncodedKeyValue(v AsnEncodedData) {
	o.EncodedKeyValue = &v
}

// GetEncodedParameters returns the EncodedParameters field value if set, zero value otherwise.
func (o *PublicKey) GetEncodedParameters() AsnEncodedData {
	if o == nil || IsNil(o.EncodedParameters) {
		var ret AsnEncodedData
		return ret
	}
	return *o.EncodedParameters
}

// GetEncodedParametersOk returns a tuple with the EncodedParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicKey) GetEncodedParametersOk() (*AsnEncodedData, bool) {
	if o == nil || IsNil(o.EncodedParameters) {
		return nil, false
	}
	return o.EncodedParameters, true
}

// HasEncodedParameters returns a boolean if a field has been set.
func (o *PublicKey) HasEncodedParameters() bool {
	if o != nil && !IsNil(o.EncodedParameters) {
		return true
	}

	return false
}

// SetEncodedParameters gets a reference to the given AsnEncodedData and assigns it to the EncodedParameters field.
func (o *PublicKey) SetEncodedParameters(v AsnEncodedData) {
	o.EncodedParameters = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *PublicKey) GetKey() AsymmetricAlgorithm {
	if o == nil || IsNil(o.Key) {
		var ret AsymmetricAlgorithm
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicKey) GetKeyOk() (*AsymmetricAlgorithm, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PublicKey) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given AsymmetricAlgorithm and assigns it to the Key field.
func (o *PublicKey) SetKey(v AsymmetricAlgorithm) {
	o.Key = &v
}

// GetOid returns the Oid field value if set, zero value otherwise.
func (o *PublicKey) GetOid() Oid {
	if o == nil || IsNil(o.Oid) {
		var ret Oid
		return ret
	}
	return *o.Oid
}

// GetOidOk returns a tuple with the Oid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicKey) GetOidOk() (*Oid, bool) {
	if o == nil || IsNil(o.Oid) {
		return nil, false
	}
	return o.Oid, true
}

// HasOid returns a boolean if a field has been set.
func (o *PublicKey) HasOid() bool {
	if o != nil && !IsNil(o.Oid) {
		return true
	}

	return false
}

// SetOid gets a reference to the given Oid and assigns it to the Oid field.
func (o *PublicKey) SetOid(v Oid) {
	o.Oid = &v
}

func (o PublicKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EncodedKeyValue) {
		toSerialize["encodedKeyValue"] = o.EncodedKeyValue
	}
	if !IsNil(o.EncodedParameters) {
		toSerialize["encodedParameters"] = o.EncodedParameters
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Oid) {
		toSerialize["oid"] = o.Oid
	}
	return toSerialize, nil
}

type NullablePublicKey struct {
	value *PublicKey
	isSet bool
}

func (v NullablePublicKey) Get() *PublicKey {
	return v.value
}

func (v *NullablePublicKey) Set(val *PublicKey) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicKey) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicKey(val *PublicKey) *NullablePublicKey {
	return &NullablePublicKey{value: val, isSet: true}
}

func (v NullablePublicKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
