/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ComputeExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputeExpression{}

// ComputeExpression struct for ComputeExpression
type ComputeExpression struct {
	Expression    *SingleValueNode   `json:"expression,omitempty"`
	Alias         NullableString     `json:"alias,omitempty"`
	TypeReference *IEdmTypeReference `json:"typeReference,omitempty"`
}

// NewComputeExpression instantiates a new ComputeExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputeExpression() *ComputeExpression {
	this := ComputeExpression{}
	return &this
}

// NewComputeExpressionWithDefaults instantiates a new ComputeExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputeExpressionWithDefaults() *ComputeExpression {
	this := ComputeExpression{}
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *ComputeExpression) GetExpression() SingleValueNode {
	if o == nil || IsNil(o.Expression) {
		var ret SingleValueNode
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeExpression) GetExpressionOk() (*SingleValueNode, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *ComputeExpression) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given SingleValueNode and assigns it to the Expression field.
func (o *ComputeExpression) SetExpression(v SingleValueNode) {
	o.Expression = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputeExpression) GetAlias() string {
	if o == nil || IsNil(o.Alias.Get()) {
		var ret string
		return ret
	}
	return *o.Alias.Get()
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeExpression) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alias.Get(), o.Alias.IsSet()
}

// HasAlias returns a boolean if a field has been set.
func (o *ComputeExpression) HasAlias() bool {
	if o != nil && o.Alias.IsSet() {
		return true
	}

	return false
}

// SetAlias gets a reference to the given NullableString and assigns it to the Alias field.
func (o *ComputeExpression) SetAlias(v string) {
	o.Alias.Set(&v)
}

// SetAliasNil sets the value for Alias to be an explicit nil
func (o *ComputeExpression) SetAliasNil() {
	o.Alias.Set(nil)
}

// UnsetAlias ensures that no value is present for Alias, not even an explicit nil
func (o *ComputeExpression) UnsetAlias() {
	o.Alias.Unset()
}

// GetTypeReference returns the TypeReference field value if set, zero value otherwise.
func (o *ComputeExpression) GetTypeReference() IEdmTypeReference {
	if o == nil || IsNil(o.TypeReference) {
		var ret IEdmTypeReference
		return ret
	}
	return *o.TypeReference
}

// GetTypeReferenceOk returns a tuple with the TypeReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputeExpression) GetTypeReferenceOk() (*IEdmTypeReference, bool) {
	if o == nil || IsNil(o.TypeReference) {
		return nil, false
	}
	return o.TypeReference, true
}

// HasTypeReference returns a boolean if a field has been set.
func (o *ComputeExpression) HasTypeReference() bool {
	if o != nil && !IsNil(o.TypeReference) {
		return true
	}

	return false
}

// SetTypeReference gets a reference to the given IEdmTypeReference and assigns it to the TypeReference field.
func (o *ComputeExpression) SetTypeReference(v IEdmTypeReference) {
	o.TypeReference = &v
}

func (o ComputeExpression) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputeExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if o.Alias.IsSet() {
		toSerialize["alias"] = o.Alias.Get()
	}
	if !IsNil(o.TypeReference) {
		toSerialize["typeReference"] = o.TypeReference
	}
	return toSerialize, nil
}

type NullableComputeExpression struct {
	value *ComputeExpression
	isSet bool
}

func (v NullableComputeExpression) Get() *ComputeExpression {
	return v.value
}

func (v *NullableComputeExpression) Set(val *ComputeExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeExpression(val *ComputeExpression) *NullableComputeExpression {
	return &NullableComputeExpression{value: val, isSet: true}
}

func (v NullableComputeExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
