/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrderByClause type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderByClause{}

// OrderByClause struct for OrderByClause
type OrderByClause struct {
	ThenBy        *OrderByClause     `json:"thenBy,omitempty"`
	Expression    *SingleValueNode   `json:"expression,omitempty"`
	Direction     *OrderByDirection  `json:"direction,omitempty"`
	RangeVariable *RangeVariable     `json:"rangeVariable,omitempty"`
	ItemType      *IEdmTypeReference `json:"itemType,omitempty"`
}

// NewOrderByClause instantiates a new OrderByClause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderByClause() *OrderByClause {
	this := OrderByClause{}
	return &this
}

// NewOrderByClauseWithDefaults instantiates a new OrderByClause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderByClauseWithDefaults() *OrderByClause {
	this := OrderByClause{}
	return &this
}

// GetThenBy returns the ThenBy field value if set, zero value otherwise.
func (o *OrderByClause) GetThenBy() OrderByClause {
	if o == nil || IsNil(o.ThenBy) {
		var ret OrderByClause
		return ret
	}
	return *o.ThenBy
}

// GetThenByOk returns a tuple with the ThenBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderByClause) GetThenByOk() (*OrderByClause, bool) {
	if o == nil || IsNil(o.ThenBy) {
		return nil, false
	}
	return o.ThenBy, true
}

// HasThenBy returns a boolean if a field has been set.
func (o *OrderByClause) HasThenBy() bool {
	if o != nil && !IsNil(o.ThenBy) {
		return true
	}

	return false
}

// SetThenBy gets a reference to the given OrderByClause and assigns it to the ThenBy field.
func (o *OrderByClause) SetThenBy(v OrderByClause) {
	o.ThenBy = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *OrderByClause) GetExpression() SingleValueNode {
	if o == nil || IsNil(o.Expression) {
		var ret SingleValueNode
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderByClause) GetExpressionOk() (*SingleValueNode, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *OrderByClause) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given SingleValueNode and assigns it to the Expression field.
func (o *OrderByClause) SetExpression(v SingleValueNode) {
	o.Expression = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *OrderByClause) GetDirection() OrderByDirection {
	if o == nil || IsNil(o.Direction) {
		var ret OrderByDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderByClause) GetDirectionOk() (*OrderByDirection, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *OrderByClause) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given OrderByDirection and assigns it to the Direction field.
func (o *OrderByClause) SetDirection(v OrderByDirection) {
	o.Direction = &v
}

// GetRangeVariable returns the RangeVariable field value if set, zero value otherwise.
func (o *OrderByClause) GetRangeVariable() RangeVariable {
	if o == nil || IsNil(o.RangeVariable) {
		var ret RangeVariable
		return ret
	}
	return *o.RangeVariable
}

// GetRangeVariableOk returns a tuple with the RangeVariable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderByClause) GetRangeVariableOk() (*RangeVariable, bool) {
	if o == nil || IsNil(o.RangeVariable) {
		return nil, false
	}
	return o.RangeVariable, true
}

// HasRangeVariable returns a boolean if a field has been set.
func (o *OrderByClause) HasRangeVariable() bool {
	if o != nil && !IsNil(o.RangeVariable) {
		return true
	}

	return false
}

// SetRangeVariable gets a reference to the given RangeVariable and assigns it to the RangeVariable field.
func (o *OrderByClause) SetRangeVariable(v RangeVariable) {
	o.RangeVariable = &v
}

// GetItemType returns the ItemType field value if set, zero value otherwise.
func (o *OrderByClause) GetItemType() IEdmTypeReference {
	if o == nil || IsNil(o.ItemType) {
		var ret IEdmTypeReference
		return ret
	}
	return *o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderByClause) GetItemTypeOk() (*IEdmTypeReference, bool) {
	if o == nil || IsNil(o.ItemType) {
		return nil, false
	}
	return o.ItemType, true
}

// HasItemType returns a boolean if a field has been set.
func (o *OrderByClause) HasItemType() bool {
	if o != nil && !IsNil(o.ItemType) {
		return true
	}

	return false
}

// SetItemType gets a reference to the given IEdmTypeReference and assigns it to the ItemType field.
func (o *OrderByClause) SetItemType(v IEdmTypeReference) {
	o.ItemType = &v
}

func (o OrderByClause) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderByClause) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ThenBy) {
		toSerialize["thenBy"] = o.ThenBy
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.RangeVariable) {
		toSerialize["rangeVariable"] = o.RangeVariable
	}
	if !IsNil(o.ItemType) {
		toSerialize["itemType"] = o.ItemType
	}
	return toSerialize, nil
}

type NullableOrderByClause struct {
	value *OrderByClause
	isSet bool
}

func (v NullableOrderByClause) Get() *OrderByClause {
	return v.value
}

func (v *NullableOrderByClause) Set(val *OrderByClause) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderByClause) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderByClause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderByClause(val *OrderByClause) *NullableOrderByClause {
	return &NullableOrderByClause{value: val, isSet: true}
}

func (v NullableOrderByClause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderByClause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
