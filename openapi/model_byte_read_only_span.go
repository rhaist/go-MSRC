/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ByteReadOnlySpan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ByteReadOnlySpan{}

// ByteReadOnlySpan struct for ByteReadOnlySpan
type ByteReadOnlySpan struct {
	Length  *int32 `json:"length,omitempty"`
	IsEmpty *bool  `json:"isEmpty,omitempty"`
}

// NewByteReadOnlySpan instantiates a new ByteReadOnlySpan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewByteReadOnlySpan() *ByteReadOnlySpan {
	this := ByteReadOnlySpan{}
	return &this
}

// NewByteReadOnlySpanWithDefaults instantiates a new ByteReadOnlySpan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewByteReadOnlySpanWithDefaults() *ByteReadOnlySpan {
	this := ByteReadOnlySpan{}
	return &this
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *ByteReadOnlySpan) GetLength() int32 {
	if o == nil || IsNil(o.Length) {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ByteReadOnlySpan) GetLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *ByteReadOnlySpan) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *ByteReadOnlySpan) SetLength(v int32) {
	o.Length = &v
}

// GetIsEmpty returns the IsEmpty field value if set, zero value otherwise.
func (o *ByteReadOnlySpan) GetIsEmpty() bool {
	if o == nil || IsNil(o.IsEmpty) {
		var ret bool
		return ret
	}
	return *o.IsEmpty
}

// GetIsEmptyOk returns a tuple with the IsEmpty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ByteReadOnlySpan) GetIsEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEmpty) {
		return nil, false
	}
	return o.IsEmpty, true
}

// HasIsEmpty returns a boolean if a field has been set.
func (o *ByteReadOnlySpan) HasIsEmpty() bool {
	if o != nil && !IsNil(o.IsEmpty) {
		return true
	}

	return false
}

// SetIsEmpty gets a reference to the given bool and assigns it to the IsEmpty field.
func (o *ByteReadOnlySpan) SetIsEmpty(v bool) {
	o.IsEmpty = &v
}

func (o ByteReadOnlySpan) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ByteReadOnlySpan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.IsEmpty) {
		toSerialize["isEmpty"] = o.IsEmpty
	}
	return toSerialize, nil
}

type NullableByteReadOnlySpan struct {
	value *ByteReadOnlySpan
	isSet bool
}

func (v NullableByteReadOnlySpan) Get() *ByteReadOnlySpan {
	return v.value
}

func (v *NullableByteReadOnlySpan) Set(val *ByteReadOnlySpan) {
	v.value = val
	v.isSet = true
}

func (v NullableByteReadOnlySpan) IsSet() bool {
	return v.isSet
}

func (v *NullableByteReadOnlySpan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableByteReadOnlySpan(val *ByteReadOnlySpan) *NullableByteReadOnlySpan {
	return &NullableByteReadOnlySpan{value: val, isSet: true}
}

func (v NullableByteReadOnlySpan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableByteReadOnlySpan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
