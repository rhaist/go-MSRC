/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SkipTokenQueryOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkipTokenQueryOption{}

// SkipTokenQueryOption struct for SkipTokenQueryOption
type SkipTokenQueryOption struct {
	RawValue  NullableString         `json:"rawValue,omitempty"`
	Context   *ODataQueryContext     `json:"context,omitempty"`
	Validator map[string]interface{} `json:"validator,omitempty"`
	Handler   map[string]interface{} `json:"handler,omitempty"`
}

// NewSkipTokenQueryOption instantiates a new SkipTokenQueryOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkipTokenQueryOption() *SkipTokenQueryOption {
	this := SkipTokenQueryOption{}
	return &this
}

// NewSkipTokenQueryOptionWithDefaults instantiates a new SkipTokenQueryOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkipTokenQueryOptionWithDefaults() *SkipTokenQueryOption {
	this := SkipTokenQueryOption{}
	return &this
}

// GetRawValue returns the RawValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SkipTokenQueryOption) GetRawValue() string {
	if o == nil || IsNil(o.RawValue.Get()) {
		var ret string
		return ret
	}
	return *o.RawValue.Get()
}

// GetRawValueOk returns a tuple with the RawValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SkipTokenQueryOption) GetRawValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RawValue.Get(), o.RawValue.IsSet()
}

// HasRawValue returns a boolean if a field has been set.
func (o *SkipTokenQueryOption) HasRawValue() bool {
	if o != nil && o.RawValue.IsSet() {
		return true
	}

	return false
}

// SetRawValue gets a reference to the given NullableString and assigns it to the RawValue field.
func (o *SkipTokenQueryOption) SetRawValue(v string) {
	o.RawValue.Set(&v)
}

// SetRawValueNil sets the value for RawValue to be an explicit nil
func (o *SkipTokenQueryOption) SetRawValueNil() {
	o.RawValue.Set(nil)
}

// UnsetRawValue ensures that no value is present for RawValue, not even an explicit nil
func (o *SkipTokenQueryOption) UnsetRawValue() {
	o.RawValue.Unset()
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *SkipTokenQueryOption) GetContext() ODataQueryContext {
	if o == nil || IsNil(o.Context) {
		var ret ODataQueryContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkipTokenQueryOption) GetContextOk() (*ODataQueryContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *SkipTokenQueryOption) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given ODataQueryContext and assigns it to the Context field.
func (o *SkipTokenQueryOption) SetContext(v ODataQueryContext) {
	o.Context = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *SkipTokenQueryOption) GetValidator() map[string]interface{} {
	if o == nil || IsNil(o.Validator) {
		var ret map[string]interface{}
		return ret
	}
	return o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkipTokenQueryOption) GetValidatorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Validator) {
		return map[string]interface{}{}, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *SkipTokenQueryOption) HasValidator() bool {
	if o != nil && !IsNil(o.Validator) {
		return true
	}

	return false
}

// SetValidator gets a reference to the given map[string]interface{} and assigns it to the Validator field.
func (o *SkipTokenQueryOption) SetValidator(v map[string]interface{}) {
	o.Validator = v
}

// GetHandler returns the Handler field value if set, zero value otherwise.
func (o *SkipTokenQueryOption) GetHandler() map[string]interface{} {
	if o == nil || IsNil(o.Handler) {
		var ret map[string]interface{}
		return ret
	}
	return o.Handler
}

// GetHandlerOk returns a tuple with the Handler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkipTokenQueryOption) GetHandlerOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Handler) {
		return map[string]interface{}{}, false
	}
	return o.Handler, true
}

// HasHandler returns a boolean if a field has been set.
func (o *SkipTokenQueryOption) HasHandler() bool {
	if o != nil && !IsNil(o.Handler) {
		return true
	}

	return false
}

// SetHandler gets a reference to the given map[string]interface{} and assigns it to the Handler field.
func (o *SkipTokenQueryOption) SetHandler(v map[string]interface{}) {
	o.Handler = v
}

func (o SkipTokenQueryOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkipTokenQueryOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RawValue.IsSet() {
		toSerialize["rawValue"] = o.RawValue.Get()
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Validator) {
		toSerialize["validator"] = o.Validator
	}
	if !IsNil(o.Handler) {
		toSerialize["handler"] = o.Handler
	}
	return toSerialize, nil
}

type NullableSkipTokenQueryOption struct {
	value *SkipTokenQueryOption
	isSet bool
}

func (v NullableSkipTokenQueryOption) Get() *SkipTokenQueryOption {
	return v.value
}

func (v *NullableSkipTokenQueryOption) Set(val *SkipTokenQueryOption) {
	v.value = val
	v.isSet = true
}

func (v NullableSkipTokenQueryOption) IsSet() bool {
	return v.isSet
}

func (v *NullableSkipTokenQueryOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkipTokenQueryOption(val *SkipTokenQueryOption) *NullableSkipTokenQueryOption {
	return &NullableSkipTokenQueryOption{value: val, isSet: true}
}

func (v NullableSkipTokenQueryOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkipTokenQueryOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
