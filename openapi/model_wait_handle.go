/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WaitHandle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WaitHandle{}

// WaitHandle struct for WaitHandle
type WaitHandle struct {
	Handle         map[string]interface{} `json:"handle,omitempty"`
	SafeWaitHandle *SafeWaitHandle        `json:"safeWaitHandle,omitempty"`
}

// NewWaitHandle instantiates a new WaitHandle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWaitHandle() *WaitHandle {
	this := WaitHandle{}
	return &this
}

// NewWaitHandleWithDefaults instantiates a new WaitHandle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWaitHandleWithDefaults() *WaitHandle {
	this := WaitHandle{}
	return &this
}

// GetHandle returns the Handle field value if set, zero value otherwise.
func (o *WaitHandle) GetHandle() map[string]interface{} {
	if o == nil || IsNil(o.Handle) {
		var ret map[string]interface{}
		return ret
	}
	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitHandle) GetHandleOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Handle) {
		return map[string]interface{}{}, false
	}
	return o.Handle, true
}

// HasHandle returns a boolean if a field has been set.
func (o *WaitHandle) HasHandle() bool {
	if o != nil && !IsNil(o.Handle) {
		return true
	}

	return false
}

// SetHandle gets a reference to the given map[string]interface{} and assigns it to the Handle field.
func (o *WaitHandle) SetHandle(v map[string]interface{}) {
	o.Handle = v
}

// GetSafeWaitHandle returns the SafeWaitHandle field value if set, zero value otherwise.
func (o *WaitHandle) GetSafeWaitHandle() SafeWaitHandle {
	if o == nil || IsNil(o.SafeWaitHandle) {
		var ret SafeWaitHandle
		return ret
	}
	return *o.SafeWaitHandle
}

// GetSafeWaitHandleOk returns a tuple with the SafeWaitHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitHandle) GetSafeWaitHandleOk() (*SafeWaitHandle, bool) {
	if o == nil || IsNil(o.SafeWaitHandle) {
		return nil, false
	}
	return o.SafeWaitHandle, true
}

// HasSafeWaitHandle returns a boolean if a field has been set.
func (o *WaitHandle) HasSafeWaitHandle() bool {
	if o != nil && !IsNil(o.SafeWaitHandle) {
		return true
	}

	return false
}

// SetSafeWaitHandle gets a reference to the given SafeWaitHandle and assigns it to the SafeWaitHandle field.
func (o *WaitHandle) SetSafeWaitHandle(v SafeWaitHandle) {
	o.SafeWaitHandle = &v
}

func (o WaitHandle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WaitHandle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Handle) {
		toSerialize["handle"] = o.Handle
	}
	if !IsNil(o.SafeWaitHandle) {
		toSerialize["safeWaitHandle"] = o.SafeWaitHandle
	}
	return toSerialize, nil
}

type NullableWaitHandle struct {
	value *WaitHandle
	isSet bool
}

func (v NullableWaitHandle) Get() *WaitHandle {
	return v.value
}

func (v *NullableWaitHandle) Set(val *WaitHandle) {
	v.value = val
	v.isSet = true
}

func (v NullableWaitHandle) IsSet() bool {
	return v.isSet
}

func (v *NullableWaitHandle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaitHandle(val *WaitHandle) *NullableWaitHandle {
	return &NullableWaitHandle{value: val, isSet: true}
}

func (v NullableWaitHandle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaitHandle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
