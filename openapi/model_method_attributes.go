/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MethodAttributes the model 'MethodAttributes'
type MethodAttributes string

// List of MethodAttributes
const (
	PRIVATE_SCOPE            MethodAttributes = "PrivateScope"
	PRIVATE                  MethodAttributes = "Private"
	FAM_AND_ASSEM            MethodAttributes = "FamANDAssem"
	ASSEMBLY                 MethodAttributes = "Assembly"
	FAMILY                   MethodAttributes = "Family"
	FAM_OR_ASSEM             MethodAttributes = "FamORAssem"
	PUBLIC                   MethodAttributes = "Public"
	MEMBER_ACCESS_MASK       MethodAttributes = "MemberAccessMask"
	UNMANAGED_EXPORT         MethodAttributes = "UnmanagedExport"
	STATIC                   MethodAttributes = "Static"
	FINAL                    MethodAttributes = "Final"
	VIRTUAL                  MethodAttributes = "Virtual"
	HIDE_BY_SIG              MethodAttributes = "HideBySig"
	NEW_SLOT                 MethodAttributes = "NewSlot"
	CHECK_ACCESS_ON_OVERRIDE MethodAttributes = "CheckAccessOnOverride"
	ABSTRACT                 MethodAttributes = "Abstract"
	SPECIAL_NAME             MethodAttributes = "SpecialName"
	RT_SPECIAL_NAME          MethodAttributes = "RTSpecialName"
	PINVOKE_IMPL             MethodAttributes = "PinvokeImpl"
	HAS_SECURITY             MethodAttributes = "HasSecurity"
	REQUIRE_SEC_OBJECT       MethodAttributes = "RequireSecObject"
	RESERVED_MASK            MethodAttributes = "ReservedMask"
)

// All allowed values of MethodAttributes enum
var AllowedMethodAttributesEnumValues = []MethodAttributes{
	"PrivateScope",
	"Private",
	"FamANDAssem",
	"Assembly",
	"Family",
	"FamORAssem",
	"Public",
	"MemberAccessMask",
	"UnmanagedExport",
	"Static",
	"Final",
	"Virtual",
	"HideBySig",
	"NewSlot",
	"CheckAccessOnOverride",
	"Abstract",
	"SpecialName",
	"RTSpecialName",
	"PinvokeImpl",
	"HasSecurity",
	"RequireSecObject",
	"ReservedMask",
}

func (v *MethodAttributes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MethodAttributes(value)
	for _, existing := range AllowedMethodAttributesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MethodAttributes", value)
}

// NewMethodAttributesFromValue returns a pointer to a valid MethodAttributes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMethodAttributesFromValue(v string) (*MethodAttributes, error) {
	ev := MethodAttributes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MethodAttributes: valid values are %v", v, AllowedMethodAttributesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MethodAttributes) IsValid() bool {
	for _, existing := range AllowedMethodAttributesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MethodAttributes value
func (v MethodAttributes) Ptr() *MethodAttributes {
	return &v
}

type NullableMethodAttributes struct {
	value *MethodAttributes
	isSet bool
}

func (v NullableMethodAttributes) Get() *MethodAttributes {
	return v.value
}

func (v *NullableMethodAttributes) Set(val *MethodAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableMethodAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableMethodAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMethodAttributes(val *MethodAttributes) *NullableMethodAttributes {
	return &NullableMethodAttributes{value: val, isSet: true}
}

func (v NullableMethodAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMethodAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
