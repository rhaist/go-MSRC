/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Module type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Module{}

// Module struct for Module
type Module struct {
	Assembly           *Assembly             `json:"assembly,omitempty"`
	FullyQualifiedName NullableString        `json:"fullyQualifiedName,omitempty"`
	Name               NullableString        `json:"name,omitempty"`
	MdStreamVersion    *int32                `json:"mdStreamVersion,omitempty"`
	ModuleVersionId    *string               `json:"moduleVersionId,omitempty"`
	ScopeName          NullableString        `json:"scopeName,omitempty"`
	ModuleHandle       *ModuleHandle         `json:"moduleHandle,omitempty"`
	CustomAttributes   []CustomAttributeData `json:"customAttributes,omitempty"`
	MetadataToken      *int32                `json:"metadataToken,omitempty"`
}

// NewModule instantiates a new Module object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModule() *Module {
	this := Module{}
	return &this
}

// NewModuleWithDefaults instantiates a new Module object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModuleWithDefaults() *Module {
	this := Module{}
	return &this
}

// GetAssembly returns the Assembly field value if set, zero value otherwise.
func (o *Module) GetAssembly() Assembly {
	if o == nil || IsNil(o.Assembly) {
		var ret Assembly
		return ret
	}
	return *o.Assembly
}

// GetAssemblyOk returns a tuple with the Assembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetAssemblyOk() (*Assembly, bool) {
	if o == nil || IsNil(o.Assembly) {
		return nil, false
	}
	return o.Assembly, true
}

// HasAssembly returns a boolean if a field has been set.
func (o *Module) HasAssembly() bool {
	if o != nil && !IsNil(o.Assembly) {
		return true
	}

	return false
}

// SetAssembly gets a reference to the given Assembly and assigns it to the Assembly field.
func (o *Module) SetAssembly(v Assembly) {
	o.Assembly = &v
}

// GetFullyQualifiedName returns the FullyQualifiedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Module) GetFullyQualifiedName() string {
	if o == nil || IsNil(o.FullyQualifiedName.Get()) {
		var ret string
		return ret
	}
	return *o.FullyQualifiedName.Get()
}

// GetFullyQualifiedNameOk returns a tuple with the FullyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Module) GetFullyQualifiedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullyQualifiedName.Get(), o.FullyQualifiedName.IsSet()
}

// HasFullyQualifiedName returns a boolean if a field has been set.
func (o *Module) HasFullyQualifiedName() bool {
	if o != nil && o.FullyQualifiedName.IsSet() {
		return true
	}

	return false
}

// SetFullyQualifiedName gets a reference to the given NullableString and assigns it to the FullyQualifiedName field.
func (o *Module) SetFullyQualifiedName(v string) {
	o.FullyQualifiedName.Set(&v)
}

// SetFullyQualifiedNameNil sets the value for FullyQualifiedName to be an explicit nil
func (o *Module) SetFullyQualifiedNameNil() {
	o.FullyQualifiedName.Set(nil)
}

// UnsetFullyQualifiedName ensures that no value is present for FullyQualifiedName, not even an explicit nil
func (o *Module) UnsetFullyQualifiedName() {
	o.FullyQualifiedName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Module) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Module) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Module) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Module) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *Module) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Module) UnsetName() {
	o.Name.Unset()
}

// GetMdStreamVersion returns the MdStreamVersion field value if set, zero value otherwise.
func (o *Module) GetMdStreamVersion() int32 {
	if o == nil || IsNil(o.MdStreamVersion) {
		var ret int32
		return ret
	}
	return *o.MdStreamVersion
}

// GetMdStreamVersionOk returns a tuple with the MdStreamVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetMdStreamVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.MdStreamVersion) {
		return nil, false
	}
	return o.MdStreamVersion, true
}

// HasMdStreamVersion returns a boolean if a field has been set.
func (o *Module) HasMdStreamVersion() bool {
	if o != nil && !IsNil(o.MdStreamVersion) {
		return true
	}

	return false
}

// SetMdStreamVersion gets a reference to the given int32 and assigns it to the MdStreamVersion field.
func (o *Module) SetMdStreamVersion(v int32) {
	o.MdStreamVersion = &v
}

// GetModuleVersionId returns the ModuleVersionId field value if set, zero value otherwise.
func (o *Module) GetModuleVersionId() string {
	if o == nil || IsNil(o.ModuleVersionId) {
		var ret string
		return ret
	}
	return *o.ModuleVersionId
}

// GetModuleVersionIdOk returns a tuple with the ModuleVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetModuleVersionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ModuleVersionId) {
		return nil, false
	}
	return o.ModuleVersionId, true
}

// HasModuleVersionId returns a boolean if a field has been set.
func (o *Module) HasModuleVersionId() bool {
	if o != nil && !IsNil(o.ModuleVersionId) {
		return true
	}

	return false
}

// SetModuleVersionId gets a reference to the given string and assigns it to the ModuleVersionId field.
func (o *Module) SetModuleVersionId(v string) {
	o.ModuleVersionId = &v
}

// GetScopeName returns the ScopeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Module) GetScopeName() string {
	if o == nil || IsNil(o.ScopeName.Get()) {
		var ret string
		return ret
	}
	return *o.ScopeName.Get()
}

// GetScopeNameOk returns a tuple with the ScopeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Module) GetScopeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScopeName.Get(), o.ScopeName.IsSet()
}

// HasScopeName returns a boolean if a field has been set.
func (o *Module) HasScopeName() bool {
	if o != nil && o.ScopeName.IsSet() {
		return true
	}

	return false
}

// SetScopeName gets a reference to the given NullableString and assigns it to the ScopeName field.
func (o *Module) SetScopeName(v string) {
	o.ScopeName.Set(&v)
}

// SetScopeNameNil sets the value for ScopeName to be an explicit nil
func (o *Module) SetScopeNameNil() {
	o.ScopeName.Set(nil)
}

// UnsetScopeName ensures that no value is present for ScopeName, not even an explicit nil
func (o *Module) UnsetScopeName() {
	o.ScopeName.Unset()
}

// GetModuleHandle returns the ModuleHandle field value if set, zero value otherwise.
func (o *Module) GetModuleHandle() ModuleHandle {
	if o == nil || IsNil(o.ModuleHandle) {
		var ret ModuleHandle
		return ret
	}
	return *o.ModuleHandle
}

// GetModuleHandleOk returns a tuple with the ModuleHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetModuleHandleOk() (*ModuleHandle, bool) {
	if o == nil || IsNil(o.ModuleHandle) {
		return nil, false
	}
	return o.ModuleHandle, true
}

// HasModuleHandle returns a boolean if a field has been set.
func (o *Module) HasModuleHandle() bool {
	if o != nil && !IsNil(o.ModuleHandle) {
		return true
	}

	return false
}

// SetModuleHandle gets a reference to the given ModuleHandle and assigns it to the ModuleHandle field.
func (o *Module) SetModuleHandle(v ModuleHandle) {
	o.ModuleHandle = &v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Module) GetCustomAttributes() []CustomAttributeData {
	if o == nil {
		var ret []CustomAttributeData
		return ret
	}
	return o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Module) GetCustomAttributesOk() ([]CustomAttributeData, bool) {
	if o == nil || IsNil(o.CustomAttributes) {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *Module) HasCustomAttributes() bool {
	if o != nil && !IsNil(o.CustomAttributes) {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given []CustomAttributeData and assigns it to the CustomAttributes field.
func (o *Module) SetCustomAttributes(v []CustomAttributeData) {
	o.CustomAttributes = v
}

// GetMetadataToken returns the MetadataToken field value if set, zero value otherwise.
func (o *Module) GetMetadataToken() int32 {
	if o == nil || IsNil(o.MetadataToken) {
		var ret int32
		return ret
	}
	return *o.MetadataToken
}

// GetMetadataTokenOk returns a tuple with the MetadataToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetMetadataTokenOk() (*int32, bool) {
	if o == nil || IsNil(o.MetadataToken) {
		return nil, false
	}
	return o.MetadataToken, true
}

// HasMetadataToken returns a boolean if a field has been set.
func (o *Module) HasMetadataToken() bool {
	if o != nil && !IsNil(o.MetadataToken) {
		return true
	}

	return false
}

// SetMetadataToken gets a reference to the given int32 and assigns it to the MetadataToken field.
func (o *Module) SetMetadataToken(v int32) {
	o.MetadataToken = &v
}

func (o Module) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Module) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assembly) {
		toSerialize["assembly"] = o.Assembly
	}
	if o.FullyQualifiedName.IsSet() {
		toSerialize["fullyQualifiedName"] = o.FullyQualifiedName.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.MdStreamVersion) {
		toSerialize["mdStreamVersion"] = o.MdStreamVersion
	}
	if !IsNil(o.ModuleVersionId) {
		toSerialize["moduleVersionId"] = o.ModuleVersionId
	}
	if o.ScopeName.IsSet() {
		toSerialize["scopeName"] = o.ScopeName.Get()
	}
	if !IsNil(o.ModuleHandle) {
		toSerialize["moduleHandle"] = o.ModuleHandle
	}
	if o.CustomAttributes != nil {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	if !IsNil(o.MetadataToken) {
		toSerialize["metadataToken"] = o.MetadataToken
	}
	return toSerialize, nil
}

type NullableModule struct {
	value *Module
	isSet bool
}

func (v NullableModule) Get() *Module {
	return v.value
}

func (v *NullableModule) Set(val *Module) {
	v.value = val
	v.isSet = true
}

func (v NullableModule) IsSet() bool {
	return v.isSet
}

func (v *NullableModule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModule(val *Module) *NullableModule {
	return &NullableModule{value: val, isSet: true}
}

func (v NullableModule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
