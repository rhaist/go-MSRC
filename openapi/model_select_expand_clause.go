/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SelectExpandClause type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectExpandClause{}

// SelectExpandClause struct for SelectExpandClause
type SelectExpandClause struct {
	SelectedItems []map[string]interface{} `json:"selectedItems,omitempty"`
	AllSelected   *bool                    `json:"allSelected,omitempty"`
}

// NewSelectExpandClause instantiates a new SelectExpandClause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectExpandClause() *SelectExpandClause {
	this := SelectExpandClause{}
	return &this
}

// NewSelectExpandClauseWithDefaults instantiates a new SelectExpandClause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectExpandClauseWithDefaults() *SelectExpandClause {
	this := SelectExpandClause{}
	return &this
}

// GetSelectedItems returns the SelectedItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelectExpandClause) GetSelectedItems() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.SelectedItems
}

// GetSelectedItemsOk returns a tuple with the SelectedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelectExpandClause) GetSelectedItemsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.SelectedItems) {
		return nil, false
	}
	return o.SelectedItems, true
}

// HasSelectedItems returns a boolean if a field has been set.
func (o *SelectExpandClause) HasSelectedItems() bool {
	if o != nil && !IsNil(o.SelectedItems) {
		return true
	}

	return false
}

// SetSelectedItems gets a reference to the given []map[string]interface{} and assigns it to the SelectedItems field.
func (o *SelectExpandClause) SetSelectedItems(v []map[string]interface{}) {
	o.SelectedItems = v
}

// GetAllSelected returns the AllSelected field value if set, zero value otherwise.
func (o *SelectExpandClause) GetAllSelected() bool {
	if o == nil || IsNil(o.AllSelected) {
		var ret bool
		return ret
	}
	return *o.AllSelected
}

// GetAllSelectedOk returns a tuple with the AllSelected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectExpandClause) GetAllSelectedOk() (*bool, bool) {
	if o == nil || IsNil(o.AllSelected) {
		return nil, false
	}
	return o.AllSelected, true
}

// HasAllSelected returns a boolean if a field has been set.
func (o *SelectExpandClause) HasAllSelected() bool {
	if o != nil && !IsNil(o.AllSelected) {
		return true
	}

	return false
}

// SetAllSelected gets a reference to the given bool and assigns it to the AllSelected field.
func (o *SelectExpandClause) SetAllSelected(v bool) {
	o.AllSelected = &v
}

func (o SelectExpandClause) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectExpandClause) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SelectedItems != nil {
		toSerialize["selectedItems"] = o.SelectedItems
	}
	if !IsNil(o.AllSelected) {
		toSerialize["allSelected"] = o.AllSelected
	}
	return toSerialize, nil
}

type NullableSelectExpandClause struct {
	value *SelectExpandClause
	isSet bool
}

func (v NullableSelectExpandClause) Get() *SelectExpandClause {
	return v.value
}

func (v *NullableSelectExpandClause) Set(val *SelectExpandClause) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectExpandClause) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectExpandClause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectExpandClause(val *SelectExpandClause) *NullableSelectExpandClause {
	return &NullableSelectExpandClause{value: val, isSet: true}
}

func (v NullableSelectExpandClause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectExpandClause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
