/*
MSRC CVRF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TypeAttributes the model 'TypeAttributes'
type TypeAttributes string

// List of TypeAttributes
const (
	NOT_PUBLIC           TypeAttributes = "NotPublic"
	PUBLIC               TypeAttributes = "Public"
	NESTED_PUBLIC        TypeAttributes = "NestedPublic"
	NESTED_PRIVATE       TypeAttributes = "NestedPrivate"
	NESTED_FAMILY        TypeAttributes = "NestedFamily"
	NESTED_ASSEMBLY      TypeAttributes = "NestedAssembly"
	NESTED_FAM_AND_ASSEM TypeAttributes = "NestedFamANDAssem"
	NESTED_FAM_OR_ASSEM  TypeAttributes = "NestedFamORAssem"
	SEQUENTIAL_LAYOUT    TypeAttributes = "SequentialLayout"
	EXPLICIT_LAYOUT      TypeAttributes = "ExplicitLayout"
	LAYOUT_MASK          TypeAttributes = "LayoutMask"
	INTERFACE            TypeAttributes = "Interface"
	ABSTRACT             TypeAttributes = "Abstract"
	SEALED               TypeAttributes = "Sealed"
	SPECIAL_NAME         TypeAttributes = "SpecialName"
	RT_SPECIAL_NAME      TypeAttributes = "RTSpecialName"
	IMPORT               TypeAttributes = "Import"
	SERIALIZABLE         TypeAttributes = "Serializable"
	WINDOWS_RUNTIME      TypeAttributes = "WindowsRuntime"
	UNICODE_CLASS        TypeAttributes = "UnicodeClass"
	AUTO_CLASS           TypeAttributes = "AutoClass"
	CUSTOM_FORMAT_CLASS  TypeAttributes = "CustomFormatClass"
	HAS_SECURITY         TypeAttributes = "HasSecurity"
	RESERVED_MASK        TypeAttributes = "ReservedMask"
	BEFORE_FIELD_INIT    TypeAttributes = "BeforeFieldInit"
	CUSTOM_FORMAT_MASK   TypeAttributes = "CustomFormatMask"
)

// All allowed values of TypeAttributes enum
var AllowedTypeAttributesEnumValues = []TypeAttributes{
	"NotPublic",
	"Public",
	"NestedPublic",
	"NestedPrivate",
	"NestedFamily",
	"NestedAssembly",
	"NestedFamANDAssem",
	"NestedFamORAssem",
	"SequentialLayout",
	"ExplicitLayout",
	"LayoutMask",
	"Interface",
	"Abstract",
	"Sealed",
	"SpecialName",
	"RTSpecialName",
	"Import",
	"Serializable",
	"WindowsRuntime",
	"UnicodeClass",
	"AutoClass",
	"CustomFormatClass",
	"HasSecurity",
	"ReservedMask",
	"BeforeFieldInit",
	"CustomFormatMask",
}

func (v *TypeAttributes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypeAttributes(value)
	for _, existing := range AllowedTypeAttributesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypeAttributes", value)
}

// NewTypeAttributesFromValue returns a pointer to a valid TypeAttributes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypeAttributesFromValue(v string) (*TypeAttributes, error) {
	ev := TypeAttributes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypeAttributes: valid values are %v", v, AllowedTypeAttributesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypeAttributes) IsValid() bool {
	for _, existing := range AllowedTypeAttributesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TypeAttributes value
func (v TypeAttributes) Ptr() *TypeAttributes {
	return &v
}

type NullableTypeAttributes struct {
	value *TypeAttributes
	isSet bool
}

func (v NullableTypeAttributes) Get() *TypeAttributes {
	return v.value
}

func (v *NullableTypeAttributes) Set(val *TypeAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeAttributes(val *TypeAttributes) *NullableTypeAttributes {
	return &NullableTypeAttributes{value: val, isSet: true}
}

func (v NullableTypeAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
